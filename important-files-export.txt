================================================================================
PROJECT MANAGEMENT APP - IMPORTANT FILES EXPORT
Generated: 2025-09-04T04:16:03.637Z
================================================================================

EXISTING FILES:
----------------------------------------
✓ backend/main.py
✓ backend/models/database.py
✓ backend/models/schemas.py
✓ backend/requirements.txt
✓ backend/.env
✓ frontend/src/App.tsx
✓ frontend/src/index.tsx
✓ frontend/src/types/index.ts
✓ frontend/src/utils/api.ts
✓ frontend/src/utils/pdf-utils.ts
✓ frontend/src/App.css
✓ frontend/package.json
✓ frontend/tsconfig.json
✓ frontend/public/index.html
✓ frontend/src/pages/ProjectList.tsx
✓ frontend/src/pages/ProjectDetail.tsx
✓ frontend/src/pages/EmployeeList.tsx
✓ frontend/src/pages/EmployeeDetail.tsx
✓ frontend/src/components/WBSView.tsx
✓ frontend/src/components/PERTChart.tsx
✓ docker-compose.yml
✓ README.md

================================================================================

FILE: backend/main.py
---------------------
from fastapi import FastAPI, Depends, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from models.database import get_db, create_tables, engine, SessionLocal
from models import database as models
from models.schemas import *
import uvicorn
from datetime import date, timedelta
from decimal import Decimal

app = FastAPI(title="Project Management API", version="1.0.0")

# CORS設定（フロントエンドからのアクセス許可）
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],  # React dev server
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# データベーステーブル作成
create_tables()

# 初期データ投入 - lifespan イベントに修正
@app.on_event("startup")
async def startup_event():
    db = SessionLocal()
    try:
        # コードマスタの初期データ
        if not db.query(models.CodeMaster).first():
            code_data = [
                ("STATUS", "NOT_STARTED", "未着手"),
                ("STATUS", "IN_PROGRESS", "進行中"),
                ("STATUS", "COMPLETED", "完了"),
                ("STATUS", "ACTIVE", "アクティブ"),
                ("STATUS", "INACTIVE", "非アクティブ"),
                ("PRIORITY", "HIGH", "高"),
                ("PRIORITY", "MEDIUM", "中"),
                ("PRIORITY", "LOW", "低"),
            ]
            for code_type, code_value, code_label in code_data:
                db.add(models.CodeMaster(code_type=code_type, code_value=code_value, code_label=code_label))
            
            # サンプル社員データ
            employees = [
                models.Employee(employee_name="田中太郎", email="tanaka@example.com", daily_work_hours=8.0),
                models.Employee(employee_name="佐藤花子", email="sato@example.com", daily_work_hours=7.5),
                models.Employee(employee_name="鈴木一郎", email="suzuki@example.com", daily_work_hours=8.0),
            ]
            for emp in employees:
                db.add(emp)
            
            db.commit()
    finally:
        db.close()

# ============ Employee API ============
@app.get("/api/employees", response_model=List[Employee])
def get_employees(db: Session = Depends(get_db)):
    """社員一覧取得"""
    return db.query(models.Employee).all()

@app.get("/api/employees/{employee_id}", response_model=Employee)
def get_employee(employee_id: int, db: Session = Depends(get_db)):
    """社員詳細取得"""
    employee = db.query(models.Employee).filter(models.Employee.employee_id == employee_id).first()
    if not employee:
        raise HTTPException(status_code=404, detail="Employee not found")
    return employee

@app.post("/api/employees", response_model=Employee)
def create_employee(employee: EmployeeCreate, db: Session = Depends(get_db)):
    """社員作成"""
    db_employee = models.Employee(**employee.model_dump())
    db.add(db_employee)
    db.commit()
    db.refresh(db_employee)
    return db_employee

# ============ 社員更新API（新規追加） ============
@app.put("/api/employees/{employee_id}", response_model=Employee)
def update_employee(employee_id: int, employee_update: EmployeeUpdate, db: Session = Depends(get_db)):
    """社員情報更新"""
    db_employee = db.query(models.Employee).filter(models.Employee.employee_id == employee_id).first()
    if not db_employee:
        raise HTTPException(status_code=404, detail="Employee not found")
    
    # メールアドレスの重複チェック
    if employee_update.email and employee_update.email != db_employee.email:
        existing_email = db.query(models.Employee).filter(
            models.Employee.email == employee_update.email,
            models.Employee.employee_id != employee_id
        ).first()
        if existing_email:
            raise HTTPException(status_code=400, detail="Email already exists")
    
    # 更新処理
    for field, value in employee_update.model_dump(exclude_unset=True).items():
        setattr(db_employee, field, value)
    
    db.commit()
    db.refresh(db_employee)
    return db_employee

# ============ Project API ============
@app.get("/api/projects", response_model=List[Project])
def get_projects(db: Session = Depends(get_db)):
    """プロジェクト一覧取得"""
    return db.query(models.Project).all()

@app.get("/api/projects/{project_id}", response_model=Project)
def get_project(project_id: int, db: Session = Depends(get_db)):
    """プロジェクト詳細取得"""
    project = db.query(models.Project).filter(models.Project.project_id == project_id).first()
    if not project:
        raise HTTPException(status_code=404, detail="Project not found")
    return project

@app.post("/api/projects", response_model=Project)
def create_project(project: ProjectCreate, db: Session = Depends(get_db)):
    """プロジェクト作成"""
    db_project = models.Project(**project.model_dump())
    db.add(db_project)
    db.commit()
    db.refresh(db_project)
    return db_project

@app.put("/api/projects/{project_id}", response_model=Project)
def update_project(project_id: int, project_update: ProjectUpdate, db: Session = Depends(get_db)):
    """プロジェクト更新"""
    db_project = db.query(models.Project).filter(models.Project.project_id == project_id).first()
    if not db_project:
        raise HTTPException(status_code=404, detail="Project not found")
    
    for field, value in project_update.model_dump(exclude_unset=True).items():
        setattr(db_project, field, value)
    
    db.commit()
    db.refresh(db_project)
    return db_project

# ============ ProjectPhase API ============ (新規追加)
@app.get("/api/projects/{project_id}/phases", response_model=List[ProjectPhase])
def get_project_phases(project_id: int, db: Session = Depends(get_db)):
    """プロジェクトフェーズ一覧取得"""
    return db.query(models.ProjectPhase).filter(
        models.ProjectPhase.project_id == project_id
    ).order_by(models.ProjectPhase.sort_order).all()

@app.post("/api/project-phases", response_model=ProjectPhase)
def create_project_phase(phase: ProjectPhaseCreate, db: Session = Depends(get_db)):
    """プロジェクトフェーズ作成"""
    db_phase = models.ProjectPhase(**phase.model_dump())
    db.add(db_phase)
    db.commit()
    db.refresh(db_phase)
    return db_phase

@app.put("/api/project-phases/{phase_id}", response_model=ProjectPhase)
def update_project_phase(phase_id: int, phase_update: ProjectPhaseUpdate, db: Session = Depends(get_db)):
    """プロジェクトフェーズ更新"""
    db_phase = db.query(models.ProjectPhase).filter(models.ProjectPhase.phase_id == phase_id).first()
    if not db_phase:
        raise HTTPException(status_code=404, detail="Phase not found")
    
    for field, value in phase_update.model_dump(exclude_unset=True).items():
        setattr(db_phase, field, value)
    
    db.commit()
    db.refresh(db_phase)
    return db_phase

@app.delete("/api/project-phases/{phase_id}")
def delete_project_phase(phase_id: int, db: Session = Depends(get_db)):
    """プロジェクトフェーズ削除"""
    db_phase = db.query(models.ProjectPhase).filter(models.ProjectPhase.phase_id == phase_id).first()
    if not db_phase:
        raise HTTPException(status_code=404, detail="Phase not found")
    
    # 関連タスクのphase_idをNULLに設定
    db.query(models.Task).filter(models.Task.phase_id == phase_id).update({"phase_id": None})
    
    db.delete(db_phase)
    db.commit()
    return {"message": "Phase deleted"}

# ============ Project Member API ============
@app.get("/api/projects/{project_id}/members", response_model=List[ProjectMember])
def get_project_members(project_id: int, db: Session = Depends(get_db)):
    """プロジェクトメンバー一覧取得"""
    members = db.query(models.ProjectMember).filter(
        models.ProjectMember.project_id == project_id
    ).all()
    
    if not members:
        return []
    
    result = []
    for member in members:
        employee = db.query(models.Employee).filter(
            models.Employee.employee_id == member.employee_id
        ).first()
        
        member_data = ProjectMember(
            project_id=member.project_id,
            employee_id=member.employee_id,
            role_in_project=member.role_in_project,
            allocation_ratio=member.allocation_ratio,
            join_date=member.join_date,
            leave_date=member.leave_date,
            employee=employee
        )
        result.append(member_data)
    
    return result

@app.post("/api/project-members", response_model=ProjectMember)
def add_project_member(member: ProjectMemberCreate, db: Session = Depends(get_db)):
    """プロジェクトメンバー追加"""
    existing = db.query(models.ProjectMember).filter(
        models.ProjectMember.project_id == member.project_id,
        models.ProjectMember.employee_id == member.employee_id
    ).first()
    
    if existing:
        raise HTTPException(status_code=400, detail="Employee is already a member of this project")
    
    member_dict = member.model_dump()
    if not member_dict.get('join_date'):
        from datetime import date
        member_dict['join_date'] = date.today()
    
    db_member = models.ProjectMember(**member_dict)
    db.add(db_member)
    db.commit()
    db.refresh(db_member)
    
    employee = db.query(models.Employee).filter(
        models.Employee.employee_id == db_member.employee_id
    ).first()
    
    return ProjectMember(
        project_id=db_member.project_id,
        employee_id=db_member.employee_id,
        role_in_project=db_member.role_in_project,
        allocation_ratio=db_member.allocation_ratio,
        join_date=db_member.join_date,
        leave_date=db_member.leave_date,
        employee=employee
    )

@app.delete("/api/project-members/{project_id}/{employee_id}")
def remove_project_member(project_id: int, employee_id: int, db: Session = Depends(get_db)):
    """プロジェクトメンバー削除"""
    member = db.query(models.ProjectMember).filter(
        models.ProjectMember.project_id == project_id,
        models.ProjectMember.employee_id == employee_id
    ).first()
    
    if not member:
        raise HTTPException(status_code=404, detail="Project member not found")
    
    db.delete(member)
    db.commit()
    return {"message": "Project member removed"}

@app.put("/api/project-members/{project_id}/{employee_id}", response_model=ProjectMember)
def update_project_member(
    project_id: int, 
    employee_id: int, 
    member_update: ProjectMemberBase, 
    db: Session = Depends(get_db)
):
    """プロジェクトメンバー情報更新"""
    member = db.query(models.ProjectMember).filter(
        models.ProjectMember.project_id == project_id,
        models.ProjectMember.employee_id == employee_id
    ).first()
    
    if not member:
        raise HTTPException(status_code=404, detail="Project member not found")
    
    for field, value in member_update.model_dump(exclude_unset=True).items():
        setattr(member, field, value)
    
    db.commit()
    db.refresh(member)
    
    employee = db.query(models.Employee).filter(
        models.Employee.employee_id == member.employee_id
    ).first()
    
    return ProjectMember(
        project_id=member.project_id,
        employee_id=member.employee_id,
        role_in_project=member.role_in_project,
        allocation_ratio=member.allocation_ratio,
        join_date=member.join_date,
        leave_date=member.leave_date,
        employee=employee
    )

# ============ Task API ============
@app.get("/api/projects/{project_id}/tasks", response_model=List[WBSTask])
def get_project_tasks(project_id: int, db: Session = Depends(get_db)):
    """プロジェクトのタスク一覧取得（WBS用）"""
    tasks = db.query(models.Task).filter(models.Task.project_id == project_id).all()
    
    result = []
    for task in tasks:
        # チェックリスト進捗率計算
        checklists = db.query(models.TaskChecklist).filter(models.TaskChecklist.task_id == task.task_id).all()
        completed_count = sum(1 for c in checklists if c.is_done)
        progress = completed_count / len(checklists) if checklists else 0.0
        
        # 担当者取得
        assignee_rel = db.query(models.TaskAssignee).filter(models.TaskAssignee.task_id == task.task_id).first()
        assignee = assignee_rel.employee if assignee_rel else None
        
        # 依存関係取得
        dependencies = db.query(models.TaskDependency).filter(models.TaskDependency.task_id == task.task_id).all()
        
        # フェーズ情報取得
        phase = db.query(models.ProjectPhase).filter(models.ProjectPhase.phase_id == task.phase_id).first() if task.phase_id else None
        
        wbs_task = WBSTask(
            **{k: v for k, v in task.__dict__.items() if not k.startswith('_')},
            assignee=assignee,
            phase=phase,
            checklist_progress=progress,
            checklist_items=checklists,
            dependencies=dependencies
        )
        result.append(wbs_task)
    
    return result

@app.post("/api/tasks", response_model=Task)
def create_task(task: TaskCreate, db: Session = Depends(get_db)):
    """タスク作成"""
    # プロジェクトメンバーの検証
    if task.assignee_id:
        member = db.query(models.ProjectMember).filter(
            models.ProjectMember.project_id == task.project_id,
            models.ProjectMember.employee_id == task.assignee_id
        ).first()
        if not member:
            raise HTTPException(status_code=400, detail="指定された担当者はこのプロジェクトのメンバーではありません")
    
    task_data = task.model_dump(exclude={'assignee_id'})
    db_task = models.Task(**task_data)
    db.add(db_task)
    db.commit()
    db.refresh(db_task)
    
    # 担当者割当
    if task.assignee_id:
        assignee = models.TaskAssignee(task_id=db_task.task_id, employee_id=task.assignee_id)
        db.add(assignee)
        db.commit()
    
    return db_task

@app.put("/api/tasks/{task_id}", response_model=Task)
def update_task(task_id: int, task_update: TaskUpdate, db: Session = Depends(get_db)):
    """タスク更新（担当者更新処理追加）"""
    db_task = db.query(models.Task).filter(models.Task.task_id == task_id).first()
    if not db_task:
        raise HTTPException(status_code=404, detail="Task not found")
    
    # 担当者更新処理（修正：追加）
    if hasattr(task_update, 'assignee_id') and 'assignee_id' in task_update.model_dump(exclude_unset=True):
        # 既存の担当者割当を削除
        existing_assignee = db.query(models.TaskAssignee).filter(
            models.TaskAssignee.task_id == task_id
        ).first()
        if existing_assignee:
            db.delete(existing_assignee)
        
        # 新しい担当者を割当（assignee_idがNoneでない場合のみ）
        if task_update.assignee_id:
            # プロジェクトメンバーの検証
            member = db.query(models.ProjectMember).filter(
                models.ProjectMember.project_id == db_task.project_id,
                models.ProjectMember.employee_id == task_update.assignee_id
            ).first()
            if not member:
                raise HTTPException(status_code=400, detail="指定された担当者はこのプロジェクトのメンバーではありません")
            
            new_assignee = models.TaskAssignee(
                task_id=task_id, 
                employee_id=task_update.assignee_id
            )
            db.add(new_assignee)
    
    # タスク基本情報の更新（assignee_idは除外）
    update_data = task_update.model_dump(exclude_unset=True)
    if 'assignee_id' in update_data:
        del update_data['assignee_id']
    
    for field, value in update_data.items():
        setattr(db_task, field, value)
    
    db.commit()
    db.refresh(db_task)
    
    # 担当者情報を正しく取得してレスポンスを構築
    assignee_relation = db.query(models.TaskAssignee).filter(
        models.TaskAssignee.task_id == task_id
    ).first()
    
    assignee = None
    if assignee_relation:
        assignee = db.query(models.Employee).filter(
            models.Employee.employee_id == assignee_relation.employee_id
        ).first()
    
    # フェーズ情報取得
    phase = db.query(models.ProjectPhase).filter(
        models.ProjectPhase.phase_id == db_task.phase_id
    ).first() if db_task.phase_id else None
    
    # Taskスキーマに合わせてレスポンスを構築
    task_data = {
        'task_id': db_task.task_id,
        'project_id': db_task.project_id,
        'phase_id': db_task.phase_id,
        'task_name': db_task.task_name,
        'description': db_task.description,
        'estimated_duration': db_task.estimated_duration,
        'start_date': db_task.start_date,
        'end_date': db_task.end_date,
        'earliest_start': db_task.earliest_start,
        'deadline': db_task.deadline,
        'status_code': db_task.status_code,
        'milestone_flag': db_task.milestone_flag,
        'x_position': db_task.x_position,
        'y_position': db_task.y_position,
        'assignee': assignee,
        'phase': phase
    }
    
    return Task(**task_data)

# ============ Task Dependency API ============
@app.post("/api/task-dependencies", response_model=TaskDependency)
def create_dependency(dependency: TaskDependencyCreate, db: Session = Depends(get_db)):
    """タスク依存関係作成"""
    db_dependency = models.TaskDependency(**dependency.model_dump())
    db.add(db_dependency)
    db.commit()
    db.refresh(db_dependency)
    return db_dependency

@app.delete("/api/task-dependencies/{task_id}/{depends_on_id}")
def delete_dependency(task_id: int, depends_on_id: int, db: Session = Depends(get_db)):
    """タスク依存関係削除"""
    dependency = db.query(models.TaskDependency).filter(
        models.TaskDependency.task_id == task_id,
        models.TaskDependency.depends_on_id == depends_on_id
    ).first()
    if not dependency:
        raise HTTPException(status_code=404, detail="Dependency not found")
    
    db.delete(dependency)
    db.commit()
    return {"message": "Dependency deleted"}

# ============ Task Checklist API ============
@app.get("/api/tasks/{task_id}/checklists", response_model=List[TaskChecklist])
def get_task_checklists(task_id: int, db: Session = Depends(get_db)):
    """タスクのチェックリスト取得"""
    return db.query(models.TaskChecklist).filter(
        models.TaskChecklist.task_id == task_id
    ).order_by(models.TaskChecklist.sort_order).all()

@app.post("/api/task-checklists", response_model=TaskChecklist)
def create_checklist(checklist: TaskChecklistCreate, db: Session = Depends(get_db)):
    """チェックリストアイテム作成"""
    db_checklist = models.TaskChecklist(**checklist.model_dump())
    db.add(db_checklist)
    db.commit()
    db.refresh(db_checklist)
    return db_checklist

@app.put("/api/task-checklists/{checklist_id}", response_model=TaskChecklist)
def update_checklist(checklist_id: int, checklist: TaskChecklistUpdate, db: Session = Depends(get_db)):
    """チェックリストアイテム更新"""
    db_checklist = db.query(models.TaskChecklist).filter(
        models.TaskChecklist.checklist_id == checklist_id
    ).first()
    if not db_checklist:
        raise HTTPException(status_code=404, detail="Checklist item not found")
    
    for field, value in checklist.model_dump(exclude_unset=True).items():
        setattr(db_checklist, field, value)
    
    db.commit()
    db.refresh(db_checklist)
    return db_checklist

# ============ Schedule Calculation API ============
@app.post("/api/projects/{project_id}/calculate-schedule", response_model=ScheduleCalculationResult)
def calculate_schedule(project_id: int, db: Session = Depends(get_db)):
    """スケジュール・クリティカルパス自動計算"""
    project = db.query(models.Project).filter(models.Project.project_id == project_id).first()
    if not project:
        raise HTTPException(status_code=404, detail="Project not found")
    
    tasks = db.query(models.Task).filter(models.Task.project_id == project_id).all()
    dependencies = db.query(models.TaskDependency).join(
        models.Task, models.TaskDependency.task_id == models.Task.task_id
    ).filter(models.Task.project_id == project_id).all()
    
    if not tasks:
        return ScheduleCalculationResult(
            tasks=[],
            critical_path=[],
            total_duration=0
        )
    
    # タスク辞書作成
    task_dict = {task.task_id: task for task in tasks}
    
    # プロジェクト開始日を基準日として使用
    if project.start_date:
        project_start_date = project.start_date
    else:
        project_start_date = date.today()
    
    # 営業日計算用のヘルパー関数
    def add_business_days(start_date: date, days: int) -> date:
        """営業日を加算（土日をスキップ）"""
        current_date = start_date
        days_added = 0
        
        while days_added < days:
            current_date += timedelta(days=1)
            if current_date.weekday() < 5:  # 0-4 が月-金
                days_added += 1
                
        return current_date
    
    def get_next_business_day(input_date: date) -> date:
        """翌営業日を取得"""
        next_date = input_date + timedelta(days=1)
        
        while next_date.weekday() >= 5:  # 土曜日(5)または日曜日(6)
            next_date += timedelta(days=1)
            
        return next_date
    
    # 稼働率を考慮した実際の所要日数を計算
    def calculate_actual_duration(task_id: int, estimated_duration: Decimal) -> int:
        """担当者の稼働率を考慮した実際の所要日数を計算"""
        assignee_rel = db.query(models.TaskAssignee).filter(
            models.TaskAssignee.task_id == task_id
        ).first()
        
        if not assignee_rel:
            return max(1, int(float(estimated_duration)))
        
        member = db.query(models.ProjectMember).filter(
            models.ProjectMember.project_id == project_id,
            models.ProjectMember.employee_id == assignee_rel.employee_id
        ).first()
        
        allocation_ratio = float(member.allocation_ratio) if member else 1.0
        actual_duration = float(estimated_duration) / allocation_ratio
        
        return max(1, int(actual_duration))
    
    # トポロジカルソート用のグラフ構築
    in_degree = {task.task_id: 0 for task in tasks}
    adj_list = {task.task_id: [] for task in tasks}
    
    for dep in dependencies:
        adj_list[dep.depends_on_id].append(dep.task_id)
        in_degree[dep.task_id] += 1
    
    # トポロジカルソートでタスクの実行順序を決定
    queue = [task_id for task_id in in_degree if in_degree[task_id] == 0]
    sorted_tasks = []
    
    while queue:
        current_task_id = queue.pop(0)
        sorted_tasks.append(current_task_id)
        
        for next_task_id in adj_list[current_task_id]:
            in_degree[next_task_id] -= 1
            if in_degree[next_task_id] == 0:
                queue.append(next_task_id)
    
    # 循環依存チェック
    if len(sorted_tasks) != len(tasks):
        raise HTTPException(
            status_code=400, 
            detail="Circular dependency detected in tasks"
        )
    
    # Forward Pass（最早開始日・終了日算出）
    for task_id in sorted_tasks:
        task = task_dict[task_id]
        predecessors = [dep for dep in dependencies if dep.task_id == task_id]
        
        if not predecessors:
            candidate_start_dates = [project_start_date]
            
            if task.earliest_start:
                candidate_start_dates.append(task.earliest_start)
            
            task.start_date = max(candidate_start_dates)
        else:
            predecessor_end_dates = []
            for dep in predecessors:
                predecessor_task = task_dict[dep.depends_on_id]
                if predecessor_task.end_date:
                    next_business_day = get_next_business_day(predecessor_task.end_date)
                    predecessor_end_dates.append(next_business_day)
            
            if predecessor_end_dates:
                earliest_start_from_predecessors = max(predecessor_end_dates)
            else:
                earliest_start_from_predecessors = project_start_date
            
            candidate_start_dates = [earliest_start_from_predecessors]
            if task.earliest_start:
                candidate_start_dates.append(task.earliest_start)
            
            task.start_date = max(candidate_start_dates)
                
            if task.start_date < project_start_date:
                task.start_date = project_start_date
        
        # 終了日計算
        estimated_duration = task.estimated_duration or Decimal('1')
        actual_duration_days = calculate_actual_duration(task_id, estimated_duration)
        task.end_date = add_business_days(task.start_date, actual_duration_days - 1)
    
    # クリティカルパス計算
    if tasks:
        final_task = max(tasks, key=lambda t: t.end_date or date.min)
        critical_path = []
        
        def trace_critical_path(task_id: int, visited: set) -> list:
            if task_id in visited:
                return []
            visited.add(task_id)
            
            path = [task_id]
            task = task_dict[task_id]
            
            predecessors = [dep for dep in dependencies if dep.task_id == task_id]
            if predecessors:
                critical_predecessor = None
                max_end_date = date.min
                
                for dep in predecessors:
                    pred_task = task_dict[dep.depends_on_id]
                    if pred_task.end_date and pred_task.end_date > max_end_date:
                        max_end_date = pred_task.end_date
                        critical_predecessor = dep.depends_on_id
                
                if critical_predecessor:
                    preceding_path = trace_critical_path(critical_predecessor, visited)
                    path = preceding_path + path
            
            return path
        
        critical_path = trace_critical_path(final_task.task_id, set())
    else:
        critical_path = []
    
    # DB更新
    for task in tasks:
        db.merge(task)
    db.commit()
    
    # 総期間計算
    if tasks and any(task.start_date and task.end_date for task in tasks):
        project_start = min((task.start_date for task in tasks if task.start_date), default=project_start_date)
        project_end = max((task.end_date for task in tasks if task.end_date), default=project_start_date)
        total_duration = (project_end - project_start).days + 1
    else:
        total_duration = 0
    
    # レスポンス用のTaskオブジェクト構築
    response_tasks = []
    for task in tasks:
        assignee_relation = db.query(models.TaskAssignee).filter(
            models.TaskAssignee.task_id == task.task_id
        ).first()
        
        assignee = None
        if assignee_relation:
            assignee = db.query(models.Employee).filter(
                models.Employee.employee_id == assignee_relation.employee_id
            ).first()
        
        # フェーズ情報取得
        phase = db.query(models.ProjectPhase).filter(
            models.ProjectPhase.phase_id == task.phase_id
        ).first() if task.phase_id else None
        
        task_data = {
            'task_id': task.task_id,
            'project_id': task.project_id,
            'phase_id': task.phase_id,
            'task_name': task.task_name,
            'description': task.description,
            'estimated_duration': task.estimated_duration,
            'start_date': task.start_date,
            'end_date': task.end_date,
            'earliest_start': task.earliest_start,
            'deadline': task.deadline,
            'status_code': task.status_code,
            'milestone_flag': task.milestone_flag,
            'x_position': task.x_position,
            'y_position': task.y_position,
            'assignee': assignee,
            'phase': phase
        }
        
        response_tasks.append(Task(**task_data))
    
    return ScheduleCalculationResult(
        tasks=response_tasks,
        critical_path=critical_path,
        total_duration=total_duration
    )

# ============ Task Dependency API ============
@app.post("/api/task-dependencies", response_model=TaskDependency)
def create_dependency(dependency: TaskDependencyCreate, db: Session = Depends(get_db)):
    """タスク依存関係作成"""
    db_dependency = models.TaskDependency(**dependency.model_dump())
    db.add(db_dependency)
    db.commit()
    db.refresh(db_dependency)
    return db_dependency

@app.delete("/api/task-dependencies/{task_id}/{depends_on_id}")
def delete_dependency(task_id: int, depends_on_id: int, db: Session = Depends(get_db)):
    """タスク依存関係削除"""
    dependency = db.query(models.TaskDependency).filter(
        models.TaskDependency.task_id == task_id,
        models.TaskDependency.depends_on_id == depends_on_id
    ).first()
    if not dependency:
        raise HTTPException(status_code=404, detail="Dependency not found")
    
    db.delete(dependency)
    db.commit()
    return {"message": "Dependency deleted"}

# ============ Task Checklist API ============
@app.get("/api/tasks/{task_id}/checklists", response_model=List[TaskChecklist])
def get_task_checklists(task_id: int, db: Session = Depends(get_db)):
    """タスクのチェックリスト取得"""
    return db.query(models.TaskChecklist).filter(
        models.TaskChecklist.task_id == task_id
    ).order_by(models.TaskChecklist.sort_order).all()

@app.post("/api/task-checklists", response_model=TaskChecklist)
def create_checklist(checklist: TaskChecklistCreate, db: Session = Depends(get_db)):
    """チェックリストアイテム作成"""
    db_checklist = models.TaskChecklist(**checklist.model_dump())
    db.add(db_checklist)
    db.commit()
    db.refresh(db_checklist)
    return db_checklist

@app.put("/api/task-checklists/{checklist_id}", response_model=TaskChecklist)
def update_checklist(checklist_id: int, checklist: TaskChecklistUpdate, db: Session = Depends(get_db)):
    """チェックリストアイテム更新"""
    db_checklist = db.query(models.TaskChecklist).filter(
        models.TaskChecklist.checklist_id == checklist_id
    ).first()
    if not db_checklist:
        raise HTTPException(status_code=404, detail="Checklist item not found")
    
    for field, value in checklist.model_dump(exclude_unset=True).items():
        setattr(db_checklist, field, value)
    
    db.commit()
    db.refresh(db_checklist)
    return db_checklist

# ============ Schedule Calculation API ============
@app.post("/api/projects/{project_id}/calculate-schedule", response_model=ScheduleCalculationResult)
def calculate_schedule(project_id: int, db: Session = Depends(get_db)):
    """スケジュール・クリティカルパス自動計算"""
    project = db.query(models.Project).filter(models.Project.project_id == project_id).first()
    if not project:
        raise HTTPException(status_code=404, detail="Project not found")
    
    tasks = db.query(models.Task).filter(models.Task.project_id == project_id).all()
    dependencies = db.query(models.TaskDependency).join(
        models.Task, models.TaskDependency.task_id == models.Task.task_id
    ).filter(models.Task.project_id == project_id).all()
    
    if not tasks:
        return ScheduleCalculationResult(
            tasks=[],
            critical_path=[],
            total_duration=0
        )
    
    # タスク辞書作成
    task_dict = {task.task_id: task for task in tasks}
    
    # プロジェクト開始日を基準日として使用
    if project.start_date:
        project_start_date = project.start_date
    else:
        project_start_date = date.today()
    
    # 営業日計算用のヘルパー関数
    def add_business_days(start_date: date, days: int) -> date:
        """営業日を加算（土日をスキップ）"""
        current_date = start_date
        days_added = 0
        
        while days_added < days:
            current_date += timedelta(days=1)
            if current_date.weekday() < 5:  # 0-4 が月-金
                days_added += 1
                
        return current_date
    
    def get_next_business_day(input_date: date) -> date:
        """翌営業日を取得"""
        next_date = input_date + timedelta(days=1)
        
        while next_date.weekday() >= 5:  # 土曜日(5)または日曜日(6)
            next_date += timedelta(days=1)
            
        return next_date
    
    # 稼働率を考慮した実際の所要日数を計算
    def calculate_actual_duration(task_id: int, estimated_duration: Decimal) -> int:
        """担当者の稼働率を考慮した実際の所要日数を計算"""
        assignee_rel = db.query(models.TaskAssignee).filter(
            models.TaskAssignee.task_id == task_id
        ).first()
        
        if not assignee_rel:
            return max(1, int(float(estimated_duration)))
        
        member = db.query(models.ProjectMember).filter(
            models.ProjectMember.project_id == project_id,
            models.ProjectMember.employee_id == assignee_rel.employee_id
        ).first()
        
        allocation_ratio = float(member.allocation_ratio) if member else 1.0
        actual_duration = float(estimated_duration) / allocation_ratio
        
        return max(1, int(actual_duration))
    
    # トポロジカルソート用のグラフ構築
    in_degree = {task.task_id: 0 for task in tasks}
    adj_list = {task.task_id: [] for task in tasks}
    
    for dep in dependencies:
        adj_list[dep.depends_on_id].append(dep.task_id)
        in_degree[dep.task_id] += 1
    
    # トポロジカルソートでタスクの実行順序を決定
    queue = [task_id for task_id in in_degree if in_degree[task_id] == 0]
    sorted_tasks = []
    
    while queue:
        current_task_id = queue.pop(0)
        sorted_tasks.append(current_task_id)
        
        for next_task_id in adj_list[current_task_id]:
            in_degree[next_task_id] -= 1
            if in_degree[next_task_id] == 0:
                queue.append(next_task_id)
    
    # 循環依存チェック
    if len(sorted_tasks) != len(tasks):
        raise HTTPException(
            status_code=400, 
            detail="Circular dependency detected in tasks"
        )
    
    # Forward Pass（最早開始日・終了日算出）
    for task_id in sorted_tasks:
        task = task_dict[task_id]
        predecessors = [dep for dep in dependencies if dep.task_id == task_id]
        
        if not predecessors:
            candidate_start_dates = [project_start_date]
            
            if task.earliest_start:
                candidate_start_dates.append(task.earliest_start)
            
            task.start_date = max(candidate_start_dates)
        else:
            predecessor_end_dates = []
            for dep in predecessors:
                predecessor_task = task_dict[dep.depends_on_id]
                if predecessor_task.end_date:
                    next_business_day = get_next_business_day(predecessor_task.end_date)
                    predecessor_end_dates.append(next_business_day)
            
            if predecessor_end_dates:
                earliest_start_from_predecessors = max(predecessor_end_dates)
            else:
                earliest_start_from_predecessors = project_start_date
            
            candidate_start_dates = [earliest_start_from_predecessors]
            if task.earliest_start:
                candidate_start_dates.append(task.earliest_start)
            
            task.start_date = max(candidate_start_dates)
                
            if task.start_date < project_start_date:
                task.start_date = project_start_date
        
        # 終了日計算
        estimated_duration = task.estimated_duration or Decimal('1')
        actual_duration_days = calculate_actual_duration(task_id, estimated_duration)
        task.end_date = add_business_days(task.start_date, actual_duration_days - 1)
    
    # クリティカルパス計算
    if tasks:
        final_task = max(tasks, key=lambda t: t.end_date or date.min)
        critical_path = []
        
        def trace_critical_path(task_id: int, visited: set) -> list:
            if task_id in visited:
                return []
            visited.add(task_id)
            
            path = [task_id]
            task = task_dict[task_id]
            
            predecessors = [dep for dep in dependencies if dep.task_id == task_id]
            if predecessors:
                critical_predecessor = None
                max_end_date = date.min
                
                for dep in predecessors:
                    pred_task = task_dict[dep.depends_on_id]
                    if pred_task.end_date and pred_task.end_date > max_end_date:
                        max_end_date = pred_task.end_date
                        critical_predecessor = dep.depends_on_id
                
                if critical_predecessor:
                    preceding_path = trace_critical_path(critical_predecessor, visited)
                    path = preceding_path + path
            
            return path
        
        critical_path = trace_critical_path(final_task.task_id, set())
    else:
        critical_path = []
    
    # DB更新
    for task in tasks:
        db.merge(task)
    db.commit()
    
    # 総期間計算
    if tasks and any(task.start_date and task.end_date for task in tasks):
        project_start = min((task.start_date for task in tasks if task.start_date), default=project_start_date)
        project_end = max((task.end_date for task in tasks if task.end_date), default=project_start_date)
        total_duration = (project_end - project_start).days + 1
    else:
        total_duration = 0
    
    # レスポンス用のTaskオブジェクト構築
    response_tasks = []
    for task in tasks:
        assignee_relation = db.query(models.TaskAssignee).filter(
            models.TaskAssignee.task_id == task.task_id
        ).first()
        
        assignee = None
        if assignee_relation:
            assignee = db.query(models.Employee).filter(
                models.Employee.employee_id == assignee_relation.employee_id
            ).first()
        
        # フェーズ情報取得
        phase = db.query(models.ProjectPhase).filter(
            models.ProjectPhase.phase_id == task.phase_id
        ).first() if task.phase_id else None
        
        task_data = {
            'task_id': task.task_id,
            'project_id': task.project_id,
            'phase_id': task.phase_id,
            'task_name': task.task_name,
            'description': task.description,
            'estimated_duration': task.estimated_duration,
            'start_date': task.start_date,
            'end_date': task.end_date,
            'earliest_start': task.earliest_start,
            'deadline': task.deadline,
            'status_code': task.status_code,
            'milestone_flag': task.milestone_flag,
            'x_position': task.x_position,
            'y_position': task.y_position,
            'assignee': assignee,
            'phase': phase
        }
        
        response_tasks.append(Task(**task_data))
    
    return ScheduleCalculationResult(
        tasks=response_tasks,
        critical_path=critical_path,
        total_duration=total_duration
    )

# ============ Code Master API ============
@app.get("/api/codes/{code_type}")
def get_codes(code_type: str, db: Session = Depends(get_db)):
    """コードマスタ取得"""
    return db.query(models.CodeMaster).filter(models.CodeMaster.code_type == code_type).all()

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)

================================================================================

FILE: backend/models/database.py
--------------------------------
from sqlalchemy import create_engine, Column, Integer, String, Text, Date, Boolean, ForeignKey, DateTime, Numeric
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
from datetime import datetime, date
import os
from dotenv import load_dotenv

# 環境変数読み込み
load_dotenv()

# データベース接続設定
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://pm_user:pm_password@localhost:5432/project_management")

# デバッグ用：接続情報確認
print(f"Using DATABASE_URL: {DATABASE_URL}")
print(f".env file exists: {os.path.exists('.env')}")
if os.path.exists('.env'):
    with open('.env', 'r') as f:
        print(f".env contents: {f.read().strip()}")
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

def get_db():
    """データベースセッション取得"""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

class Employee(Base):
    """社員マスタ"""
    __tablename__ = "employee"
    
    employee_id = Column(Integer, primary_key=True, index=True)
    employee_name = Column(String(100), nullable=False)
    email = Column(String(255), unique=True, nullable=False)
    daily_work_hours = Column(Numeric(5, 2), default=8.0)  # 1日の稼働時間
    
    # リレーションシップ
    managed_projects = relationship("Project", back_populates="manager", foreign_keys="[Project.manager_id]")
    project_memberships = relationship("ProjectMember", back_populates="employee")
    task_assignments = relationship("TaskAssignee", back_populates="employee")

class CodeMaster(Base):
    """汎用コードマスタ"""
    __tablename__ = "code_master"
    
    id = Column(Integer, primary_key=True, index=True)
    code_type = Column(String(50), nullable=False)
    code_value = Column(String(50), nullable=False, unique=True)
    code_label = Column(String(100), nullable=False)

class Project(Base):
    """プロジェクトマスタ"""
    __tablename__ = "project"
    
    project_id = Column(Integer, primary_key=True, index=True)
    project_name = Column(String(200), nullable=False)
    client_name = Column(String(100))
    manager_id = Column(Integer, ForeignKey("employee.employee_id"))
    budget = Column(Numeric(15, 2))
    start_date = Column(Date)
    end_date = Column(Date)
    status_code = Column(String(50), ForeignKey("code_master.code_value"))
    
    # リレーションシップ
    manager = relationship("Employee", back_populates="managed_projects", foreign_keys=[manager_id])
    members = relationship("ProjectMember", back_populates="project")
    tasks = relationship("Task", back_populates="project")
    phases = relationship("ProjectPhase", back_populates="project")  # 追加

class ProjectMember(Base):
    """プロジェクト参加者中間テーブル"""
    __tablename__ = "project_member"
    
    project_id = Column(Integer, ForeignKey("project.project_id"), primary_key=True)
    employee_id = Column(Integer, ForeignKey("employee.employee_id"), primary_key=True)
    role_in_project = Column(String(100))
    allocation_ratio = Column(Numeric(5, 2), default=1.0)
    join_date = Column(Date)
    leave_date = Column(Date)
    
    # リレーションシップ
    project = relationship("Project", back_populates="members")
    employee = relationship("Employee", back_populates="project_memberships")

class ProjectPhase(Base):
    """プロジェクト大分類（フェーズ）"""
    __tablename__ = "project_phase"
    
    phase_id = Column(Integer, primary_key=True, index=True)
    project_id = Column(Integer, ForeignKey("project.project_id"), nullable=False)
    phase_name = Column(String(100), nullable=False)
    description = Column(Text)
    sort_order = Column(Integer, default=0)
    phase_color = Column(String(7), default="#1976d2")  # 16進数カラーコード
    
    # リレーションシップ
    project = relationship("Project", back_populates="phases")
    tasks = relationship("Task", back_populates="phase")

class Task(Base):
    """タスク（WBSノード）"""
    __tablename__ = "task"
    
    task_id = Column(Integer, primary_key=True, index=True)
    project_id = Column(Integer, ForeignKey("project.project_id"))
    phase_id = Column(Integer, ForeignKey("project_phase.phase_id"))  # 追加
    task_name = Column(String(200), nullable=False)
    description = Column(Text)
    estimated_duration = Column(Numeric(5, 2))
    start_date = Column(Date)
    end_date = Column(Date)
    earliest_start = Column(Date)
    deadline = Column(Date)
    status_code = Column(String(50), ForeignKey("code_master.code_value"))
    milestone_flag = Column(Boolean, default=False)
    
    # PERT図用座標
    x_position = Column(Integer, default=0)
    y_position = Column(Integer, default=0)
    
    # リレーションシップ
    project = relationship("Project", back_populates="tasks")
    phase = relationship("ProjectPhase", back_populates="tasks")  # 追加
    assignee = relationship("TaskAssignee", back_populates="task", uselist=False)
    checklists = relationship("TaskChecklist", back_populates="task")
    dependencies = relationship("TaskDependency", back_populates="task", foreign_keys="[TaskDependency.task_id]")
    dependent_tasks = relationship("TaskDependency", back_populates="depends_on_task", foreign_keys="[TaskDependency.depends_on_id]")

class TaskDependency(Base):
    """タスク間依存関係"""
    __tablename__ = "task_dependency"
    
    task_id = Column(Integer, ForeignKey("task.task_id"), primary_key=True)
    depends_on_id = Column(Integer, ForeignKey("task.task_id"), primary_key=True)
    dependency_type = Column(String(10), default="FS")
    
    # リレーションシップ
    task = relationship("Task", back_populates="dependencies", foreign_keys=[task_id])
    depends_on_task = relationship("Task", back_populates="dependent_tasks", foreign_keys=[depends_on_id])

class TaskAssignee(Base):
    """タスク担当者（1タスク1人制約）"""
    __tablename__ = "task_assignee"
    
    task_id = Column(Integer, ForeignKey("task.task_id"), primary_key=True)
    employee_id = Column(Integer, ForeignKey("employee.employee_id"))
    allocation_ratio = Column(Numeric(5, 2), default=1.0)
    
    # リレーションシップ
    task = relationship("Task", back_populates="assignee")
    employee = relationship("Employee", back_populates="task_assignments")

class TaskChecklist(Base):
    """タスクチェックリスト"""
    __tablename__ = "task_checklist"
    
    checklist_id = Column(Integer, primary_key=True, index=True)
    task_id = Column(Integer, ForeignKey("task.task_id"))
    item_name = Column(String(200), nullable=False)
    is_done = Column(Boolean, default=False)
    sort_order = Column(Integer, default=0)
    
    # リレーションシップ
    task = relationship("Task", back_populates="checklists")

# テーブル作成
def create_tables():
    Base.metadata.create_all(bind=engine)

================================================================================

FILE: backend/models/schemas.py
-------------------------------
from pydantic import BaseModel
from typing import Optional, List
from datetime import date

# Employee schemas
class EmployeeBase(BaseModel):
    employee_name: str
    email: str
    daily_work_hours: Optional[float] = 8.0

class EmployeeCreate(EmployeeBase):
    pass

# 社員更新用スキーマ（新規追加）
class EmployeeUpdate(BaseModel):
    employee_name: Optional[str] = None
    email: Optional[str] = None
    daily_work_hours: Optional[float] = None

class Employee(EmployeeBase):
    employee_id: int
    
    class Config:
        from_attributes = True

# ProjectPhase schemas (新規追加)
class ProjectPhaseBase(BaseModel):
    phase_name: str
    description: Optional[str] = None
    sort_order: Optional[int] = 0
    phase_color: Optional[str] = "#1976d2"

class ProjectPhaseCreate(ProjectPhaseBase):
    project_id: int

class ProjectPhaseUpdate(BaseModel):
    phase_name: Optional[str] = None
    description: Optional[str] = None
    sort_order: Optional[int] = None
    phase_color: Optional[str] = None

class ProjectPhase(ProjectPhaseBase):
    phase_id: int
    project_id: int
    
    class Config:
        from_attributes = True

# Project schemas
class ProjectBase(BaseModel):
    project_name: str
    client_name: Optional[str] = None
    manager_id: Optional[int] = None
    budget: Optional[float] = None
    start_date: Optional[date] = None
    end_date: Optional[date] = None
    status_code: Optional[str] = "ACTIVE"

class ProjectCreate(ProjectBase):
    pass

class ProjectUpdate(BaseModel):
    project_name: Optional[str] = None
    client_name: Optional[str] = None
    manager_id: Optional[int] = None
    budget: Optional[float] = None
    start_date: Optional[date] = None
    end_date: Optional[date] = None
    status_code: Optional[str] = None

class Project(ProjectBase):
    project_id: int
    manager: Optional[Employee] = None
    phases: List[ProjectPhase] = []
    
    class Config:
        from_attributes = True

# Task schemas
class TaskBase(BaseModel):
    task_name: str
    description: Optional[str] = None
    estimated_duration: Optional[float] = 1.0
    earliest_start: Optional[date] = None
    deadline: Optional[date] = None
    status_code: Optional[str] = "NOT_STARTED"
    milestone_flag: Optional[bool] = False
    x_position: Optional[int] = 0
    y_position: Optional[int] = 0

class TaskCreate(TaskBase):
    project_id: int
    phase_id: Optional[int] = None  # 追加
    assignee_id: Optional[int] = None

class TaskUpdate(BaseModel):
    task_name: Optional[str] = None
    description: Optional[str] = None
    estimated_duration: Optional[float] = None
    phase_id: Optional[int] = None  # 追加
    status_code: Optional[str] = None
    x_position: Optional[int] = None
    y_position: Optional[int] = None
    assignee_id: Optional[int] = None  # 修正：担当者更新用に追加

class Task(TaskBase):
    task_id: int
    project_id: int
    phase_id: Optional[int] = None  # 追加
    start_date: Optional[date] = None
    end_date: Optional[date] = None
    assignee: Optional[Employee] = None
    phase: Optional[ProjectPhase] = None  # 追加
    
    class Config:
        from_attributes = True

# Task Dependency schemas
class TaskDependencyBase(BaseModel):
    task_id: int
    depends_on_id: int
    dependency_type: str = "FS"

class TaskDependencyCreate(TaskDependencyBase):
    pass

class TaskDependency(TaskDependencyBase):
    class Config:
        from_attributes = True

# Task Checklist schemas
class TaskChecklistBase(BaseModel):
    item_name: str
    is_done: bool = False
    sort_order: int = 0

class TaskChecklistCreate(TaskChecklistBase):
    task_id: int

class TaskChecklistUpdate(BaseModel):
    item_name: Optional[str] = None
    is_done: Optional[bool] = None
    sort_order: Optional[int] = None

class TaskChecklist(TaskChecklistBase):
    checklist_id: int
    task_id: int
    
    class Config:
        from_attributes = True

# スケジュール計算用レスポンス
class ScheduleCalculationResult(BaseModel):
    tasks: List[Task]
    critical_path: List[int]
    total_duration: int

# WBS表示用拡張タスク
class WBSTask(Task):
    checklist_progress: float = 0.0
    checklist_items: List[TaskChecklist] = []
    dependencies: List[TaskDependency] = []

class ProjectMemberBase(BaseModel):
    role_in_project: Optional[str] = None
    allocation_ratio: Optional[float] = 1.0
    join_date: Optional[date] = None
    leave_date: Optional[date] = None

class ProjectMemberCreate(ProjectMemberBase):
    project_id: int
    employee_id: int

class ProjectMember(ProjectMemberBase):
    project_id: int
    employee_id: int
    employee: Optional[Employee] = None
    
    class Config:
        from_attributes = True

================================================================================

FILE: backend/requirements.txt
------------------------------
fastapi==0.104.1
uvicorn==0.24.0
sqlalchemy==2.0.23
psycopg2-binary==2.9.9
pydantic==2.5.0
python-multipart==0.0.6
python-jose[cryptography]==3.3.0
passlib[bcrypt]==1.7.4
python-dotenv==1.0.0
alembic==1.13.1

================================================================================

FILE: backend/.env
------------------
DATABASE_URL=postgresql://pm_user:pm_password@localhost:5432/project_management


================================================================================

FILE: frontend/src/App.tsx
--------------------------
import React, { useState } from 'react';
import { BrowserRouter as Router, Routes, Route, Link, useLocation } from 'react-router-dom';
import { FaProjectDiagram, FaUsers, FaBars, FaTimes } from 'react-icons/fa';
import ProjectList from './pages/ProjectList';
import ProjectDetail from './pages/ProjectDetail';
import EmployeeList from './pages/EmployeeList';
import EmployeeDetail from './pages/EmployeeDetail';
import './App.css';

function App() {
  return (
    <Router>
      <AppContent />
    </Router>
  );
}

function AppContent() {
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const location = useLocation();

  const navigationItems = [
    { path: '/', label: 'プロジェクト一覧', icon: FaProjectDiagram },
    { path: '/employees', label: '社員一覧', icon: FaUsers },
  ];

  return (
    <div className="app-container">
      {/* サイドバー */}
      <aside className={`sidebar ${sidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>
        <div className="sidebar-header">
          <div className="app-title">
            {sidebarOpen && <span>プロジェクト管理</span>}
          </div>
          <button 
            className="sidebar-toggle"
            onClick={() => setSidebarOpen(!sidebarOpen)}
            aria-label={sidebarOpen ? 'サイドバーを閉じる' : 'サイドバーを開く'}
          >
            {sidebarOpen ? <FaTimes /> : <FaBars />}
          </button>
        </div>
        
        <nav className="sidebar-nav">
          {navigationItems.map((item) => {
            const isActive = location.pathname === item.path || 
              (item.path === '/' && location.pathname.startsWith('/projects'));
            
            return (
              <Link 
                key={item.path}
                to={item.path} 
                className={`nav-item ${isActive ? 'active' : ''}`}
                title={!sidebarOpen ? item.label : ''}
              >
                <span className="nav-icon">
                  <item.icon size={18} />
                </span>
                {sidebarOpen && <span className="nav-label">{item.label}</span>}
              </Link>
            );
          })}
        </nav>
      </aside>

      {/* メインコンテンツ */}
      <main className={`main-content ${sidebarOpen ? 'content-with-sidebar' : 'content-full'}`}>
        <Routes>
          <Route path="/" element={<ProjectList />} />
          <Route path="/projects/:id" element={<ProjectDetail />} />
          <Route path="/employees" element={<EmployeeList />} />
          <Route path="/employees/:id" element={<EmployeeDetail />} />
        </Routes>
      </main>
    </div>
  );
}

export default App;

================================================================================

FILE: frontend/src/index.tsx
----------------------------
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);

root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

================================================================================

FILE: frontend/src/types/index.ts
---------------------------------
// データ型定義
export interface Employee {
  employee_id: number;
  employee_name: string;
  email: string;
  daily_work_hours?: number;
}

export interface ProjectPhase {
  phase_id: number;
  project_id: number;
  phase_name: string;
  description?: string;
  sort_order: number;
  phase_color: string;
}

export interface Project {
  project_id: number;
  project_name: string;
  client_name?: string;
  manager_id?: number;
  manager?: Employee;
  budget?: number;
  start_date?: string;
  end_date?: string;
  status_code?: string;
  phases?: ProjectPhase[];
}

export interface ProjectMember {
  project_id: number;
  employee_id: number;
  employee?: Employee;
  role_in_project?: string;
  allocation_ratio?: number;
  join_date?: string;
  leave_date?: string;
}

export interface Task {
  task_id: number;
  project_id: number;
  phase_id?: number;
  task_name: string;
  description?: string;
  estimated_duration?: number;
  start_date?: string;
  end_date?: string;
  earliest_start?: string;
  deadline?: string;
  status_code?: string;
  milestone_flag?: boolean;
  x_position?: number;
  y_position?: number;
  assignee?: Employee;
  phase?: ProjectPhase;
}

export interface WBSTask extends Task {
  checklist_progress: number;
  checklist_items: TaskChecklist[];
  dependencies: TaskDependency[];
}

export interface TaskDependency {
  task_id: number;
  depends_on_id: number;
  dependency_type: 'FS' | 'SS' | 'FF' | 'SF';
}

export interface TaskChecklist {
  checklist_id: number;
  task_id: number;
  item_name: string;
  is_done: boolean;
  sort_order: number;
}

export interface ScheduleCalculationResult {
  tasks: Task[];
  critical_path: number[];
  total_duration: number;
}

// PERT図ノード用の型
export interface PERTNode {
  id: string;
  type: string;
  position: { x: number; y: number };
  data: {
    task: Task;
    label: string;
  };
}

================================================================================

FILE: frontend/src/utils/api.ts
-------------------------------
import axios from 'axios';
import { Employee, Project, Task, WBSTask, TaskDependency, TaskChecklist, ScheduleCalculationResult, ProjectMember, ProjectPhase } from '../types/index';

const API_BASE_URL = 'http://localhost:8000/api';

const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// ============ Employee API ============
export const employeeAPI = {
  getAll: (): Promise<Employee[]> => 
    api.get('/employees').then(res => res.data),
  
  getById: (id: number): Promise<Employee> => 
    api.get(`/employees/${id}`).then(res => res.data),
  
  create: (employee: Omit<Employee, 'employee_id'>): Promise<Employee> => 
    api.post('/employees', employee).then(res => res.data),

  // 社員更新API（新規追加）
  update: (id: number, employee: Partial<Employee>): Promise<Employee> =>
    api.put(`/employees/${id}`, employee).then(res => res.data),
};

// ============ Project API ============
export const projectAPI = {
  getAll: (): Promise<Project[]> => 
    api.get('/projects').then(res => res.data),
  
  getById: (id: number): Promise<Project> => 
    api.get(`/projects/${id}`).then(res => res.data),
  
  create: (project: Omit<Project, 'project_id'>): Promise<Project> => 
    api.post('/projects', project).then(res => res.data),

  update: (id: number, project: Partial<Project>): Promise<Project> =>
    api.put(`/projects/${id}`, project).then(res => res.data),
};

// ============ ProjectPhase API ============ (新規追加)
export const projectPhaseAPI = {
  getPhases: (projectId: number): Promise<ProjectPhase[]> =>
    api.get(`/projects/${projectId}/phases`).then(res => res.data),
  
  create: (phase: Omit<ProjectPhase, 'phase_id'>): Promise<ProjectPhase> =>
    api.post('/project-phases', phase).then(res => res.data),
  
  update: (id: number, phase: Partial<ProjectPhase>): Promise<ProjectPhase> =>
    api.put(`/project-phases/${id}`, phase).then(res => res.data),
  
  delete: (id: number): Promise<void> =>
    api.delete(`/project-phases/${id}`).then(res => res.data),
};

// ============ Project Member API ============
export const projectMemberAPI = {
  getMembers: (projectId: number): Promise<ProjectMember[]> =>
    api.get(`/projects/${projectId}/members`).then(res => res.data),
  
  addMember: (member: Omit<ProjectMember, 'employee'>): Promise<ProjectMember> =>
    api.post('/project-members', member).then(res => res.data),
  
  removeMember: (projectId: number, employeeId: number): Promise<void> =>
    api.delete(`/project-members/${projectId}/${employeeId}`).then(res => res.data),
  
  updateMember: (projectId: number, employeeId: number, updates: Partial<ProjectMember>): Promise<ProjectMember> =>
    api.put(`/project-members/${projectId}/${employeeId}`, updates).then(res => res.data),
};

// ============ Task API ============
export const taskAPI = {
  getProjectTasks: (projectId: number): Promise<WBSTask[]> => 
    api.get(`/projects/${projectId}/tasks`).then(res => res.data),
  
  create: (task: Omit<Task, 'task_id'> & { assignee_id?: number }): Promise<Task> => 
    api.post('/tasks', task).then(res => res.data),
  
  update: (id: number, task: Partial<Task>): Promise<Task> => 
    api.put(`/tasks/${id}`, task).then(res => res.data),
  
  createDependency: (dependency: TaskDependency): Promise<TaskDependency> => 
    api.post('/task-dependencies', dependency).then(res => res.data),
  
  deleteDependency: (taskId: number, dependsOnId: number): Promise<void> => 
    api.delete(`/task-dependencies/${taskId}/${dependsOnId}`).then(res => res.data),
};

// ============ Checklist API ============
export const checklistAPI = {
  getTaskChecklists: (taskId: number): Promise<TaskChecklist[]> => 
    api.get(`/tasks/${taskId}/checklists`).then(res => res.data),
  
  create: (checklist: Omit<TaskChecklist, 'checklist_id'>): Promise<TaskChecklist> => 
    api.post('/task-checklists', checklist).then(res => res.data),
  
  update: (id: number, checklist: Partial<TaskChecklist>): Promise<TaskChecklist> => 
    api.put(`/task-checklists/${id}`, checklist).then(res => res.data),
};

// ============ Schedule Calculation API ============
export const scheduleAPI = {
  calculateSchedule: (projectId: number): Promise<ScheduleCalculationResult> => 
    api.post(`/projects/${projectId}/calculate-schedule`).then(res => res.data),
};

// ============ Code Master API ============
export const codeAPI = {
  getCodes: (codeType: string): Promise<any[]> => 
    api.get(`/codes/${codeType}`).then(res => res.data),
};

================================================================================

FILE: frontend/src/utils/pdf-utils.ts
-------------------------------------
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { Project, WBSTask, ProjectMember } from '../types/index';

// 日本語フォントの設定
const configureFontsForPDF = (pdf: jsPDF) => {
  try {
    pdf.setFont('helvetica');
    pdf.setFontSize(12);
  } catch (error) {
    console.warn('フォント設定エラー:', error);
  }
};

// WBSガントチャートのPDF出力（タスクバー込み完全版）
export const exportWBSToPDF = async (
  element: HTMLElement,
  options: {
    title?: string;
    project?: Project;
    orientation?: 'portrait' | 'landscape';
    format?: string;
  } = {}
) => {
  try {
    const {
      title = 'WBS Gantt Chart',
      project,
      orientation = 'landscape',
      format = 'a3'
    } = options;

    console.log('PDF出力開始（タスクバー対応版）...');

    // ガントチャートコンテナを取得（elementそのものがdata-pdf-export属性を持つ場合）
    const ganttContainer = element.hasAttribute && element.hasAttribute('data-pdf-export') 
      ? element 
      : element.querySelector('[data-pdf-export="gantt-chart"]') as HTMLElement;
    
    if (!ganttContainer) {
      console.error('ガントチャートコンテナが見つかりません。element:', element);
      throw new Error('ガントチャートコンテナが見つかりません');
    }

    // PDF出力用の複製コンテナを作成
    const pdfContainer = document.createElement('div');
    pdfContainer.style.cssText = `
      position: absolute;
      top: -99999px;
      left: -99999px;
      background: white;
      z-index: -9999;
    `;

    // ガントチャートを深くクローン
    const clonedChart = ganttContainer.cloneNode(true) as HTMLElement;
    
    // クローンのスタイルを調整
    clonedChart.style.cssText = `
      position: relative;
      width: auto;
      height: auto;
      overflow: visible !important;
      display: block;
      background: white;
      border: 1px solid #e0e0e0;
    `;

    // スクロール可能な要素をすべて展開
    const scrollableElements = clonedChart.querySelectorAll('*');
    scrollableElements.forEach(el => {
      const htmlEl = el as HTMLElement;
      if (htmlEl.style) {
        // オーバーフローを表示
        if (htmlEl.style.overflow || htmlEl.style.overflowX || htmlEl.style.overflowY) {
          htmlEl.style.overflow = 'visible';
          htmlEl.style.overflowX = 'visible';
          htmlEl.style.overflowY = 'visible';
        }
        // 高さ制限を解除
        if (htmlEl.style.height && htmlEl.style.height !== 'auto') {
          htmlEl.style.height = 'auto';
        }
        if (htmlEl.style.maxHeight) {
          htmlEl.style.maxHeight = 'none';
        }
        // position: stickyやfixedを解除
        if (htmlEl.style.position === 'sticky' || htmlEl.style.position === 'fixed') {
          htmlEl.style.position = 'relative';
        }
      }
    });

    // タスクバー（絶対配置要素）の処理
    // 右側のボディコンテナを探す
    const bodyContainer = clonedChart.children[2] as HTMLElement; // ボディ部分
    if (bodyContainer) {
      const rightBody = bodyContainer.children[1] as HTMLElement; // 右側スクロール部分
      if (rightBody) {
        // 全体のコンテナサイズを取得
        const timelineContainer = rightBody.querySelector('div > div') as HTMLElement;
        if (timelineContainer) {
          // 元のサイズを保持しつつ、内容を表示
          timelineContainer.style.position = 'relative';
          timelineContainer.style.overflow = 'visible';
          
          // すべての子要素（タスク行）の絶対配置を確保
          const taskRows = timelineContainer.children;
          Array.from(taskRows).forEach((row, index) => {
            const htmlRow = row as HTMLElement;
            // 各行のスタイルを確保
            if (htmlRow.style.position === 'absolute') {
              // 絶対配置のスタイルは維持
              htmlRow.style.position = 'absolute';
            }
            
            // タスクバー（塗りつぶし部分）の確認
            const taskCells = htmlRow.children;
            Array.from(taskCells).forEach(cell => {
              const htmlCell = cell as HTMLElement;
              // 背景色が設定されているセルは維持
              if (htmlCell.style.backgroundColor && 
                  htmlCell.style.backgroundColor !== 'transparent' &&
                  htmlCell.style.backgroundColor !== 'rgba(0, 0, 0, 0)') {
                // タスクバーのスタイルを保持
                htmlCell.style.position = 'absolute';
                htmlCell.style.zIndex = '5';
              }
            });
          });
        }
      }
    }

    pdfContainer.appendChild(clonedChart);
    document.body.appendChild(pdfContainer);

    // レンダリング待機
    await new Promise(resolve => setTimeout(resolve, 1000));

    console.log('キャプチャ開始...');

    // html2canvasでキャプチャ
    const canvas = await html2canvas(clonedChart, {
      scale: 2,
      useCORS: true,
      allowTaint: true,
      backgroundColor: '#ffffff',
      logging: false,
      windowWidth: clonedChart.scrollWidth + 500,
      windowHeight: clonedChart.scrollHeight + 500,
      scrollX: 0,
      scrollY: 0,
      foreignObjectRendering: false,
      // 重要: 絶対配置要素を含める
      onclone: (clonedDoc, element) => {
        // クローンされた要素内の絶対配置要素を確実に表示
        const absoluteElements = element.querySelectorAll('[style*="position: absolute"]');
        absoluteElements.forEach(el => {
          const htmlEl = el as HTMLElement;
          // z-indexを確保
          if (!htmlEl.style.zIndex) {
            htmlEl.style.zIndex = '10';
          }
        });
      }
    });

    console.log(`キャプチャ完了: ${canvas.width}x${canvas.height}px`);

    // 一時要素を削除
    document.body.removeChild(pdfContainer);

    // PDF作成
    const pdf = new jsPDF({
      orientation: orientation,
      unit: 'mm',
      format: format
    });

    // 日本語フォント設定
    configureFontsForPDF(pdf);

    // ページサイズ取得
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();

    // タイトルとプロジェクト情報を追加
    pdf.setFontSize(16);
    pdf.text(title, 20, 20);
    
    if (project) {
      pdf.setFontSize(10);
      let yPos = 30;
      if (project.client_name) {
        pdf.text(`Client: ${project.client_name}`, 20, yPos);
        yPos += 5;
      }
      if (project.start_date && project.end_date) {
        pdf.text(`Period: ${project.start_date} - ${project.end_date}`, 20, yPos);
        yPos += 5;
      }
    }

    // キャンバスの画像をPDFに追加
    const imgWidth = pageWidth - 40; // 左右20mmずつの余白
    const imgHeight = (canvas.height * imgWidth) / canvas.width;

    let yPosition = 45; // ヘッダー下の位置
    const maxHeightPerPage = pageHeight - 60; // 上下の余白を考慮

    if (imgHeight <= maxHeightPerPage) {
      // 1ページに収まる場合
      pdf.addImage(
        canvas.toDataURL('image/png'),
        'PNG',
        20,
        yPosition,
        imgWidth,
        imgHeight
      );
    } else {
      // 複数ページに分割する場合
      let remainingHeight = imgHeight;
      let currentY = 0;
      let pageNumber = 1;

      while (remainingHeight > 0) {
        if (pageNumber > 1) {
          pdf.addPage();
          yPosition = 20;
        }

        const currentPageHeight = Math.min(remainingHeight, maxHeightPerPage);
        
        // 部分的なキャンバスを作成
        const tempCanvas = document.createElement('canvas');
        const tempCtx = tempCanvas.getContext('2d')!;
        
        // ソース画像の部分を計算
        const sourceY = (currentY * canvas.height) / imgHeight;
        const sourceHeight = (currentPageHeight * canvas.height) / imgHeight;
        
        tempCanvas.width = canvas.width;
        tempCanvas.height = sourceHeight;
        
        tempCtx.drawImage(
          canvas,
          0, sourceY,
          canvas.width, sourceHeight,
          0, 0,
          canvas.width, sourceHeight
        );
        
        pdf.addImage(
          tempCanvas.toDataURL('image/png'),
          'PNG',
          20,
          yPosition,
          imgWidth,
          currentPageHeight
        );
        
        currentY += currentPageHeight;
        remainingHeight -= currentPageHeight;
        pageNumber++;
      }
    }

    // フッターを各ページに追加
    const getTotalPages = (): number => {
      const pdfAny = pdf as any;
      if (pdfAny.internal && pdfAny.internal.pages) {
        // jsPDF v2.x のページ数取得方法
        return Object.keys(pdfAny.internal.pages).length - 1;
      } else if (typeof pdfAny.getNumberOfPages === 'function') {
        // 古いバージョンの場合
        return pdfAny.getNumberOfPages();
      }
      return 1;
    };
    
    const totalPages = getTotalPages();
    for (let i = 1; i <= totalPages; i++) {
      pdf.setPage(i);
      pdf.setFontSize(8);
      const footerText = `Generated: ${new Date().toLocaleString('ja-JP')} - Page ${i} of ${totalPages}`;
      pdf.text(footerText, 20, pageHeight - 10);
    }

    // PDFダウンロード
    const fileName = project 
      ? `${project.project_name.replace(/[^\w\s-]/g, '')}_WBS_${new Date().toISOString().split('T')[0]}.pdf`
      : `WBS_Gantt_${new Date().toISOString().split('T')[0]}.pdf`;
      
    pdf.save(fileName);

    console.log('PDF出力完了:', fileName);

  } catch (error) {
    console.error('PDF出力エラー:', error);
    throw new Error(`PDF出力に失敗しました: ${error instanceof Error ? error.message : String(error)}`);
  }
};

// 文字エンコーディング対応のヘルパー関数
export const encodeTextForPDF = (text: string): string => {
  return text.replace(/[^\x20-\x7E]/g, (char) => {
    return char;
  });
};

================================================================================

FILE: frontend/src/App.css
--------------------------
/* ベーススタイル */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #f5f5f5;
}

/* PDF出力最適化スタイル（重要: PDFキャプチャ用） */
@media print {
  .excel-wbs-view {
    background: white !important;
    margin: 0 !important;
    padding: 0 !important;
    border: none !important;
    border-radius: 0 !important;
    box-shadow: none !important;
  }
  
  .gantt-table-container {
    overflow: visible !important;
    height: auto !important;
  }
  
  .gantt-header, .gantt-body {
    overflow: visible !important;
  }

  /* PDF出力時の色塗りを確実に表示 */
  div[style*="background-color"],
  div[style*="backgroundColor"] {
    -webkit-print-color-adjust: exact !important;
    color-adjust: exact !important;
    print-color-adjust: exact !important;
  }
}

/* PDF出力用の特別なスタイル */
.pdf-export-mode {
  overflow: visible !important;
  height: auto !important;
  max-height: none !important;
}

.pdf-export-mode .gantt-table-container {
  overflow: visible !important;
  height: auto !important;
  max-height: none !important;
  border: 1px solid #ddd;
}

.pdf-export-mode .gantt-header,
.pdf-export-mode .gantt-body,
.pdf-export-mode .gantt-left-columns,
.pdf-export-mode .gantt-timeline {
  overflow: visible !important;
  height: auto !important;
  max-height: none !important;
}

.pdf-export-mode .gantt-left-columns {
  position: static !important;
  z-index: auto !important;
  box-shadow: none !important;
}

.pdf-export-mode .gantt-header {
  position: static !important;
  z-index: auto !important;
}

/* PDF出力時の背景色を強制表示 */
.pdf-export-mode div[style*="background"],
.pdf-export-mode div[style*="backgroundColor"] {
  -webkit-print-color-adjust: exact !important;
  color-adjust: exact !important;
  print-color-adjust: exact !important;
}

/* フォントの明確化（PDF用） */
.pdf-export-mode,
.pdf-export-mode * {
  font-family: Arial, sans-serif !important;
  -webkit-font-smoothing: antialiased !important;
  -moz-osx-font-smoothing: grayscale !important;
}

/* アプリケーション全体レイアウト */
.app-container {
  display: flex;
  min-height: 100vh;
}

/* サイドバー */
.sidebar {
  background-color: #1976d2;
  color: white;
  transition: width 0.3s ease;
  display: flex;
  flex-direction: column;
  position: fixed;
  left: 0;
  top: 0;
  bottom: 0;
  z-index: 1000;
  box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
}

.sidebar-open {
  width: 250px;
}

.sidebar-closed {
  width: 65px;
}

.sidebar-header {
  padding: 1rem;
  border-bottom: 1px solid rgba(255, 255, 255, 0.2);
  display: flex;
  align-items: center;
  justify-content: space-between;
  min-height: 70px;
}

.app-title {
  font-size: 1.2rem;
  font-weight: 600;
  white-space: nowrap;
  overflow: hidden;
}

.sidebar-toggle {
  background: none;
  border: none;
  color: white;
  font-size: 1.2rem;
  cursor: pointer;
  padding: 0.5rem;
  border-radius: 4px;
  transition: background-color 0.2s;
  width: 36px;
  height: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.sidebar-toggle:hover {
  background-color: rgba(255, 255, 255, 0.1);
}

.sidebar-nav {
  flex: 1;
  padding: 1rem 0;
}

.nav-item {
  display: flex;
  align-items: center;
  padding: 0.75rem 1rem;
  color: rgba(255, 255, 255, 0.8);
  text-decoration: none;
  transition: all 0.2s;
  border-radius: 0;
  margin: 0 0.5rem;
  border-radius: 6px;
}

.nav-item:hover {
  background-color: rgba(255, 255, 255, 0.1);
  color: white;
}

.nav-item.active {
  background-color: rgba(255, 255, 255, 0.15);
  color: white;
  font-weight: 600;
}

.nav-icon {
  font-size: 1.2rem;
  width: 24px;
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.nav-label {
  margin-left: 0.75rem;
  white-space: nowrap;
  overflow: hidden;
}

.sidebar-closed .nav-label {
  opacity: 0;
}

/* メインコンテンツ */
.main-content {
  flex: 1;
  transition: margin-left 0.3s ease;
  padding: 1rem 1rem 1rem 1.5rem;
  overflow-x: auto;
}

.content-with-sidebar {
  margin-left: 250px;
}

.content-full {
  margin-left: 60px;
}

/* ページヘッダー */
.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.page-header h2 {
  color: #333;
  font-size: 2rem;
}

/* ボタンスタイル */
.btn {
  padding: 0.5rem 1rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.9rem;
  transition: all 0.2s;
  text-decoration: none;
  display: inline-block;
  text-align: center;
}

.btn-primary {
  background-color: #1976d2;
  color: white;
}

.btn-primary:hover {
  background-color: #1565c0;
}

.btn-secondary {
  background-color: #757575;
  color: white;
}

.btn-secondary:hover {
  background-color: #616161;
}

.btn-thirdry {
  color: #616161;
}

.btn-thirdry:hover {
  color: #1565c0;
}

.btn-danger {
  background-color: #d32f2f;
  color: white;
}

.btn-danger:hover {
  background-color: #c62828;
}

.btn-small {
  padding: 0.25rem 0.5rem;
  font-size: 0.8rem;
}

/* モーダル */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modal {
  background: white;
  border-radius: 8px;
  padding: 2rem;
  max-width: 600px;
  width: 90%;
  max-height: 90vh;
  overflow-y: auto;
}

.modal h3 {
  margin-bottom: 1.5rem;
  color: #333;
  border-bottom: 2px solid #e0e0e0;
  padding-bottom: 0.5rem;
}

/* フォーム */
.form-row {
  display: flex;
  gap: 1rem;
  margin-bottom: 1rem;
}

.form-group {
  margin-bottom: 1rem;
  flex: 1;
}

.form-group label {
  display: block;
  margin-bottom: 0.25rem;
  font-weight: 500;
  color: #333;
}

.form-group input,
.form-group select,
.form-group textarea {
  width: 100%;
  padding: 0.5rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 0.9rem;
}

.form-group textarea {
  min-height: 80px;
  resize: vertical;
}

.form-actions {
  display: flex;
  gap: 0.5rem;
  justify-content: flex-end;
  margin-top: 1.5rem;
  padding-top: 1rem;
  border-top: 1px solid #e0e0e0;
}

/* メンバー選択エリア */
.member-selection {
  max-height: 200px;
  overflow-y: auto;
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 0.5rem;
  background: white;
}

.member-item {
  display: flex;
  align-items: flex-start;
  gap: 0.5rem;
  padding: 0.5rem 0;
  border-bottom: 1px solid #f0f0f0;
}

.member-item:last-child {
  border-bottom: none;
}

.member-checkbox {
  margin-top: 0.25rem;
}

.member-info {
  flex: 1;
  min-width: 0;
}

.member-name {
  font-weight: 500;
  margin-bottom: 0.25rem;
}

.member-controls {
  display: flex;
  gap: 0.5rem;
  align-items: center;
  margin-top: 0.25rem;
}

.member-controls input,
.member-controls select {
  padding: 0.25rem;
  font-size: 0.8rem;
  border: 1px solid #ddd;
  border-radius: 3px;
}

.member-controls .role-input {
  width: 120px;
}

.member-controls .allocation-input {
  width: 80px;
}

.checkbox-label {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  cursor: pointer;
  padding: 0.25rem 0;
}

.checkbox-label input[type="checkbox"] {
  width: auto;
  margin: 0;
}

.checkbox-label .completed {
  text-decoration: line-through;
  color: #666;
}

/* テーブル（共通） */
table {
  width: 100%;
  border-collapse: collapse;
  background: white;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

th, td {
  padding: 1rem;
  text-align: left;
  border-bottom: 1px solid #eee;
}

th {
  background-color: #f8f9fa;
  font-weight: 600;
  color: #333;
}

tr:hover {
  background-color: #f8f9fa;
}

/* ステータス表示 */
.status {
  padding: 0.25rem 0.5rem;
  border-radius: 12px;
  font-size: 0.8rem;
  font-weight: 500;
  text-transform: uppercase;
}

.status.active {
  background-color: #e8f5e8;
  color: #2e7d32;
}

.status.inactive {
  background-color: #ffebee;
  color: #c62828;
}

.status.not_started {
  background-color: #f5f5f5;
  color: #666;
}

.status.in_progress {
  background-color: #fff3e0;
  color: #f57c00;
}

.status.completed {
  background-color: #e8f5e8;
  color: #2e7d32;
}

/* 読み込み・エラー状態 */
.loading, .error, .empty-state {
  text-align: center;
  padding: 3rem;
  color: #666;
}

.error {
  color: #d32f2f;
}

/* プロジェクト詳細タブ */
.project-info-tab {
  background: white;
  border-radius: 8px;
  padding: 1.5rem;
}

.info-section h3 {
  margin-bottom: 1.5rem;
  color: #1976d2;
  border-bottom: 2px solid #e0e0e0;
  padding-bottom: 0.5rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

/* === 基本情報の"テーブル風UI"専用スタイル === */
.info-table {
  background: white;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0,0,0,0.08);
  border: 1px solid #e0e0e0;
}

.info-table table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
  background: white;
  box-shadow: none;
  border-radius: 0;
}

.info-table tr:nth-child(even) td {
  background: #fcfcfc;
}

.info-table th {
  width: 220px;
  background: #f8f9fa;
  color: #333;
  font-weight: 600;
  border-right: 1px solid #eee;
  white-space: nowrap;
}

.info-table td {
  color: #555;
}

.info-table .value-mono {
  font-variant-numeric: tabular-nums;
  color: #444;
}

.info-table .inline-badge {
  display: inline-flex;
  align-items: center;
  gap: 0.4rem;
}

.info-table .inline-badge small {
  color: #777;
  font-weight: 400;
}

/* 旧レイアウトのgridは残しても実害なしだが未使用 */
.info-grid { display: none; }

/* メンバー管理 */
.members-tab {
  background: white;
  border-radius: 8px;
  padding: 1.5rem;
}

.members-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  border-bottom: 2px solid #e0e0e0;
  padding-bottom: 1rem;
}

.members-header h3 {
  color: #1976d2;
  margin: 0;
}

.members-table {
  margin-top: 1rem;
}

/* WBSビュー */
.wbs-view {
  background: white;
  border-radius: 0;
  padding: 1.5rem;
  box-shadow: none;
  height: 100%;
  overflow-y: auto;
}

.wbs-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
  border-bottom: 2px solid #e0e0e0;
  padding-bottom: 1rem;
}

.wbs-info {
  color: #666;
  font-size: 0.9rem;
}

.task-item {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  margin-bottom: 1rem;
  overflow: hidden;
}

.task-main {
  padding: 1rem;
  background: white;
}

.task-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 0.5rem;
}

.task-name {
  font-size: 1.1rem;
  color: #1976d2;
  cursor: pointer;
  margin: 0;
}

.task-name:hover {
  text-decoration: underline;
}

.milestone {
  margin-left: 0.5rem;
  font-size: 1.2rem;
}

.task-meta {
  display: flex;
  gap: 1rem;
  align-items: center;
  font-size: 0.9rem;
  color: #666;
}

.task-schedule {
  font-size: 0.9rem;
  color: #666;
}

.status-select {
  padding: 0.25rem 0.5rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 0.8rem;
}

/* 進捗バー */
.progress-container {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin-top: 0.5rem;
}

.progress-bar {
  flex: 1;
  height: 8px;
  background-color: #e0e0e0;
  border-radius: 4px;
  overflow: hidden;
}

.progress-fill {
  height: 100%;
  transition: width 0.3s ease;
}

.progress-text {
  font-size: 0.8rem;
  color: #666;
  min-width: 40px;
}

/* チェックリスト */
.checklist-container {
  background: #f8f9fa;
  padding: 1rem;
  margin-left: 2rem;
  border-left: 3px solid #1976d2;
}

.checklist-items {
  margin: 1rem 0;
}

.checklist-item {
  margin-bottom: 0.5rem;
}

.add-checklist-form {
  display: flex;
  gap: 0.5rem;
  margin-top: 1rem;
}

.add-checklist-form input {
  flex: 1;
}

/* PERT図の追加スタイル */

/* PERT図全体 */
.pert-chart {
  background: white;
  border-radius: 8px;
  padding: 1.5rem;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.pert-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
  flex-wrap: wrap;
  gap: 1rem;
}

.pert-header h3 {
  margin: 0;
  color: #1976d2;
}

/* PERTアクション（タスク追加ボタン） */
.pert-actions {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

/* コントロールパネル */
.pert-controls {
  display: flex;
  align-items: center;
  gap: 1rem;
  flex-wrap: wrap;
}

.dependency-type-selector {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.dependency-type-selector label {
  font-size: 0.9rem;
  color: #333;
  font-weight: 500;
}

.dependency-type-selector select {
  padding: 0.25rem 0.5rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 0.9rem;
  background: white;
}

/* 凡例 */
.pert-legend {
  display: flex;
  gap: 1rem;
  align-items: center;
  flex-wrap: wrap;
}

.legend-item {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.9rem;
  color: #333;
}

.legend-color {
  width: 12px;
  height: 12px;
  border-radius: 2px;
  border: 1px solid rgba(0, 0, 0, 0.1);
}

.legend-info {
  margin-left: 1rem;
  color: #666;
}

.legend-info small {
  font-size: 0.8rem;
}

/* PERT図コンテナ */
.pert-container {
  height: 600px;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  position: relative;
  background: #fafafa;
}

/* タスクノードスタイル */
.task-node {
  background: white;
  border: 2px solid #1976d2;
  border-radius: 8px;
  padding: 0.75rem;
  min-width: 220px;
  max-width: 250px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  font-size: 0.8rem;
  cursor: pointer;
  transition: all 0.2s ease;
}

.task-node:hover {
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  transform: translateY(-1px);
}

.task-node-header {
  font-weight: 600;
  margin-bottom: 0.5rem;
  color: #333;
  font-size: 0.9rem;
  border-bottom: 1px solid #e0e0e0;
  padding-bottom: 0.25rem;
}

.task-node-body div {
  margin-bottom: 0.25rem;
  color: #666;
  font-size: 0.75rem;
}

.task-node .milestone {
  margin-left: 0.5rem;
  font-size: 1rem;
}

/* React Flow ハンドルカスタマイズ（改良版） */
.react-flow__node {
  cursor: grab;
}

.react-flow__node.dragging {
  cursor: grabbing;
}

.react-flow__handle {
  width: 14px !important;
  height: 14px !important;
  background: #1976d2 !important;
  border: 2px solid white !important;
  border-radius: 50% !important;
  cursor: crosshair !important;
  transition: all 0.2s ease !important;
  opacity: 1 !important;
  z-index: 10 !important;
}

.react-flow__handle:hover {
  width: 18px !important;
  height: 18px !important;
  box-shadow: 0 0 0 3px rgba(25, 118, 210, 0.3) !important;
  transform: scale(1.1) !important;
}

.react-flow__handle-connecting {
  background: #ff4444 !important;
  box-shadow: 0 0 0 4px rgba(255, 68, 68, 0.4) !important;
}

/* ハンドルが接続可能な状態の視覚的フィードバック */
.react-flow__handle.react-flow__handle-valid {
  background: #4CAF50 !important;
  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.4) !important;
}

.react-flow__handle.react-flow__handle-invalid {
  background: #f44336 !important;
  box-shadow: 0 0 0 2px rgba(244, 67, 54, 0.4) !important;
}

.react-flow__edge {
  cursor: pointer;
}

.react-flow__edge:hover .react-flow__edge-path {
  stroke-width: 3px !important;
}

.react-flow__edge-label {
  background: rgba(255, 255, 255, 0.9);
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 2px 6px;
  font-size: 0.7rem;
  color: #333;
}

/* コントロールパネル */
.react-flow__controls {
  bottom: 20px !important;
  left: 20px !important;
}

.react-flow__controls-button {
  background: white !important;
  border: 1px solid #ddd !important;
  color: #333 !important;
  font-size: 16px !important;
}

.react-flow__controls-button:hover {
  background: #f5f5f5 !important;
}

/* ミニマップ */
.react-flow__minimap {
  background: white !important;
  border: 1px solid #ddd !important;
  border-radius: 4px !important;
}

/* 使用方法説明 */
.pert-instructions, .wbs-instructions {
  margin-top: 1.5rem;
  padding: 1rem;
  background: #f8f9fa;
  border-radius: 6px;
  border-left: 4px solid #1976d2;
}

.pert-instructions h4, .wbs-instructions h4 {
  margin: 0 0 0.75rem 0;
  color: #1976d2;
  font-size: 1rem;
}

.pert-instructions ul, .wbs-instructions ul {
  margin: 0;
  padding-left: 1.5rem;
}

.pert-instructions li, .wbs-instructions li {
  margin-bottom: 0.5rem;
  font-size: 0.9rem;
  color: #333;
}

.pert-instructions strong, .wbs-instructions strong {
  color: #1976d2;
}

/* タスク詳細パネル */
.task-detail-panel {
  position: fixed;
  right: 0;
  top: 0;
  bottom: 0;
  width: 450px;
  background: white;
  border-left: 1px solid #e0e0e0;
  box-shadow: -2px 0 8px rgba(0, 0, 0, 0.1);
  z-index: 1000;
  overflow-y: auto;
}

.panel-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem;
  border-bottom: 1px solid #e0e0e0;
  background: #f8f9fa;
  position: sticky;
  top: 0;
  z-index: 1001;
}

.panel-header h4 {
  margin: 0;
  color: #1976d2;
}

.btn-close {
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  padding: 0;
  color: #666;
  width: 30px;
  height: 30px;
  border-radius: 5px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.btn-close:hover {
  background: #e0e0e0;
  color: #333;
}

.panel-content {
  padding: 1rem;
}

.task-details .detail-item {
  display: flex;
  margin-bottom: 1rem;
  align-items: flex-start;
}

.task-details .detail-item label {
  font-weight: 600;
  min-width: 100px;
  color: #333;
  margin-right: 0.5rem;
}

.task-details .detail-item span {
  flex: 1;
  color: #666;
}

/* チェックリスト管理セクション */
.checklist-section {
  margin-top: 2rem;
  padding-top: 1rem;
  border-top: 1px solid #e0e0e0;
}

.checklist-section h5 {
  margin: 0 0 1rem 0;
  color: #1976d2;
  font-size: 1rem;
}

/* ドラッグ&ドロップ可能なチェックリスト */
.draggable-checklist {
  margin: 1rem 0;
}

.draggable-item {
  background: white;
  border: 1px solid #e0e0e0;
  border-radius: 4px;
  margin-bottom: 0.5rem;
  padding: 0.75rem;
  cursor: grab;
  transition: all 0.2s ease;
  user-select: none;
}

.draggable-item:hover {
  border-color: #1976d2;
  box-shadow: 0 2px 4px rgba(25, 118, 210, 0.1);
}

.draggable-item:active {
  cursor: grabbing;
  transform: scale(1.02);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.draggable-item.dragging {
  opacity: 0.5;
  transform: rotate(5deg);
}

.draggable-item .checkbox-label {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin: 0;
  padding: 0;
}

.draggable-item .checkbox-label input[type="checkbox"] {
  margin: 0;
  cursor: pointer;
}

.draggable-item .drag-handle {
  color: #999;
  font-size: 1.2rem;
  margin-right: 0.5rem;
  cursor: grab;
}

.draggable-item .drag-handle:hover {
  color: #1976d2;
}

.dependencies-section {
  margin-top: 2rem;
  padding-top: 1rem;
  border-top: 1px solid #e0e0e0;
}

.dependencies-section h5 {
  margin: 0 0 0.75rem 0;
  color: #1976d2;
}

.dependencies-list {
  list-style: none;
  margin: 1rem 0;
  padding: 0;
}

.dependencies-list li {
  background: #f8f9fa;
  padding: 0.5rem;
  margin-bottom: 0.5rem;
  border-radius: 4px;
  font-size: 0.9rem;
  border-left: 3px solid #1976d2;
}

/* プロジェクト詳細画面 */
.project-detail {
  width: 100%;
  height: 100%;
  padding: 0;
}

/* プロジェクトヘッダー */
.project-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 0;
  padding: 1.5rem;
  border-bottom: 2px solid #e0e0e0;
  background: white;
}

.project-header h2 {
  margin: 0;
  color: #1976d2;
  font-size: 1.6rem;
}

/* タブコンテナ */
.tab-container {
  background: white;
  border-radius: 0;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  overflow: hidden;
  height: calc(100vh - 120px); /* ヘッダー高さを考慮 */
  display: flex;
  flex-direction: column;
}

/* タブヘッダー */
.tabs {
  display: flex;
  background: #f8f9fa;
  border-bottom: 1px solid #e0e0e0;
  overflow-x: auto; /* モバイル対応のスクロール */
}

.tab {
  flex: 1;
  min-width: 140px;
  padding: 1rem 1.5rem;
  background: none;
  border: none;
  cursor: pointer;
  font-size: 0.95rem;
  font-weight: 500;
  color: #666;
  border-bottom: 3px solid transparent;
  transition: all 0.3s ease;
  white-space: nowrap;
  position: relative;
}

.tab:hover {
  background: rgba(25, 118, 210, 0.05);
  color: #1976d2;
}

.tab.active {
  background: white;
  color: #1976d2;
  border-bottom-color: #1976d2;
  font-weight: 600;
}

.tab.active::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 3px;
  background: #1976d2;
}

/* タブコンテンツ */
.tab-content {
  flex: 1;
  background: white;
  overflow-y: auto;
}

/* タブアニメーション効果 */
.tab-content > div {
  animation: fadeIn 0.3s ease-in-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* プロジェクト情報タブの改良 */
.project-info-tab {
  padding: 1.5rem;
  height: 100%;
  overflow-y: auto;
}

.project-info-tab .info-section {
  margin-bottom: 2.5rem;
}

.project-info-tab .info-section:last-child {
  margin-bottom: 0;
}

.project-info-tab .info-section h3 {
  margin-bottom: 1.5rem;
  color: #1976d2;
  font-size: 1.3rem;
  border-bottom: 2px solid #e0e0e0;
  padding-bottom: 0.75rem;
  position: relative;
}

.project-info-tab .info-section h3::after {
  content: '';
  position: absolute;
  bottom: -2px;
  left: 0;
  width: 60px;
  height: 2px;
  background: #1976d2;
}

/* メンバー管理タブの改良 */
.members-tab {
  padding: 1.5rem;
  height: 100%;
  overflow-y: auto;
}

.members-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  padding-bottom: 1rem;
  border-bottom: 2px solid #e0e0e0;
  position: relative;
}

.members-header::after {
  content: '';
  position: absolute;
  bottom: -2px;
  left: 0;
  width: 80px;
  height: 2px;
  background: #1976d2;
}

.members-header h3 {
  margin: 0;
  color: #1976d2;
  font-size: 1.3rem;
}

/* ドラッグ&ドロップ視覚効果 */
.draggable-item.drag-over {
  border-color: #1976d2;
  background-color: #f0f7ff;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(25, 118, 210, 0.2);
}

.draggable-item.being-dragged {
  opacity: 0.6;
  transform: rotate(3deg) scale(1.05);
  z-index: 1000;
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
}

/* チェックリストアイテム完了状態 */
.draggable-item .completed {
  text-decoration: line-through;
  color: #999;
}

.draggable-item input[type="checkbox"]:checked + span {
  opacity: 0.7;
}

/* タスク詳細パネルのスクロール改善 */
.panel-content {
  padding: 1rem;
}

.panel-content .edit-form {
  margin-bottom: 1rem;
}

.panel-content .task-details {
  margin-bottom: 1rem;
}

/* Excel-style WBS Gantt Chart Styles - 縮小版 */
.excel-wbs-view {
  background: white;
  border-radius: 8px;
  padding: 1.5rem;
  height: 100%;
  overflow: hidden;
  display: flex;
  flex-direction: column;
}

.excel-wbs-view .wbs-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
  padding-bottom: 1rem;
  border-bottom: 2px solid #e0e0e0;
}

.excel-wbs-view .wbs-header h3 {
  margin: 0;
  color: #1976d2;
}

/* パネル外クリック時の背景オーバーレイ用スタイル（追加） */
.task-detail-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.1);
  z-index: 999;
  pointer-events: auto;
}

/* タスク詳細パネルのアニメーション改良 */
.task-detail-panel {
  transform: translateX(0) !important;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.task-detail-panel.closing {
  transform: translateX(100%) !important;
}

/* WBSビューのレスポンシブ改良 */
.excel-wbs-view.has-panel {
  padding-right: 0;
}

/* タスク行の選択状態を明確に */
.task-row-selected {
  background-color: #e3f2fd !important;
  border-left: 3px solid #1976d2 !important;
}

/* ガントチャート部分の幅調整時のスムーズなトランジション */
.gantt-table-container {
  transition: width 0.3s ease;
}

/* モバイル対応：パネルが開いている時の調整 */
@media (max-width: 768px) {
  .task-detail-panel {
    width: 100% !important;
  }
  
  .excel-wbs-view.has-panel .gantt-table-container {
    display: none;
  }
}



/* レスポンシブデザイン */
@media (max-width: 1024px) {
  .sidebar-open {
    width: 220px;
  }

  .content-with-sidebar {
    margin-left: 220px;
  }

  .task-detail-panel {
    width: 350px;
  }
}

@media (max-width: 768px) {
  .sidebar {
    position: fixed;
    z-index: 1001;
  }

  .sidebar-open {
    width: 250px;
  }

  .sidebar-closed {
    width: 0;
    overflow: hidden;
  }

  .main-content {
    margin-left: 0 !important;
    padding: 0.5rem;
  }

  .project-detail {
    padding: 0;
  }
  
  .project-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
    padding: 1rem;
  }
  
  .project-header h2 {
    font-size: 1.2rem;
  }

  .tab-container {
    height: calc(100vh - 100px);
  }
  
  .tabs {
    flex-wrap: nowrap;
  }
  
  .tab {
    min-width: 120px;
    padding: 0.75rem 1rem;
    font-size: 0.9rem;
  }
  
  .project-info-tab,
  .members-tab {
    padding: 1rem;
  }
  
  .project-info-tab .info-grid {
    grid-template-columns: 1fr;
  }

  .task-detail-panel {
    width: 100%;
  }

  .modal {
    max-width: 95%;
    margin: 1rem;
  }

  .form-row {
    flex-direction: column;
  }

  .pert-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
  }

  .pert-controls {
    width: 100%;
    justify-content: space-between;
  }

  /* 基本情報テーブルの1列幅調整 */
  .info-table th {
    width: 38%;
  }
}

@media (max-width: 480px) {
  .tabs {
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
  }
  
  .tab {
    min-width: 100px;
    padding: 0.5rem 0.75rem;
    font-size: 0.85rem;
  }
  
  .project-header h2 {
    font-size: 1.2rem;
  }

  .sidebar-header {
    padding: 0.75rem;
  }

  .app-title {
    font-size: 1rem;
  }

  .task-detail-panel {
    width: 100vw;
  }

  /* モバイルでの行間詰め */
  .info-table th, .info-table td {
    padding: 0.75rem;
  }
}

================================================================================

FILE: frontend/package.json
---------------------------
{
  "name": "project-management-frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.11.0",
    "@emotion/styled": "^11.11.0",
    "@types/html2canvas": "^1.0.0",
    "@types/node": "^16.18.0",
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "axios": "^1.6.0",
    "date-fns": "^2.30.0",
    "html2canvas": "^1.4.1",
    "jspdf": "^2.5.2",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-flow-renderer": "^10.3.17",
    "react-icons": "^4.12.0",
    "react-router-dom": "^6.8.0",
    "react-scripts": "5.0.1",
    "typescript": "^4.9.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "proxy": "http://localhost:8000",
  "devDependencies": {
    "@types/jspdf": "^1.3.3"
  }
}

================================================================================

FILE: frontend/tsconfig.json
----------------------------
{
    "compilerOptions": {
      "target": "es5",
      "lib": [
        "dom",
        "dom.iterable",
        "es6"
      ],
      "allowJs": true,
      "skipLibCheck": true,
      "esModuleInterop": true,
      "allowSyntheticDefaultImports": true,
      "strict": true,
      "forceConsistentCasingInFileNames": true,
      "noFallthroughCasesInSwitch": true,
      "module": "esnext",
      "moduleResolution": "node",
      "resolveJsonModule": true,
      "isolatedModules": true,
      "noEmit": true,
      "jsx": "react-jsx"
    },
    "include": [
      "src"
    ]
  }

================================================================================

FILE: frontend/public/index.html
--------------------------------
<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="theme-color" content="#000000" />
  <meta name="description" content="プロジェクト管理システム" />
  <title>プロジェクト管理システム</title>
</head>
<body>
  <noscript>You need to enable JavaScript to run this app.</noscript>
  <div id="root"></div>
</body>
</html>

================================================================================

FILE: frontend/src/pages/ProjectList.tsx
----------------------------------------
import React, { useState, useEffect, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import { FaPlus, FaSearch, FaTimes, FaFilter, FaEraser } from 'react-icons/fa';
import { Project, Employee, ProjectMember } from '../types/index';
import { projectAPI, employeeAPI, projectMemberAPI } from '../utils/api';

interface MemberAllocation {
  employee_id: number;
  role_in_project: string;
  allocation_ratio: number;
}

interface EmployeeWorkload {
  employee_id: number;
  total_allocation: number;
  remaining_capacity: number;
}

const ProjectList: React.FC = () => {
  const navigate = useNavigate();
  const [projects, setProjects] = useState<Project[]>([]);
  const [employees, setEmployees] = useState<Employee[]>([]);
  const [allMembers, setAllMembers] = useState<ProjectMember[]>([]);
  const [loading, setLoading] = useState(true);
  const [showCreateForm, setShowCreateForm] = useState(false);
  
  // フィルター・ページネーション状態
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(10);
  
  const [newProject, setNewProject] = useState<Partial<Project>>({
    project_name: '',
    client_name: '',
    status_code: 'ACTIVE',
    budget: undefined,
    start_date: undefined,
    end_date: undefined
  });
  const [selectedMembers, setSelectedMembers] = useState<number[]>([]);
  const [memberAllocations, setMemberAllocations] = useState<Record<number, MemberAllocation>>({});

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      const [projectsData, employeesData] = await Promise.all([
        projectAPI.getAll(),
        employeeAPI.getAll()
      ]);
      setProjects(projectsData);
      setEmployees(employeesData);
      
      // 全プロジェクトのメンバー情報を取得
      const allMembersData: ProjectMember[] = [];
      for (const project of projectsData) {
        try {
          const members = await projectMemberAPI.getMembers(project.project_id);
          allMembersData.push(...members);
        } catch (error) {
          console.error(`プロジェクト${project.project_id}のメンバー取得エラー:`, error);
        }
      }
      setAllMembers(allMembersData);
    } catch (error) {
      console.error('データ取得エラー:', error);
    } finally {
      setLoading(false);
    }
  };

  // 社員の工数計算（修正版）
  const calculateEmployeeWorkloads = useMemo((): EmployeeWorkload[] => {
    return employees.map(employee => {
      const allocations = allMembers
        .filter(member => member.employee_id === employee.employee_id)
        .map(member => member.allocation_ratio || 0);
      
      const totalAllocation = allocations.reduce((sum, allocation) => sum + allocation, 0);
      const remainingCapacity = Math.max(0, 1.0 - totalAllocation);
      
      return {
        employee_id: employee.employee_id,
        total_allocation: totalAllocation,
        remaining_capacity: remainingCapacity
      };
    });
  }, [employees, allMembers]);

  // フィルタリング・ページネーション（ソート順修正：新しい順→ID順）
  const filteredProjects = useMemo(() => {
    return projects
      .filter(project => {
        const matchesSearch = !searchTerm || 
          project.project_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          (project.client_name && project.client_name.toLowerCase().includes(searchTerm.toLowerCase()));
        
        const matchesStatus = !statusFilter || project.status_code === statusFilter;
        
        return matchesSearch && matchesStatus;
      })
      .sort((a, b) => {
        // 作成日が遅い順（新しい順）→ ID順
        // project_idの降順（新しいプロジェクトが上に）
        return b.project_id - a.project_id;
      });
  }, [projects, searchTerm, statusFilter]);

  const paginatedProjects = useMemo(() => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    return filteredProjects.slice(startIndex, startIndex + itemsPerPage);
  }, [filteredProjects, currentPage, itemsPerPage]);

  const totalPages = Math.ceil(filteredProjects.length / itemsPerPage);

  const handleMemberToggle = (employeeId: number) => {
    if (selectedMembers.includes(employeeId)) {
      // メンバーを削除
      setSelectedMembers(prev => prev.filter(id => id !== employeeId));
      setMemberAllocations(prev => {
        const { [employeeId]: removed, ...rest } = prev;
        return rest;
      });
    } else {
      // メンバーを追加
      setSelectedMembers(prev => [...prev, employeeId]);
      setMemberAllocations(prev => ({
        ...prev,
        [employeeId]: {
          employee_id: employeeId,
          role_in_project: '',
          allocation_ratio: 0.1
        }
      }));
    }
  };

  const handleMemberAllocationChange = (employeeId: number, field: keyof MemberAllocation, value: string | number) => {
    setMemberAllocations(prev => ({
      ...prev,
      [employeeId]: {
        ...prev[employeeId],
        [field]: value
      }
    }));
  };

  const handleCreateProject = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      // バリデーション（開始日・終了日必須化）
      if (!newProject.project_name?.trim()) {
        alert('プロジェクト名は必須です。');
        return;
      }

      if (!newProject.start_date) {
        alert('開始日は必須です。');
        return;
      }

      if (!newProject.end_date) {
        alert('終了日は必須です。');
        return;
      }

      if (newProject.start_date && newProject.end_date) {
        const startDate = new Date(newProject.start_date);
        const endDate = new Date(newProject.end_date);
        if (startDate >= endDate) {
          alert('終了日は開始日より後の日付を指定してください。');
          return;
        }
      }

      // メンバーの工数チェック
      for (const employeeId of selectedMembers) {
        const allocation = memberAllocations[employeeId];
        const workload = calculateEmployeeWorkloads.find(w => w.employee_id === employeeId);
        
        if (workload && allocation.allocation_ratio > workload.remaining_capacity) {
          const employee = employees.find(e => e.employee_id === employeeId);
          alert(`${employee?.employee_name}の残工数（${workload.remaining_capacity.toFixed(1)}）を超える割り当てです。`);
          return;
        }
      }

      // プロジェクト作成
      const projectData = {
        ...newProject,
        budget: newProject.budget || undefined,
        start_date: newProject.start_date,
        end_date: newProject.end_date
      };

      const createdProject = await projectAPI.create(projectData as Omit<Project, 'project_id'>);
      
      // メンバー追加
      for (const employeeId of selectedMembers) {
        const allocation = memberAllocations[employeeId];
        await projectMemberAPI.addMember({
          project_id: createdProject.project_id,
          employee_id: employeeId,
          role_in_project: allocation.role_in_project || '',
          allocation_ratio: allocation.allocation_ratio || 0.1,
          join_date: new Date().toISOString().split('T')[0]
        });
      }
      
      // フォーム初期化
      setNewProject({
        project_name: '',
        client_name: '',
        status_code: 'ACTIVE',
        budget: undefined,
        start_date: undefined,
        end_date: undefined
      });
      setSelectedMembers([]);
      setMemberAllocations({});
      setShowCreateForm(false);
      loadData();
    } catch (error) {
      console.error('プロジェクト作成エラー:', error);
      alert('プロジェクトの作成に失敗しました。');
    }
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('ja-JP', {
      style: 'currency',
      currency: 'JPY'
    }).format(amount);
  };

  const getEmployeeWorkload = (employeeId: number) => {
    return calculateEmployeeWorkloads.find(w => w.employee_id === employeeId);
  };

  // プロジェクト行クリック処理
  const handleProjectRowClick = (projectId: number) => {
    navigate(`/projects/${projectId}`);
  };

  if (loading) return <div className="loading">読み込み中...</div>;

  return (
    <div className="project-list">
      <div className="page-header">
        <h2>プロジェクト一覧</h2>
        <button 
          className="btn btn-primary"
          onClick={() => setShowCreateForm(true)}
          style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}
        >
          <FaPlus />
          新規プロジェクト作成
        </button>
      </div>

      {/* フィルター・検索セクション */}
      <div style={{
        background: 'white',
        padding: '1.5rem',
        borderRadius: '8px',
        marginBottom: '1.5rem',
        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)'
      }}>
        <div style={{ display: 'flex', gap: '1rem', alignItems: 'center', flexWrap: 'wrap' }}>
          <div style={{ flex: 1, minWidth: '200px' }}>
            <label style={{ fontSize: '0.9rem', color: '#666', marginBottom: '0.25rem', display: 'block' }}>
              <FaSearch style={{ marginRight: '0.5rem' }} />
              プロジェクト名・クライアント名で検索
            </label>
            <input
              type="text"
              placeholder="検索キーワードを入力..."
              value={searchTerm}
              onChange={(e) => {
                setSearchTerm(e.target.value);
                setCurrentPage(1); // 検索時は1ページ目に戻る
              }}
              style={{
                width: '100%',
                padding: '0.5rem',
                border: '1px solid #ddd',
                borderRadius: '4px'
              }}
            />
          </div>
          
          <div style={{ minWidth: '150px' }}>
            <label style={{ fontSize: '0.9rem', color: '#666', marginBottom: '0.25rem', display: 'block' }}>
              <FaFilter style={{ marginRight: '0.5rem' }} />
              ステータス
            </label>
            <select
              value={statusFilter}
              onChange={(e) => {
                setStatusFilter(e.target.value);
                setCurrentPage(1); // フィルター変更時は1ページ目に戻る
              }}
              style={{
                width: '100%',
                padding: '0.5rem',
                border: '1px solid #ddd',
                borderRadius: '4px'
              }}
            >
              <option value="">すべて</option>
              <option value="ACTIVE">アクティブ</option>
              <option value="INACTIVE">非アクティブ</option>
            </select>
          </div>
          
          <div style={{ display: 'flex', alignItems: 'flex-end', gap: '0.5rem' }}>
            <button
              onClick={() => {
                setSearchTerm('');
                setStatusFilter('');
                setCurrentPage(1);
              }}
              style={{
                padding: '0.5rem 1rem',
                backgroundColor: '#757575',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                gap: '0.5rem'
              }}
            >
              <FaEraser />
              クリア
            </button>
          </div>
        </div>
      </div>

      {/* 新規プロジェクト作成フォーム（残工数表示修正版） */}
      {showCreateForm && (
        <div className="modal-overlay">
          <div className="modal" style={{ maxWidth: '1200px', width: '95%' }}>
            <h3>新規プロジェクト作成</h3>
            <form onSubmit={handleCreateProject}>
              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '2rem' }}>
                {/* 左側：基本情報 */}
                <div>
                  <h4 style={{ marginBottom: '1rem', color: '#1976d2', borderBottom: '1px solid #e0e0e0', paddingBottom: '0.5rem' }}>
                    基本情報
                  </h4>
                  
                  <div className="form-group">
                    <label>プロジェクト名 *</label>
                    <input
                      type="text"
                      required
                      value={newProject.project_name || ''}
                      onChange={(e) => setNewProject({...newProject, project_name: e.target.value})}
                      placeholder="例: ECサイト構築プロジェクト"
                    />
                  </div>

                  <div style={{ display: "flex" }}>
                    <div className="form-group" style={{ marginRight: "8px" }}>
                      <label>開始日 *</label>
                      <input
                        type="date"
                        required
                        value={newProject.start_date || ''}
                        onChange={(e) => setNewProject({...newProject, start_date: e.target.value || undefined})}
                      />
                    </div>
                    <div className="form-group">
                      <label>終了日 *</label>
                      <input
                        type="date"
                        required
                        value={newProject.end_date || ''}
                        onChange={(e) => setNewProject({...newProject, end_date: e.target.value || undefined})}
                      />
                    </div>
                  </div>

                  <div className="form-group">
                    <label>プロジェクトマネージャー</label>
                    <select
                      value={newProject.manager_id || ''}
                      onChange={(e) => setNewProject({...newProject, manager_id: Number(e.target.value)})}
                    >
                      <option value="">未選択</option>
                      {employees.map(emp => {
                        const workload = getEmployeeWorkload(emp.employee_id);
                        return (
                          <option key={emp.employee_id} value={emp.employee_id}>
                            {emp.employee_name} (残工数: {workload?.remaining_capacity.toFixed(1) || '1.0'})
                          </option>
                        );
                      })}
                    </select>
                  </div>

                  <div className="form-group">
                    <label>クライアント名</label>
                    <input
                      type="text"
                      value={newProject.client_name || ''}
                      onChange={(e) => setNewProject({...newProject, client_name: e.target.value})}
                      placeholder="例: 株式会社サンプル"
                    />
                  </div>

                  <div className="form-group">
                    <label>予算（円）</label>
                    <input
                      type="number"
                      min="0"
                      value={newProject.budget || ''}
                      onChange={(e) => setNewProject({...newProject, budget: e.target.value ? Number(e.target.value) : undefined})}
                      placeholder="5000000"
                    />
                  </div>

                  <div className="form-group">
                    <label>ステータス</label>
                    <select
                      value={newProject.status_code || 'ACTIVE'}
                      onChange={(e) => setNewProject({...newProject, status_code: e.target.value})}
                    >
                      <option value="ACTIVE">アクティブ</option>
                      <option value="INACTIVE">非アクティブ</option>
                    </select>
                  </div>
                </div>

                {/* 右側：プロジェクトメンバー（残工数表示修正版） */}
                <div>
                  <h4 style={{ marginBottom: '1rem', color: '#1976d2', borderBottom: '1px solid #e0e0e0', paddingBottom: '0.5rem' }}>
                    プロジェクトメンバー
                  </h4>
                  
                  <div style={{
                    height: '540px',
                    overflowY: 'auto',
                    border: '1px solid #ddd',
                    borderRadius: '4px',
                    padding: '1rem',
                    backgroundColor: '#fafafa'
                  }}>
                    {employees.map(emp => {
                      const isSelected = selectedMembers.includes(emp.employee_id);
                      const allocation = memberAllocations[emp.employee_id];
                      const workload = getEmployeeWorkload(emp.employee_id); // 修正：正しい関数を使用
                      const remainingCapacity = workload?.remaining_capacity || 1.0;
                      
                      return (
                        <div key={emp.employee_id} style={{
                          backgroundColor: 'white',
                          border: '1px solid #e0e0e0',
                          borderRadius: '6px',
                          padding: '1rem',
                          marginBottom: '1rem',
                          boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)'
                        }}>
                          {/* 社員情報ヘッダー */}
                          <div style={{
                            display: 'flex',
                            alignItems: 'center',
                            gap: '0.75rem',
                            marginBottom: isSelected ? '1rem' : '0'
                          }}>
                            <input
                              type="checkbox"
                              checked={isSelected}
                              onChange={() => handleMemberToggle(emp.employee_id)}
                              style={{
                                width: '20px',
                                transform: 'scale(1.2)',
                                accentColor: '#1976d2'
                              }}
                            />
                            <div style={{ flex: 1 }}>
                              <div style={{
                                fontWeight: 600,
                                fontSize: '1rem',
                                color: '#333',
                                marginBottom: '0.25rem'
                              }}>
                                {emp.employee_name}
                              </div>
                              <div style={{
                                fontSize: '0.8rem',
                                color: remainingCapacity <= 0.1 ? '#d32f2f' : remainingCapacity <= 0.3 ? '#ff9800' : '#4caf50',
                                fontWeight: 500
                              }}>
                                残工数: {remainingCapacity.toFixed(1)}
                                {remainingCapacity <= 0.1 && (
                                  <span style={{ marginLeft: '0.5rem', color: '#d32f2f' }}>
                                    ⚠️ 工数不足
                                  </span>
                                )}
                              </div>
                            </div>
                          </div>

                          {/* 割り当て詳細（選択時のみ表示） */}
                          {isSelected && (
                            <div style={{
                              paddingTop: '1rem',
                              borderTop: '1px solid #e0e0e0',
                              display: 'grid',
                              gridTemplateColumns: '1fr 120px',
                              gap: '1rem',
                              alignItems: 'end'
                            }}>
                              <div>
                                <label style={{
                                  fontSize: '0.85rem',
                                  color: '#333',
                                  fontWeight: 500,
                                  marginBottom: '0.25rem',
                                  display: 'block'
                                }}>
                                  役割
                                </label>
                                <input
                                  type="text"
                                  placeholder="例: 開発者、テスター、PM"
                                  value={allocation?.role_in_project || ''}
                                  onChange={(e) => handleMemberAllocationChange(
                                    emp.employee_id, 
                                    'role_in_project', 
                                    e.target.value
                                  )}
                                  style={{
                                    width: '100%',
                                    padding: '0.5rem',
                                    border: '1px solid #ddd',
                                    borderRadius: '4px',
                                    fontSize: '0.9rem'
                                  }}
                                />
                              </div>
                              
                              <div>
                                <label style={{
                                  fontSize: '0.85rem',
                                  color: '#333',
                                  fontWeight: 500,
                                  marginBottom: '0.25rem',
                                  display: 'block'
                                }}>
                                  割り当て工数
                                </label>
                                <input
                                  type="number"
                                  min="0.1"
                                  max={remainingCapacity}
                                  step="0.1"
                                  value={allocation?.allocation_ratio || 0.1}
                                  onChange={(e) => handleMemberAllocationChange(
                                    emp.employee_id, 
                                    'allocation_ratio', 
                                    Math.min(Number(e.target.value), remainingCapacity)
                                  )}
                                  style={{
                                    width: '100%',
                                    padding: '0.5rem',
                                    border: '1px solid #ddd',
                                    borderRadius: '4px',
                                    fontSize: '0.9rem'
                                  }}
                                />
                              </div>
                            </div>
                          )}
                        </div>
                      );
                    })}
                  </div>
                </div>
              </div>
              
              <div className="form-actions" style={{ marginTop: '2rem' }}>
                <button type="submit" className="btn btn-primary">
                  作成
                </button>
                <button 
                  type="button" 
                  className="btn btn-secondary"
                  onClick={() => {
                    setShowCreateForm(false);
                    setSelectedMembers([]);
                    setMemberAllocations({});
                  }}
                >
                  キャンセル
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* プロジェクト一覧テーブル（操作カラム削除・行クリック対応） */}
      <div className="project-table">
        <table>
          <thead>
            <tr>
              <th>プロジェクト名</th>
              <th>クライアント</th>
              <th>マネージャー</th>
              <th>予算</th>
              <th>期間</th>
              <th>ステータス</th>
            </tr>
          </thead>
          <tbody>
            {paginatedProjects.map(project => (
              <tr 
                key={project.project_id}
                onClick={() => handleProjectRowClick(project.project_id)}
                style={{
                  cursor: 'pointer',
                  transition: 'background-color 0.2s ease'
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.backgroundColor = '#f0f7ff';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.backgroundColor = '';
                }}
              >
                <td style={{ fontWeight: 500, color: '#1976d2' }}>{project.project_name}</td>
                <td>{project.client_name || '-'}</td>
                <td>{project.manager?.employee_name || '-'}</td>
                <td>{project.budget ? formatCurrency(project.budget) : '-'}</td>
                <td>
                  {project.start_date && project.end_date ? (
                    `${project.start_date} ～ ${project.end_date}`
                  ) : project.start_date ? (
                    `${project.start_date} ～`
                  ) : project.end_date ? (
                    `～ ${project.end_date}`
                  ) : '-'}
                </td>
                <td>
                  <span className={`status ${project.status_code?.toLowerCase()}`}>
                    {project.status_code === 'ACTIVE' ? 'アクティブ' : '非アクティブ'}
                  </span>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* ページネーション */}
      {totalPages > 1 && (
        <div style={{
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          gap: '0.5rem',
          marginTop: '2rem',
          padding: '1rem',
          backgroundColor: 'white',
          borderRadius: '8px'
        }}>
          <button
            onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
            disabled={currentPage === 1}
            style={{
              padding: '0.5rem 1rem',
              backgroundColor: currentPage === 1 ? '#e0e0e0' : '#1976d2',
              color: currentPage === 1 ? '#999' : 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: currentPage === 1 ? 'not-allowed' : 'pointer'
            }}
          >
            ＜
          </button>

          <div style={{ display: 'flex', gap: '0.25rem' }}>
            {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (
              <button
                key={page}
                onClick={() => setCurrentPage(page)}
                style={{
                  padding: '0.5rem 0.75rem',
                  backgroundColor: currentPage === page ? '#1976d2' : 'white',
                  color: currentPage === page ? 'white' : '#333',
                  border: '1px solid #ddd',
                  borderRadius: '4px',
                  cursor: 'pointer',
                  minWidth: '40px'
                }}
              >
                {page}
              </button>
            ))}
          </div>

          <button
            onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
            disabled={currentPage === totalPages}
            style={{
              padding: '0.5rem 1rem',
              backgroundColor: currentPage === totalPages ? '#e0e0e0' : '#1976d2',
              color: currentPage === totalPages ? '#999' : 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: currentPage === totalPages ? 'not-allowed' : 'pointer'
            }}
          >
            ＞
          </button>

          <span style={{ marginLeft: '1rem', fontSize: '0.9rem', color: '#666' }}>
            {currentPage} / {totalPages} ページ
          </span>
        </div>
      )}

      {filteredProjects.length === 0 && !loading && (
        <div className="empty-state">
          {searchTerm || statusFilter ? 
            '条件に一致するプロジェクトがありません。' : 
            'プロジェクトがありません。新規作成してください。'
          }
        </div>
      )}
    </div>
  );
};

export default ProjectList;

================================================================================

FILE: frontend/src/pages/ProjectDetail.tsx
------------------------------------------
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { useParams, Link } from 'react-router-dom';
import { FaArrowLeft, FaEdit, FaPlus, FaUsers, FaProjectDiagram, FaInfo, FaNetworkWired, FaCalculator, FaExclamationTriangle, FaSave, FaTimes, FaTrash } from 'react-icons/fa';
import { Project, WBSTask, Employee, ProjectMember } from '../types/index';
import { projectAPI, taskAPI, employeeAPI, scheduleAPI, projectMemberAPI } from '../utils/api';
import WBSView from '../components/WBSView';
import PERTChart from '../components/PERTChart';

interface EmployeeWithWorkload extends Employee {
  total_allocation: number;
  remaining_capacity: number;
}

const ProjectDetail: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const projectId = Number(id);
  
  const [project, setProject] = useState<Project | null>(null);
  const [tasks, setTasks] = useState<WBSTask[]>([]);
  const [employees, setEmployees] = useState<Employee[]>([]);
  const [allProjects, setAllProjects] = useState<Project[]>([]);
  const [allMembers, setAllMembers] = useState<ProjectMember[]>([]);
  const [members, setMembers] = useState<ProjectMember[]>([]);
  const [activeTab, setActiveTab] = useState<'info' | 'members' | 'wbs' | 'pert'>('wbs');
  const [loading, setLoading] = useState(true);

  // スケジュール再計算ボタンの状態管理
  const [scheduleNeedsRecalculation, setScheduleNeedsRecalculation] = useState(false);
  const [isCalculatingSchedule, setIsCalculatingSchedule] = useState(false);

  // プロジェクト編集関連の状態
  const [showEditForm, setShowEditForm] = useState(false);
  const [editProject, setEditProject] = useState<Partial<Project>>({});

  // メンバー追加関連の状態
  const [showAddMemberForm, setShowAddMemberForm] = useState(false);
  const [newMember, setNewMember] = useState({
    employee_id: '',
    role_in_project: '',
    allocation_ratio: 0.1
  });

  useEffect(() => {
    loadProjectData();
  }, [projectId]);

  const loadProjectData = useCallback(async () => {
    try {
      const [projectData, tasksData, employeesData, membersData, allProjectsData] = await Promise.all([
        projectAPI.getById(projectId),
        taskAPI.getProjectTasks(projectId),
        employeeAPI.getAll(),
        projectMemberAPI.getMembers(projectId),
        projectAPI.getAll()
      ]);
      
      setProject(projectData);
      setTasks(tasksData);
      setEmployees(employeesData);
      setMembers(membersData);
      setAllProjects(allProjectsData);
      setEditProject(projectData);
      
      // 全プロジェクトのメンバー情報を取得
      const allMembersData: ProjectMember[] = [];
      for (const proj of allProjectsData) {
        try {
          const members = await projectMemberAPI.getMembers(proj.project_id);
          allMembersData.push(...members);
        } catch (error) {
          console.error(`プロジェクト${proj.project_id}のメンバー取得エラー:`, error);
        }
      }
      setAllMembers(allMembersData);
      
    } catch (error) {
      console.error('プロジェクトデータ取得エラー:', error);
    } finally {
      setLoading(false);
    }
  }, [projectId]);

  // 社員の工数計算
  const employeesWithWorkload = useMemo((): EmployeeWithWorkload[] => {
    return employees.map(employee => {
      const allocations = allMembers
        .filter(member => member.employee_id === employee.employee_id)
        .map(member => member.allocation_ratio || 0);
      
      const totalAllocation = allocations.reduce((sum, allocation) => sum + allocation, 0);
      const remainingCapacity = Math.max(0, 1.0 - totalAllocation);
      
      return {
        ...employee,
        total_allocation: totalAllocation,
        remaining_capacity: remainingCapacity
      };
    });
  }, [employees, allMembers]);

  // スケジュール変更を通知する関数
  const handleScheduleChange = useCallback(() => {
    console.log('Schedule change detected - enabling recalculation button');
    setScheduleNeedsRecalculation(true);
  }, []);

  // スケジュール再計算処理
  const handleCalculateSchedule = async () => {
    setIsCalculatingSchedule(true);
    try {
      console.log('Starting schedule calculation...');
      const result = await scheduleAPI.calculateSchedule(projectId);
      console.log('Schedule calculation result:', result);
      
      // データ再読み込み
      await loadProjectData();
      
      // 再計算完了後は再計算不要状態にする
      setScheduleNeedsRecalculation(false);
      
      alert(`スケジュール再計算が完了しました。\n総期間: ${result.total_duration}日\nクリティカルパス: ${result.critical_path.length}タスク`);
    } catch (error) {
      console.error('スケジュール計算エラー:', error);
      alert('スケジュール再計算に失敗しました。');
    } finally {
      setIsCalculatingSchedule(false);
    }
  };

  const handleCreateTask = async (taskData: any) => {
    try {
      await taskAPI.create({
        ...taskData,
        project_id: projectId
      });
      
      // スケジュール変更通知
      handleScheduleChange();
      
      // データ更新
      await loadProjectData();
    } catch (error) {
      console.error('タスク作成エラー:', error);
    }
  };

  const handleEditProject = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      // バリデーション（開始日・終了日必須化）
      if (!editProject.project_name?.trim()) {
        alert('プロジェクト名は必須です。');
        return;
      }

      if (!editProject.start_date) {
        alert('開始日は必須です。');
        return;
      }

      if (!editProject.end_date) {
        alert('終了日は必須です。');
        return;
      }

      if (editProject.start_date && editProject.end_date) {
        const startDate = new Date(editProject.start_date);
        const endDate = new Date(editProject.end_date);
        if (startDate >= endDate) {
          alert('終了日は開始日より後の日付を指定してください。');
          return;
        }
      }

      await projectAPI.update(projectId, editProject);
      
      // プロジェクト期間が変更された場合はスケジュール変更通知
      if (editProject.start_date !== project?.start_date || editProject.end_date !== project?.end_date) {
        handleScheduleChange();
      }
      
      setShowEditForm(false);
      await loadProjectData();
    } catch (error) {
      console.error('プロジェクト更新エラー:', error);
      alert('プロジェクトの更新に失敗しました。');
    }
  };

  const handleAddMember = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      // 工数チェック
      const employee = employeesWithWorkload.find(e => e.employee_id === Number(newMember.employee_id));
      if (employee && newMember.allocation_ratio > employee.remaining_capacity) {
        alert(`${employee.employee_name}の残工数（${employee.remaining_capacity.toFixed(1)}）を超える割り当てです。`);
        return;
      }

      await projectMemberAPI.addMember({
        project_id: projectId,
        employee_id: Number(newMember.employee_id),
        role_in_project: newMember.role_in_project,
        allocation_ratio: newMember.allocation_ratio,
        join_date: new Date().toISOString().split('T')[0]
      });
      
      setNewMember({ employee_id: '', role_in_project: '', allocation_ratio: 0.1 });
      setShowAddMemberForm(false);
      await loadProjectData();
    } catch (error) {
      console.error('メンバー追加エラー:', error);
      alert('メンバーの追加に失敗しました。');
    }
  };

  const handleRemoveMember = async (employeeId: number) => {
    if (window.confirm('このメンバーをプロジェクトから削除しますか？')) {
      try {
        await projectMemberAPI.removeMember(projectId, employeeId);
        await loadProjectData();
      } catch (error) {
        console.error('メンバー削除エラー:', error);
      }
    }
  };

  // WBS/PERTからの更新処理
  const handleUpdateTask = useCallback(async () => {
    try {
      const [tasksData] = await Promise.all([
        taskAPI.getProjectTasks(projectId)
      ]);
      setTasks(tasksData);
    } catch (error) {
      console.error('タスクデータ更新エラー:', error);
    }
  }, [projectId]);

  const getAvailableEmployees = () => {
    const memberIds = members.map(m => m.employee_id);
    return employeesWithWorkload.filter(emp => !memberIds.includes(emp.employee_id));
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('ja-JP', {
      style: 'currency',
      currency: 'JPY'
    }).format(amount);
  };

  if (loading) return <div className="loading">読み込み中...</div>;
  if (!project) return <div className="error">プロジェクトが見つかりません</div>;

  return (
    <div className="project-detail">
      {/* プロジェクト情報ヘッダー（戻るボタン付き） */}
      <div className="project-header">
        <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>
          <h2>{project.project_name}</h2>
        </div>
        <div style={{ display: 'flex', gap: '0.5rem', alignItems: 'center' }}>
          {/* スケジュール変更通知インジケーター */}
          {scheduleNeedsRecalculation && (
            <span style={{ 
              color: '#ff9800', 
              fontSize: '0.9rem', 
              backgroundColor: '#fff3e0', 
              padding: '0.25rem 0.5rem', 
              borderRadius: '4px',
              border: '1px solid #ffcc02',
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem'
            }}>
              <FaExclamationTriangle />
              スケジュール要更新
            </span>
          )}
          <button 
            className="btn btn-primary"
            onClick={handleCalculateSchedule}
            disabled={!scheduleNeedsRecalculation || isCalculatingSchedule}
            style={{
              opacity: scheduleNeedsRecalculation ? 1 : 0.5,
              cursor: scheduleNeedsRecalculation ? 'pointer' : 'not-allowed',
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem'
            }}
          >
            <FaCalculator />
            {isCalculatingSchedule ? '計算中...' : 'スケジュール再計算'}
          </button>
        </div>
      </div>

      {/* タブ切り替え */}
      <div className="tab-container">
        <div className="tabs">
          <button 
            className={`tab ${activeTab === 'wbs' ? 'active' : ''}`}
            onClick={() => setActiveTab('wbs')}
          >
            <FaProjectDiagram style={{ marginRight: '0.5rem' }} />
            WBS
          </button>
          <button 
            className={`tab ${activeTab === 'pert' ? 'active' : ''}`}
            onClick={() => setActiveTab('pert')}
          >
            <FaNetworkWired style={{ marginRight: '0.5rem' }} />
            PERT図
          </button>
          <button 
            className={`tab ${activeTab === 'info' ? 'active' : ''}`}
            onClick={() => setActiveTab('info')}
          >
            <FaInfo style={{ marginRight: '0.5rem' }} />
            プロジェクト詳細
          </button>
          <button 
            className={`tab ${activeTab === 'members' ? 'active' : ''}`}
            onClick={() => setActiveTab('members')}
          >
            <FaUsers style={{ marginRight: '0.5rem' }} />
            メンバー管理
          </button>
        </div>

        {/* タブコンテンツ */}
        <div className="tab-content">
          {activeTab === 'info' && (
            <ProjectInfo 
              project={project} 
              onEdit={() => setShowEditForm(true)}
            />
          )}

          {activeTab === 'members' && (
            <div className="members-tab">
              <div className="members-header">
                <h3>プロジェクトメンバー</h3>
                <button 
                  className="btn btn-primary"
                  onClick={() => setShowAddMemberForm(true)}
                  disabled={getAvailableEmployees().length === 0}
                  style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}
                >
                  <FaPlus />
                  メンバー追加
                </button>
              </div>

              {/* メンバー追加フォーム（step属性修正版） */}
              {showAddMemberForm && (
                <div className="modal-overlay">
                  <div className="modal">
                    <h3>メンバー追加</h3>
                    <form onSubmit={handleAddMember}>
                      <div className="form-group">
                        <label>社員選択 *</label>
                        <select
                          required
                          value={newMember.employee_id}
                          onChange={(e) => setNewMember({...newMember, employee_id: e.target.value})}
                        >
                          <option value="">選択してください</option>
                          {getAvailableEmployees().map(emp => (
                            <option key={emp.employee_id} value={emp.employee_id}>
                              {emp.employee_name} (残工数: {emp.remaining_capacity.toFixed(1)})
                            </option>
                          ))}
                        </select>
                      </div>
                      
                      <div className="form-group">
                        <label>役割</label>
                        <input
                          type="text"
                          placeholder="例: 開発者、テスター、デザイナー"
                          value={newMember.role_in_project}
                          onChange={(e) =>
                            setNewMember({ ...newMember, role_in_project: e.target.value })
                          }
                          style={{
                            padding: "0.5rem", // 内側の余白
                            border: "1px solid #ccc", // 薄い枠線
                            borderRadius: "6px",      // 角丸
                            fontSize: "0.9rem",       // 少し大きめ文字
                            width: "100%",            // 横幅いっぱい（任意）
                            boxSizing: "border-box",  // paddingを含めてwidth計算
                            outline: "none",          // フォーカス時の青い枠を消す（任意）
                          }}
                        />
                      </div>
                      <div className="form-group">
                        <label>割り当て工数（0.1 ～ 1.0）</label>
                        <input
                          type="number"
                          min="0.1"
                          max={newMember.employee_id ? 
                            getAvailableEmployees().find(e => e.employee_id === Number(newMember.employee_id))?.remaining_capacity || 1.0 : 
                            1.0
                          }
                          step="0.1"
                          value={newMember.allocation_ratio}
                          onChange={(e) => setNewMember({...newMember, allocation_ratio: Number(e.target.value)})}
                          style={{
                            padding: "0.5rem", // 内側の余白
                            border: "1px solid #ccc", // 薄い枠線
                            borderRadius: "6px",      // 角丸
                            fontSize: "0.9rem",       // 少し大きめ文字
                            width: "100%",            // 横幅いっぱい（任意）
                            boxSizing: "border-box",  // paddingを含めてwidth計算
                            outline: "none",          // フォーカス時の青い枠を消す（任意）
                          }}
                        />
                      </div>
                      <div className="form-actions">
                        <button type="submit" className="btn btn-primary">
                          追加
                        </button>
                        <button 
                          type="button" 
                          className="btn btn-secondary"
                          onClick={() => setShowAddMemberForm(false)}
                        >
                          キャンセル
                        </button>
                      </div>
                    </form>
                  </div>
                </div>
              )}

              {/* メンバー一覧テーブル */}
              <MembersTable 
                members={members}
                onUpdateMember={async (projectId, employeeId, updates) => {
                  try {
                    await projectMemberAPI.updateMember(projectId, employeeId, updates);
                    
                    // 稼働率変更時にスケジュール変更通知を呼び出す
                    if (updates.allocation_ratio !== undefined) {
                      handleScheduleChange();
                    }
                    
                    await loadProjectData();
                  } catch (error) {
                    console.error('メンバー更新エラー:', error);
                    alert('メンバー情報の更新に失敗しました。');
                  }
                }}
                onRemoveMember={handleRemoveMember}
                projectId={projectId}
              />

              {members.length === 0 && (
                <div className="empty-state">
                  プロジェクトメンバーがいません。メンバーを追加してください。
                </div>
              )}
            </div>
          )}

          {activeTab === 'wbs' && (
            <WBSView 
              tasks={tasks} 
              employees={employees}
              members={members}
              project={project}
              onUpdateTask={handleUpdateTask}
              onScheduleChange={handleScheduleChange}
              projectStartDate={project.start_date}
              projectEndDate={project.end_date}
            />
          )}
          
          {activeTab === 'pert' && (
            <PERTChart 
              tasks={tasks}
              employees={employees}
              members={members}
              onUpdateTask={handleUpdateTask}
              onCreateTask={handleCreateTask}
              onCreateDependency={async (dep) => {
                await taskAPI.createDependency(dep);
                return;
              }}
              onScheduleChange={handleScheduleChange}
            />
          )}
        </div>
      </div>

      {/* プロジェクト編集フォーム（新規作成フォームと同じデザイン） */}
      {showEditForm && (
        <div className="modal-overlay">
          <div className="modal" style={{ maxWidth: '800px', width: '90%' }}>
            <h3>プロジェクト編集</h3>
            <form onSubmit={handleEditProject}>
              <div>
                <div className="form-group">
                  <label>プロジェクト名 *</label>
                  <input
                    type="text"
                    required
                    value={editProject.project_name || ''}
                    onChange={(e) => setEditProject({...editProject, project_name: e.target.value})}
                    placeholder="例: ECサイト構築プロジェクト"
                  />
                </div>

                <div style={{ display: "flex" }}>
                  <div className="form-group" style={{ marginRight: "12px" }}>
                    <label>開始日 *</label>
                    <input
                      type="date"
                      required
                      value={editProject.start_date || ''}
                      onChange={(e) => setEditProject({...editProject, start_date: e.target.value || undefined})}
                    />
                  </div>
                  <div className="form-group">
                    <label>終了日 *</label>
                    <input
                      type="date"
                      required
                      value={editProject.end_date || ''}
                      onChange={(e) => setEditProject({...editProject, end_date: e.target.value || undefined})}
                    />
                  </div>
                </div>

                <div className="form-group">
                  <label>プロジェクトマネージャー</label>
                  <select
                    value={editProject.manager_id || ''}
                    onChange={(e) => setEditProject({...editProject, manager_id: Number(e.target.value)})}
                  >
                    <option value="">未選択</option>
                    {employees.map(emp => {
                      const workload = employeesWithWorkload.find(w => w.employee_id === emp.employee_id);
                      return (
                        <option key={emp.employee_id} value={emp.employee_id}>
                          {emp.employee_name} (残工数: {workload?.remaining_capacity.toFixed(1) || '1.0'})
                        </option>
                      );
                    })}
                  </select>
                </div>

                <div className="form-group">
                  <label>クライアント名</label>
                  <input
                    type="text"
                    value={editProject.client_name || ''}
                    onChange={(e) => setEditProject({...editProject, client_name: e.target.value})}
                    placeholder="例: 株式会社サンプル"
                  />
                </div>

                <div className="form-group">
                  <label>予算（円）</label>
                  <input
                    type="number"
                    min="0"
                    value={editProject.budget || ''}
                    onChange={(e) => setEditProject({...editProject, budget: e.target.value ? Number(e.target.value) : undefined})}
                    placeholder="5000000"
                  />
                </div>

                <div className="form-group">
                  <label>ステータス</label>
                  <select
                    value={editProject.status_code || 'ACTIVE'}
                    onChange={(e) => setEditProject({...editProject, status_code: e.target.value})}
                  >
                    <option value="ACTIVE">アクティブ</option>
                    <option value="INACTIVE">非アクティブ</option>
                  </select>
                </div>
              </div>
              
              <div className="form-actions" style={{ marginTop: '2rem' }}>
                <button type="submit" className="btn btn-primary">
                  更新
                </button>
                <button 
                  type="button" 
                  className="btn btn-secondary"
                  onClick={() => setShowEditForm(false)}
                >
                  キャンセル
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

// メンバーテーブルコンポーネント（インライン編集機能付き）
const MembersTable: React.FC<{
  members: ProjectMember[];
  onUpdateMember: (projectId: number, employeeId: number, updates: Partial<ProjectMember>) => Promise<void>;
  onRemoveMember: (employeeId: number) => void;
  projectId: number;
}> = ({ members, onUpdateMember, onRemoveMember, projectId }) => {
  const [editingMember, setEditingMember] = useState<number | null>(null);
  const [editData, setEditData] = useState<{
    role_in_project: string;
    allocation_ratio: number;
  }>({ role_in_project: '', allocation_ratio: 1.0 });

  const handleStartEdit = (member: ProjectMember) => {
    setEditingMember(member.employee_id);
    setEditData({
      role_in_project: member.role_in_project || '',
      allocation_ratio: member.allocation_ratio || 1.0
    });
  };

  const handleSaveEdit = async (employeeId: number) => {
    try {
      const originalMember = members.find(m => m.employee_id === employeeId);
      const allocationChanged = originalMember && originalMember.allocation_ratio !== editData.allocation_ratio;
      
      await onUpdateMember(projectId, employeeId, editData);
      setEditingMember(null);
    } catch (error) {
      console.error('メンバー更新エラー:', error);
    }
  };

  const handleCancelEdit = () => {
    setEditingMember(null);
    setEditData({ role_in_project: '', allocation_ratio: 1.0 });
  };

  return (
    <div className="members-table">
      <table>
        <thead>
          <tr>
            <th>社員名</th>
            <th>メールアドレス</th>
            <th>役割</th>
            <th>稼働率</th>
            <th>参加日</th>
            <th>操作</th>
          </tr>
        </thead>
        <tbody>
          {members.map(member => (
            <tr key={member.employee_id}>
              <td>{member.employee?.employee_name}</td>
              <td>{member.employee?.email}</td>
              <td>
                {editingMember === member.employee_id ? (
                  <input
                    type="text"
                    value={editData.role_in_project}
                    onChange={(e) => setEditData({...editData, role_in_project: e.target.value})}
                    placeholder="例: 開発者、テスター"
                    style={{
                      padding: "0.5rem", // 内側の余白
                      border: "1px solid #ccc", // 薄い枠線
                      borderRadius: "6px",      // 角丸
                      fontSize: "0.9rem",       // 少し大きめ文字
                      width: "100%",            // 横幅いっぱい（任意）
                      boxSizing: "border-box",  // paddingを含めてwidth計算
                      outline: "none",          // フォーカス時の青い枠を消す（任意）
                    }}
                  />
                ) : (
                  member.role_in_project || '-'
                )}
              </td>
              <td>
                {editingMember === member.employee_id ? (
                  <input
                    type="number"
                    min="0.1"
                    max="1.0"
                    step="0.1"
                    value={editData.allocation_ratio}
                    onChange={(e) => setEditData({...editData, allocation_ratio: Number(e.target.value)})}
                    style={{
                      padding: "0.5rem", // 内側の余白
                      border: "1px solid #ccc", // 薄い枠線
                      borderRadius: "6px",      // 角丸
                      fontSize: "0.9rem",       // 少し大きめ文字
                      width: "100%",            // 横幅いっぱい（任意）
                      boxSizing: "border-box",  // paddingを含めてwidth計算
                      outline: "none",          // フォーカス時の青い枠を消す（任意）
                    }}
                  />
                ) : (
                  <span>
                    {((member.allocation_ratio || 1.0) * 100).toFixed(0)}%
                  </span>
                )}
              </td>
              <td>{member.join_date || '-'}</td>
              <td>
                <div style={{ display: 'flex', gap: '0.25rem', flexWrap: 'wrap' }}>
                  {editingMember === member.employee_id ? (
                    <>
                      <button
                        className="btn btn-small btn-primary"
                        onClick={() => handleSaveEdit(member.employee_id)}
                        style={{ fontSize: '0.85rem', padding: '0.4rem 0.8rem', display: 'flex', alignItems: 'center', gap: '0.5rem' }}
                      >
                        保存
                      </button>
                      <button
                        className="btn btn-small btn-secondary"
                        onClick={handleCancelEdit}
                        style={{ fontSize: '0.85rem', padding: '0.4rem 0.8rem', display: 'flex', alignItems: 'center', gap: '0.5rem' }}
                      >
                        キャンセル
                      </button>
                    </>
                  ) : (
                    <>
                      <button
                        className="btn btn-small btn-secondary"
                        onClick={() => handleStartEdit(member)}
                        style={{ fontSize: '0.85rem', padding: '0.4rem 0.8rem', display: 'flex', alignItems: 'center', gap: '0.5rem' }}
                      >
                        編集
                      </button>
                      <button
                        className="btn btn-small btn-danger"
                        onClick={() => onRemoveMember(member.employee_id)}
                        style={{ fontSize: '0.85rem', padding: '0.4rem 0.8rem', display: 'flex', alignItems: 'center', gap: '0.5rem' }}
                      >
                        削除
                      </button>
                    </>
                  )}
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

// プロジェクト詳細情報コンポーネント（テーブル風UI）
const ProjectInfo: React.FC<{ project: Project; onEdit: () => void }> = ({ project, onEdit }) => {
  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('ja-JP', {
      style: 'currency',
      currency: 'JPY'
    }).format(amount);
  };

  const durationText = (() => {
    if (project.start_date && project.end_date) {
      const start = new Date(project.start_date);
      const end = new Date(project.end_date);
      const days = Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      return `${days}日間`;
    }
    return '-';
  })();

  const statusClass = project.status_code?.toLowerCase() || 'active';
  const statusLabel = project.status_code === 'ACTIVE' ? 'アクティブ' : '非アクティブ';

  return (
    <div className="project-info-tab">
      <div className="info-section">
        <h3>
          基本情報
          <button 
            className="btn btn-secondary"
            onClick={onEdit}
            style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}
          >
            <FaEdit style={{ marginRight: '0.5rem' }} />
            編集
          </button>
        </h3>

        <div className="info-table" role="region" aria-label="プロジェクト基本情報">
          <table aria-describedby="project-basic-info">
            <tbody id="project-basic-info">
              <tr>
                <th scope="row">プロジェクト名</th>
                <td className="value-mono">{project.project_name}</td>
              </tr>
              <tr>
                <th scope="row">クライアント名</th>
                <td>{project.client_name || '-'}</td>
              </tr>
              <tr>
                <th scope="row">プロジェクトマネージャー</th>
                <td>{project.manager?.employee_name || '-'}</td>
              </tr>
              <tr>
                <th scope="row">予算</th>
                <td className="inline-badge">
                  {project.budget ? <span className="value-mono">{formatCurrency(project.budget)}</span> : '-'}
                </td>
              </tr>
              <tr>
                <th scope="row">開始日</th>
                <td className="value-mono">{project.start_date || '-'}</td>
              </tr>
              <tr>
                <th scope="row">終了日</th>
                <td className="value-mono">{project.end_date || '-'}</td>
              </tr>
              <tr>
                <th scope="row">期間</th>
                <td className="inline-badge">
                  <span>{durationText}</span>
                  {project.start_date && project.end_date && (
                    <small>（{project.start_date} 〜 {project.end_date}）</small>
                  )}
                </td>
              </tr>
              <tr>
                <th scope="row">ステータス</th>
                <td>
                  <span className={`status ${statusClass}`}>{statusLabel}</span>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default ProjectDetail;

================================================================================

FILE: frontend/src/pages/EmployeeList.tsx
-----------------------------------------
import React, { useState, useEffect, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import { FaPlus, FaSearch, FaFilter, FaEraser, FaUserPlus, FaTimes } from 'react-icons/fa';
import { Employee, ProjectMember } from '../types/index';
import { employeeAPI, projectAPI, projectMemberAPI } from '../utils/api';

interface EmployeeWithWorkload extends Employee {
  total_allocation: number;
  remaining_capacity: number;
  project_count: number;
}

const EmployeeList: React.FC = () => {
  const navigate = useNavigate();
  const [employees, setEmployees] = useState<Employee[]>([]);
  const [allMembers, setAllMembers] = useState<ProjectMember[]>([]);
  const [loading, setLoading] = useState(true);
  const [showCreateForm, setShowCreateForm] = useState(false);
  
  // フィルター・ページネーション状態
  const [searchTerm, setSearchTerm] = useState('');
  const [workloadFilter, setWorkloadFilter] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(10);
  
  const [newEmployee, setNewEmployee] = useState({
    employee_name: '',
    email: '',
    daily_work_hours: 8.0
  });

  useEffect(() => {
    loadEmployees();
  }, []);

  const loadEmployees = async () => {
    try {
      const [employeesData, projectsData] = await Promise.all([
        employeeAPI.getAll(),
        projectAPI.getAll()
      ]);
      
      setEmployees(employeesData);
      
      // 全プロジェクトのメンバー情報を取得
      const allMembersData: ProjectMember[] = [];
      for (const project of projectsData) {
        try {
          const members = await projectMemberAPI.getMembers(project.project_id);
          allMembersData.push(...members);
        } catch (error) {
          console.error(`プロジェクト${project.project_id}のメンバー取得エラー:`, error);
        }
      }
      setAllMembers(allMembersData);
    } catch (error) {
      console.error('社員データ取得エラー:', error);
    } finally {
      setLoading(false);
    }
  };

  // 社員の工数計算
  const employeesWithWorkload = useMemo((): EmployeeWithWorkload[] => {
    return employees.map(employee => {
      const employeeAllocations = allMembers
        .filter(member => member.employee_id === employee.employee_id)
        .map(member => member.allocation_ratio || 0);
      
      const totalAllocation = employeeAllocations.reduce((sum, allocation) => sum + allocation, 0);
      const remainingCapacity = Math.max(0, 1.0 - totalAllocation);
      const projectCount = employeeAllocations.length;
      
      return {
        ...employee,
        total_allocation: totalAllocation,
        remaining_capacity: remainingCapacity,
        project_count: projectCount
      };
    });
  }, [employees, allMembers]);

  // フィルタリング（ソート順修正：新しい順→ID順）
  const filteredEmployees = useMemo(() => {
    return employeesWithWorkload
      .filter(employee => {
        const matchesSearch = !searchTerm || 
          employee.employee_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          employee.email.toLowerCase().includes(searchTerm.toLowerCase());
        
        let matchesWorkload = true;
        if (workloadFilter) {
          switch (workloadFilter) {
            case 'available':
              matchesWorkload = employee.remaining_capacity >= 0.1;
              break;
            case 'busy':
              matchesWorkload = employee.remaining_capacity < 0.1;
              break;
            default:
              matchesWorkload = true;
          }
        }
        
        return matchesSearch && matchesWorkload;
      })
      .sort((a, b) => {
        // employee_idの降順（新しい社員が上に）
        return b.employee_id - a.employee_id;
      });
  }, [employeesWithWorkload, searchTerm, workloadFilter]);

  // ページネーション
  const paginatedEmployees = useMemo(() => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    return filteredEmployees.slice(startIndex, startIndex + itemsPerPage);
  }, [filteredEmployees, currentPage, itemsPerPage]);

  const totalPages = Math.ceil(filteredEmployees.length / itemsPerPage);

  const handleCreateEmployee = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      // バリデーション
      if (!newEmployee.employee_name.trim()) {
        alert('社員名は必須です。');
        return;
      }
      if (!newEmployee.email.trim()) {
        alert('メールアドレスは必須です。');
        return;
      }
      if (newEmployee.daily_work_hours <= 0 || newEmployee.daily_work_hours > 24) {
        alert('1日の稼働時間は0より大きく24以下で入力してください。');
        return;
      }

      await employeeAPI.create(newEmployee);
      setNewEmployee({ employee_name: '', email: '', daily_work_hours: 8.0 });
      setShowCreateForm(false);
      loadEmployees();
    } catch (error) {
      console.error('社員作成エラー:', error);
      alert('社員の登録に失敗しました。メールアドレスが重複している可能性があります。');
    }
  };

  const getWorkloadStatus = (remainingCapacity: number) => {
    if (remainingCapacity >= 0.1) return { text: '空きあり', color: '#4caf50' };
    return { text: '空きなし', color: '#d32f2f' };
  };

  // 社員行クリック処理
  const handleEmployeeRowClick = (employeeId: number) => {
    navigate(`/employees/${employeeId}`);
  };

  if (loading) return <div className="loading">読み込み中...</div>;

  return (
    <div className="employee-list">
      <div className="page-header">
        <h2>社員一覧</h2>
        <button 
          className="btn btn-primary"
          onClick={() => setShowCreateForm(true)}
          style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}
        >
          <FaUserPlus />
          新規社員登録
        </button>
      </div>

      {/* フィルター・検索セクション */}
      <div style={{
        background: 'white',
        padding: '1.5rem',
        borderRadius: '8px',
        marginBottom: '1.5rem',
        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)'
      }}>
        <div style={{ display: 'flex', gap: '1rem', alignItems: 'center', flexWrap: 'wrap' }}>
          <div style={{ flex: 1, minWidth: '200px' }}>
            <label style={{ fontSize: '0.9rem', color: '#666', marginBottom: '0.25rem', display: 'block' }}>
              <FaSearch style={{ marginRight: '0.5rem' }} />
              社員名・メールアドレスで検索
            </label>
            <input
              type="text"
              placeholder="検索キーワードを入力..."
              value={searchTerm}
              onChange={(e) => {
                setSearchTerm(e.target.value);
                setCurrentPage(1);
              }}
              style={{
                width: '100%',
                padding: '0.5rem',
                border: '1px solid #ddd',
                borderRadius: '4px'
              }}
            />
          </div>
          
          <div style={{ minWidth: '150px' }}>
            <label style={{ fontSize: '0.9rem', color: '#666', marginBottom: '0.25rem', display: 'block' }}>
              <FaFilter style={{ marginRight: '0.5rem' }} />
              工数状況
            </label>
            <select
              value={workloadFilter}
              onChange={(e) => {
                setWorkloadFilter(e.target.value);
                setCurrentPage(1);
              }}
              style={{
                width: '100%',
                padding: '0.5rem',
                border: '1px solid #ddd',
                borderRadius: '4px'
              }}
            >
              <option value="">すべて</option>
              <option value="available">空きあり（0.1以上）</option>
              <option value="busy">空きなし（0.1以下）</option>
            </select>
          </div>
          
          <div style={{ display: 'flex', alignItems: 'flex-end', gap: '0.5rem' }}>
            <button
              onClick={() => {
                setSearchTerm('');
                setWorkloadFilter('');
                setCurrentPage(1);
              }}
              style={{
                padding: '0.5rem 1rem',
                backgroundColor: '#757575',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                gap: '0.5rem'
              }}
            >
              <FaEraser />
              クリア
            </button>
          </div>
        </div>
      </div>

      {/* 社員登録フォーム（step属性修正版） */}
      {showCreateForm && (
        <div className="modal-overlay">
          <div className="modal">
            <h3>新規社員登録</h3>
            <form onSubmit={handleCreateEmployee}>
              <div className="form-group">
                <label>社員名*</label>
                <input
                  type="text"
                  required
                  value={newEmployee.employee_name}
                  onChange={(e) => setNewEmployee({...newEmployee, employee_name: e.target.value})}
                  placeholder="例: 山田太郎"
                />
              </div>
              <div className="form-group">
                <label>メールアドレス*</label>
                <input
                  type="email"
                  required
                  value={newEmployee.email}
                  onChange={(e) => setNewEmployee({...newEmployee, email: e.target.value})}
                  placeholder="例: yamada@example.com"
                />
              </div>
              <div className="form-group">
                <label>1日の稼働時間</label>
                <input
                  type="number"
                  min="0.1"
                  max="24"
                  step="0.1"
                  value={newEmployee.daily_work_hours}
                  onChange={(e) => setNewEmployee({...newEmployee, daily_work_hours: Number(e.target.value)})}
                />
              </div>
              <div className="form-actions">
                <button type="submit" className="btn btn-primary">
                  登録
                </button>
                <button 
                  type="button" 
                  className="btn btn-secondary"
                  onClick={() => setShowCreateForm(false)}
                >
                  キャンセル
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* 社員一覧テーブル（操作カラム削除・行クリック対応） */}
      <div className="employee-table">
        <table>
          <thead>
            <tr>
              <th>社員名</th>
              <th>メールアドレス</th>
              <th>1日の稼働時間</th>
              <th>プロジェクト数</th>
              <th>割り当て工数</th>
              <th>残工数</th>
              <th>工数状況</th>
            </tr>
          </thead>
          <tbody>
            {paginatedEmployees.map(employee => {
              const workloadStatus = getWorkloadStatus(employee.remaining_capacity);
              
              return (
                <tr 
                  key={employee.employee_id}
                  onClick={() => handleEmployeeRowClick(employee.employee_id)}
                  style={{
                    cursor: 'pointer',
                    transition: 'background-color 0.2s ease'
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.backgroundColor = '#f0f7ff';
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.backgroundColor = '';
                  }}
                >
                  <td style={{ fontWeight: 500, color: '#1976d2' }}>{employee.employee_name}</td>
                  <td>{employee.email}</td>
                  <td>{employee.daily_work_hours || 8.0}時間/日</td>
                  <td>
                    <span style={{
                      backgroundColor: employee.project_count > 0 ? '#e3f2fd' : '#f5f5f5',
                      color: employee.project_count > 0 ? '#1976d2' : '#666',
                      padding: '0.25rem 0.5rem',
                      borderRadius: '12px',
                      fontSize: '0.8rem',
                      fontWeight: 500
                    }}>
                      {employee.project_count}件
                    </span>
                  </td>
                  <td>
                    <span style={{
                      fontWeight: 500,
                      color: employee.total_allocation > 0.8 ? '#d32f2f' : '#333'
                    }}>
                      {employee.total_allocation.toFixed(1)} / 1.0
                    </span>
                  </td>
                  <td>
                    <span style={{
                      fontWeight: 600,
                      color: workloadStatus.color
                    }}>
                      {employee.remaining_capacity.toFixed(1)}
                    </span>
                  </td>
                  <td>
                    <span style={{
                      backgroundColor: workloadStatus.color,
                      color: 'white',
                      padding: '0.25rem 0.5rem',
                      borderRadius: '12px',
                      fontSize: '0.8rem',
                      fontWeight: 500
                    }}>
                      {workloadStatus.text}
                    </span>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>

      {/* ページネーション */}
      {totalPages > 1 && (
        <div style={{
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          gap: '0.5rem',
          marginTop: '2rem',
          padding: '1rem',
          backgroundColor: 'white',
          borderRadius: '8px'
        }}>
          <button
            onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
            disabled={currentPage === 1}
            style={{
              padding: '0.5rem 1rem',
              backgroundColor: currentPage === 1 ? '#e0e0e0' : '#1976d2',
              color: currentPage === 1 ? '#999' : 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: currentPage === 1 ? 'not-allowed' : 'pointer'
            }}
          >
            ＜
          </button>

          <div style={{ display: 'flex', gap: '0.25rem' }}>
            {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (
              <button
                key={page}
                onClick={() => setCurrentPage(page)}
                style={{
                  padding: '0.5rem 0.75rem',
                  backgroundColor: currentPage === page ? '#1976d2' : 'white',
                  color: currentPage === page ? 'white' : '#333',
                  border: '1px solid #ddd',
                  borderRadius: '4px',
                  cursor: 'pointer',
                  minWidth: '40px'
                }}
              >
                {page}
              </button>
            ))}
          </div>

          <button
            onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
            disabled={currentPage === totalPages}
            style={{
              padding: '0.5rem 1rem',
              backgroundColor: currentPage === totalPages ? '#e0e0e0' : '#1976d2',
              color: currentPage === totalPages ? '#999' : 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: currentPage === totalPages ? 'not-allowed' : 'pointer'
            }}
          >
            ＞
          </button>

          <span style={{ marginLeft: '1rem', fontSize: '0.9rem', color: '#666' }}>
            {currentPage} / {totalPages} ページ ({filteredEmployees.length}名)
          </span>
        </div>
      )}

      {filteredEmployees.length === 0 && !loading && (
        <div className="empty-state">
          {searchTerm || workloadFilter ? 
            '条件に一致する社員がいません。' : 
            '社員が登録されていません。新規登録してください。'
          }
        </div>
      )}
    </div>
  );
};

export default EmployeeList;

================================================================================

FILE: frontend/src/pages/EmployeeDetail.tsx
-------------------------------------------
import React, { useState, useEffect, useMemo } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { FaArrowLeft, FaEdit, FaSave, FaTimes } from 'react-icons/fa';
import { Employee, Project, ProjectMember } from '../types/index';
import { employeeAPI, projectAPI, projectMemberAPI } from '../utils/api';

const EmployeeDetail: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const employeeId = Number(id);
  
  const [employee, setEmployee] = useState<Employee | null>(null);
  const [allProjects, setAllProjects] = useState<Project[]>([]);
  const [allMembers, setAllMembers] = useState<ProjectMember[]>([]);
  const [loading, setLoading] = useState(true);
  const [showEditForm, setShowEditForm] = useState(false);
  const [editData, setEditData] = useState({
    employee_name: '',
    email: '',
    daily_work_hours: 8.0
  });

  useEffect(() => {
    loadEmployeeData();
  }, [employeeId]);

  const loadEmployeeData = async () => {
    try {
      const [employeeData, projectsData] = await Promise.all([
        employeeAPI.getById(employeeId),
        projectAPI.getAll()
      ]);
      
      setEmployee(employeeData);
      setAllProjects(projectsData);
      setEditData({
        employee_name: employeeData.employee_name,
        email: employeeData.email,
        daily_work_hours: employeeData.daily_work_hours || 8.0
      });
      
      // 全プロジェクトのメンバー情報を取得
      const allMembersData: ProjectMember[] = [];
      for (const project of projectsData) {
        try {
          const members = await projectMemberAPI.getMembers(project.project_id);
          allMembersData.push(...members);
        } catch (error) {
          console.error(`プロジェクト${project.project_id}のメンバー取得エラー:`, error);
        }
      }
      setAllMembers(allMembersData);
      
    } catch (error) {
      console.error('社員データ取得エラー:', error);
    } finally {
      setLoading(false);
    }
  };

  // 社員の参加プロジェクト情報を計算
  const employeeProjects = useMemo(() => {
    return allMembers
      .filter(member => member.employee_id === employeeId)
      .map(member => {
        const project = allProjects.find(p => p.project_id === member.project_id);
        return {
          ...member,
          project
        };
      })
      .filter(item => item.project); // プロジェクトが見つからない場合を除外
  }, [allMembers, allProjects, employeeId]);

  // 工数計算
  const workloadSummary = useMemo(() => {
    const totalAllocation = employeeProjects.reduce((sum, proj) => sum + (proj.allocation_ratio || 0), 0);
    const remainingCapacity = Math.max(0, 1.0 - totalAllocation);
    
    return {
      totalAllocation,
      remainingCapacity,
      projectCount: employeeProjects.length
    };
  }, [employeeProjects]);

  const handleEditEmployee = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      // バリデーション
      if (!editData.employee_name.trim()) {
        alert('社員名は必須です。');
        return;
      }
      if (!editData.email.trim()) {
        alert('メールアドレスは必須です。');
        return;
      }
      if (editData.daily_work_hours <= 0 || editData.daily_work_hours > 24) {
        alert('1日の稼働時間は0より大きく24以下で入力してください。');
        return;
      }

      // 社員情報更新API呼び出し
      await employeeAPI.update(employeeId, editData);
      
      setShowEditForm(false);
      await loadEmployeeData();
      
      alert('社員情報を更新しました。');
    } catch (error: any) {
      console.error('社員更新エラー:', error);
      
      // エラーメッセージの詳細表示
      if (error.response?.status === 400 && error.response?.data?.detail === 'Email already exists') {
        alert('このメールアドレスは既に使用されています。');
      } else if (error.response?.data?.detail) {
        alert(`社員情報の更新に失敗しました: ${error.response.data.detail}`);
      } else {
        alert('社員情報の更新に失敗しました。');
      }
    }
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('ja-JP', {
      style: 'currency',
      currency: 'JPY'
    }).format(amount);
  };

  const getWorkloadStatus = (remainingCapacity: number) => {
    if (remainingCapacity >= 0.1) return { text: '空きあり', color: '#4caf50' };
    return { text: '空きなし', color: '#d32f2f' };
  };

  // プロジェクト行クリック処理
  const handleProjectRowClick = (projectId: number) => {
    navigate(`/projects/${projectId}`);
  };

  if (loading) return <div className="loading">読み込み中...</div>;
  if (!employee) return <div className="error">社員が見つかりません</div>;

  const workloadStatus = getWorkloadStatus(workloadSummary.remainingCapacity);

  return (
    <div className="employee-detail">
      {/* 社員編集フォーム */}
      {showEditForm && (
        <div className="modal-overlay">
          <div className="modal">
            <h3>社員情報編集</h3>
            <form onSubmit={handleEditEmployee}>
              <div className="form-group">
                <label>社員名*</label>
                <input
                  type="text"
                  required
                  value={editData.employee_name}
                  onChange={(e) => setEditData({...editData, employee_name: e.target.value})}
                />
              </div>
              <div className="form-group">
                <label>メールアドレス*</label>
                <input
                  type="email"
                  required
                  value={editData.email}
                  onChange={(e) => setEditData({...editData, email: e.target.value})}
                />
              </div>
              <div className="form-group">
                <label>1日の稼働時間</label>
                <input
                  type="number"
                  min="0.1"
                  max="24"
                  step="0.1"
                  value={editData.daily_work_hours}
                  onChange={(e) => setEditData({...editData, daily_work_hours: Number(e.target.value)})}
                />
              </div>
              <div className="form-actions">
                <button type="submit" className="btn btn-primary">
                  更新
                </button>
                <button 
                  type="button" 
                  className="btn btn-secondary"
                  onClick={() => setShowEditForm(false)}
                >
                  キャンセル
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '2rem' }}>
        {/* 基本情報 */}
        <div style={{ 
          backgroundColor: 'white', 
          padding: '2rem', 
          borderRadius: '8px',
          boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)'
        }}>
          <div style={{
            display: 'flex',
            justifyContent: 'space-between',
            marginBottom: '1.5rem', 
            color: '#1976d2',
            borderBottom: '2px solid #e0e0e0',
            paddingBottom: '0.5rem'
          }}>
            <h3 style={{ display: 'flex', alignItems: 'center' }}>
              基本情報
            </h3>

            <button 
              className="btn btn-primary"
              onClick={() => setShowEditForm(true)}
              style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}
            >
              <FaEdit />
              編集
            </button>
          </div>
          
          <div className="info-table">
            <table>
              <tbody>
                <tr>
                  <th>社員ID</th>
                  <td>{employee.employee_id}</td>
                </tr>
                <tr>
                  <th>社員名</th>
                  <td style={{ fontWeight: 500 }}>{employee.employee_name}</td>
                </tr>
                <tr>
                  <th>メールアドレス</th>
                  <td>{employee.email}</td>
                </tr>
                <tr>
                  <th>1日の稼働時間</th>
                  <td>{employee.daily_work_hours || 8.0}時間</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>

        {/* 工数状況 */}
        <div style={{ 
          backgroundColor: 'white', 
          padding: '2rem', 
          borderRadius: '8px',
          boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)'
        }}>
          <h3 style={{ 
            marginBottom: '1.5rem', 
            color: '#1976d2',
            borderBottom: '2px solid #e0e0e0',
            paddingBottom: '0.5rem'
          }}>
            工数状況
          </h3>
          
          <div className="info-table">
            <table>
              <tbody>
                <tr>
                  <th>参画プロジェクト数</th>
                  <td>
                    <span style={{
                      backgroundColor: workloadSummary.projectCount > 0 ? '#e3f2fd' : '#f5f5f5',
                      color: workloadSummary.projectCount > 0 ? '#1976d2' : '#666',
                      padding: '0.25rem 0.5rem',
                      borderRadius: '12px',
                      fontSize: '0.9rem',
                      fontWeight: 500
                    }}>
                      {workloadSummary.projectCount}件
                    </span>
                  </td>
                </tr>
                <tr>
                  <th>総割り当て工数</th>
                  <td>
                    <span style={{
                      fontWeight: 500,
                      color: workloadSummary.totalAllocation > 0.8 ? '#d32f2f' : '#333'
                    }}>
                      {workloadSummary.totalAllocation.toFixed(1)} / 1.0
                    </span>
                  </td>
                </tr>
                <tr>
                  <th>残工数</th>
                  <td>
                    <span style={{
                      fontWeight: 600,
                      color: workloadStatus.color
                    }}>
                      {workloadSummary.remainingCapacity.toFixed(1)}
                    </span>
                  </td>
                </tr>
                <tr>
                  <th>工数状況</th>
                  <td>
                    <span style={{
                      backgroundColor: workloadStatus.color,
                      color: 'white',
                      padding: '0.25rem 0.5rem',
                      borderRadius: '12px',
                      fontSize: '0.8rem',
                      fontWeight: 500
                    }}>
                      {workloadStatus.text}
                    </span>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>

      {/* 参加プロジェクト一覧（操作カラム削除・行クリック遷移対応） */}
      <div style={{
        backgroundColor: 'white',
        padding: '2rem',
        borderRadius: '8px',
        marginTop: '2rem',
        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)'
      }}>
        <h3 style={{ 
          marginBottom: '1.5rem', 
          color: '#1976d2',
          borderBottom: '2px solid #e0e0e0',
          paddingBottom: '0.5rem'
        }}>
          参画プロジェクト
        </h3>

        {employeeProjects.length > 0 ? (
          <div className="projects-table">
            <table>
              <thead>
                <tr>
                  <th>プロジェクト名</th>
                  <th>クライアント名</th>
                  <th>役割</th>
                  <th>稼働率</th>
                  <th>参加期間</th>
                  <th>プロジェクト状況</th>
                </tr>
              </thead>
              <tbody>
                {employeeProjects.map((proj) => (
                  <tr 
                    key={proj.project_id}
                    onClick={() => handleProjectRowClick(proj.project_id)}
                    style={{
                      cursor: 'pointer',
                      transition: 'background-color 0.2s ease'
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.backgroundColor = '#f0f7ff';
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.backgroundColor = '';
                    }}
                  >
                    <td style={{ fontWeight: 500, color: '#1976d2' }}>
                      {proj.project?.project_name}
                    </td>
                    <td>{proj.project?.client_name || '-'}</td>
                    <td>{proj.role_in_project || '-'}</td>
                    <td>
                      <span style={{
                        fontWeight: 500,
                        color: (proj.allocation_ratio || 0) > 0.8 ? '#d32f2f' : '#333'
                      }}>
                        {((proj.allocation_ratio || 0) * 100).toFixed(0)}%
                      </span>
                    </td>
                    <td>
                      <div style={{ fontSize: '0.9rem' }}>
                        <div>参加: {proj.join_date || '不明'}</div>
                        {proj.leave_date && (
                          <div>退任: {proj.leave_date}</div>
                        )}
                      </div>
                    </td>
                    <td>
                      <span className={`status ${proj.project?.status_code?.toLowerCase()}`}>
                        {proj.project?.status_code === 'ACTIVE' ? 'アクティブ' : '非アクティブ'}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <div className="empty-state">
            この社員はまだプロジェクトに参加していません。
          </div>
        )}
      </div>
    </div>
  );
};

export default EmployeeDetail;

================================================================================

FILE: frontend/src/components/WBSView.tsx
-----------------------------------------
import React, { useState, useMemo, useRef, useCallback } from 'react';
import { FaPlus, FaFilePdf, FaTimes, FaEdit, FaSave, FaTasks, FaCog, FaExpand, FaCompress } from 'react-icons/fa';
import { WBSTask, Employee, ProjectMember, Project, TaskChecklist } from '../types/index';
import { taskAPI, checklistAPI } from '../utils/api';
import { exportWBSToPDF } from '../utils/pdf-utils';

interface Props {
  tasks: WBSTask[];
  employees: Employee[];
  members: ProjectMember[];
  project?: Project;
  onUpdateTask: () => void;
  onScheduleChange: () => void;
  projectStartDate?: string;
  projectEndDate?: string;
}

const WBSView: React.FC<Props> = ({ 
  tasks, 
  employees, 
  members,
  project,
  onUpdateTask, 
  onScheduleChange,
  projectStartDate, 
  projectEndDate 
}) => {
  const [selectedTask, setSelectedTask] = useState<WBSTask | null>(null);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [isExportingPDF, setIsExportingPDF] = useState(false);
  
  // 表示設定の状態
  const [dateCellWidth, setDateCellWidth] = useState(30); // 10-100px
  const [rowHeight, setRowHeight] = useState(45); // 30-80px
  const [showSettings, setShowSettings] = useState(false);
  
  const [newTask, setNewTask] = useState({
    task_name: '',
    description: '',
    estimated_duration: 1,
    task_category: '', // フェーズの代わりにカテゴリとして使用
    assignee_id: '',
    milestone_flag: false
  });

  // チェックリスト管理用の状態
  const [checklistItems, setChecklistItems] = useState<TaskChecklist[]>([]);
  const [newChecklistItem, setNewChecklistItem] = useState('');
  const [editingChecklist, setEditingChecklist] = useState<number | null>(null);
  const [editingChecklistText, setEditingChecklistText] = useState('');

  // タスク詳細パネル用の状態
  const [isEditing, setIsEditing] = useState(false);
  const [editData, setEditData] = useState({
    task_name: '',
    category: '',
    description: '',
    estimated_duration: 1,
    status_code: 'NOT_STARTED',
    assignee_id: ''
  });

  const ganttContainerRef = useRef<HTMLDivElement>(null);
  const leftBodyRef = useRef<HTMLDivElement>(null);
  const rightBodyRef = useRef<HTMLDivElement>(null);
  const rightHeaderRef = useRef<HTMLDivElement>(null);

  // 既存タスクからカテゴリを抽出
  const existingCategories = useMemo(() => {
    const categories = new Set<string>();
    tasks.forEach(task => {
      if (task.description && task.description.startsWith('[') && task.description.includes(']')) {
        const match = task.description.match(/^\[([^\]]+)\]/);
        if (match) {
          categories.add(match[1]);
        }
      }
    });
    return Array.from(categories).sort();
  }, [tasks]);

  // カテゴリ色を生成
  const getCategoryColor = (category: string) => {
    const colors = ['#1976d2', '#388e3c', '#f57c00', '#7b1fa2', '#d32f2f', '#0097a7', '#5d4037'];
    const hash = category.split('').reduce((a, b) => a + b.charCodeAt(0), 0);
    return colors[hash % colors.length];
  };

  // タスクからカテゴリを抽出
  const getTaskCategory = (task: WBSTask) => {
    if (task.description && task.description.startsWith('[') && task.description.includes(']')) {
      const match = task.description.match(/^\[([^\]]+)\]/);
      return match ? match[1] : null;
    }
    return null;
  };

  // 説明からカテゴリ部分を除去
  const getDescriptionWithoutCategory = (description: string) => {
    if (description && description.startsWith('[') && description.includes(']')) {
      const match = description.match(/^\[([^\]]+)\]\s*(.*)/);
      return match ? match[2] : description;
    }
    return description;
  };

  // 選択されたタスクのチェックリストを読み込み
  React.useEffect(() => {
    if (selectedTask) {
      setChecklistItems([...selectedTask.checklist_items].sort((a, b) => a.sort_order - b.sort_order));
      
      // 編集データを初期化
      const taskCategory = getTaskCategory(selectedTask);
      const descriptionWithoutCategory = getDescriptionWithoutCategory(selectedTask.description || '');
      
      setEditData({
        task_name: selectedTask.task_name,
        category: taskCategory || '',
        description: descriptionWithoutCategory,
        estimated_duration: selectedTask.estimated_duration || 1,
        status_code: selectedTask.status_code || 'NOT_STARTED',
        assignee_id: selectedTask.assignee?.employee_id?.toString() || ''
      });
      setIsEditing(false);
    }
  }, [selectedTask]);

  // プロジェクトメンバーのみをフィルタ
  const projectMembers = useMemo(() => {
    return members.map(member => ({
      ...member.employee!,
      allocation_ratio: member.allocation_ratio || 1.0
    }));
  }, [members]);

  // タスクをソート（修正版：開始日優先）
  const sortedTasks = useMemo(() => {
    return [...tasks].sort((a, b) => {
      // 1. 開始日でソート（早い順）
      const startDateA = a.start_date ? new Date(a.start_date) : null;
      const startDateB = b.start_date ? new Date(b.start_date) : null;
      
      if (startDateA && startDateB) {
        const startDiff = startDateA.getTime() - startDateB.getTime();
        if (startDiff !== 0) {
          return startDiff;
        }
        
        // 2. 開始日が同じ場合、終了日でソート（早い順）
        const endDateA = a.end_date ? new Date(a.end_date) : null;
        const endDateB = b.end_date ? new Date(b.end_date) : null;
        
        if (endDateA && endDateB) {
          const endDiff = endDateA.getTime() - endDateB.getTime();
          if (endDiff !== 0) {
            return endDiff;
          }
        } else if (endDateA && !endDateB) {
          return -1;
        } else if (!endDateA && endDateB) {
          return 1;
        }
        
        // 3. 開始日・終了日が同じ場合、タスクIDでソート
        return a.task_id - b.task_id;
      }
      
      // 開始日がない場合の処理
      if (startDateA && !startDateB) return -1;
      if (!startDateA && startDateB) return 1;
      
      // 両方開始日がない場合、終了日でソート
      const endDateA = a.end_date ? new Date(a.end_date) : null;
      const endDateB = b.end_date ? new Date(b.end_date) : null;
      
      if (endDateA && endDateB) {
        const endDiff = endDateA.getTime() - endDateB.getTime();
        if (endDiff !== 0) {
          return endDiff;
        }
      } else if (endDateA && !endDateB) {
        return -1;
      } else if (!endDateA && endDateB) {
        return 1;
      }
      
      // 最終的にタスクIDでソート
      return a.task_id - b.task_id;
    });
  }, [tasks]);

  // 日付範囲を計算
  const dateRange = useMemo(() => {
    let startDate: Date;
    let endDate: Date;
    let projectEndDateObj: Date | null = null;
    
    if (projectStartDate && projectEndDate) {
      startDate = new Date(projectStartDate);
      endDate = new Date(projectEndDate);
      projectEndDateObj = new Date(projectEndDate);
    } else if (sortedTasks.length > 0) {
      const allDates = sortedTasks.flatMap(task => [task.start_date, task.end_date, task.earliest_start, task.deadline])
        .filter(Boolean)
        .map(dateStr => new Date(dateStr!));
      
      if (allDates.length > 0) {
        startDate = new Date(Math.min(...allDates.map(d => d.getTime())));
        endDate = new Date(Math.max(...allDates.map(d => d.getTime())));
      } else {
        startDate = new Date();
        endDate = new Date();
        endDate.setDate(startDate.getDate() + 30);
      }
    } else {
      startDate = new Date();
      endDate = new Date();
      endDate.setDate(startDate.getDate() + 30);
    }
    
    // タスクの最大終了日を取得
    const taskEndDates = sortedTasks
      .map(task => task.end_date ? new Date(task.end_date) : null)
      .filter((date): date is Date => date !== null);
    
    const maxTaskEndDate = taskEndDates.length > 0
      ? taskEndDates.reduce((max, date) => date > max ? date : max, endDate)
      : endDate;
    
    // プロジェクト終了日を超えるタスクがある場合、表示範囲を拡張
    if (projectEndDateObj && maxTaskEndDate > projectEndDateObj) {
      endDate = maxTaskEndDate;
    }
    
    const adjustedStartDate = new Date(startDate);
    adjustedStartDate.setDate(startDate.getDate() - 7);
    
    const adjustedEndDate = new Date(endDate);
    adjustedEndDate.setDate(endDate.getDate() + 7);
    
    const dates = [];
    const currentDate = new Date(adjustedStartDate);
    while (currentDate <= adjustedEndDate) {
      dates.push(new Date(currentDate));
      currentDate.setDate(currentDate.getDate() + 1);
    }
    
    return dates;
  }, [sortedTasks, projectStartDate, projectEndDate]);

  // 年月情報を計算（新機能）
  const dateHeaderInfo = useMemo(() => {
    const yearBlocks: Array<{ year: number; startIndex: number; length: number }> = [];
    const monthBlocks: Array<{ year: number; month: number; startIndex: number; length: number }> = [];
    
    let currentYear = -1;
    let currentMonth = -1;
    let yearStart = 0;
    let monthStart = 0;
    
    dateRange.forEach((date, index) => {
      const year = date.getFullYear();
      const month = date.getMonth();
      
      // 年の区切り処理
      if (year !== currentYear) {
        if (currentYear !== -1) {
          yearBlocks.push({
            year: currentYear,
            startIndex: yearStart,
            length: index - yearStart
          });
        }
        currentYear = year;
        yearStart = index;
      }
      
      // 月の区切り処理
      if (year !== Math.floor(currentMonth / 12) || month !== currentMonth % 12) {
        if (currentMonth !== -1) {
          monthBlocks.push({
            year: Math.floor(currentMonth / 12),
            month: currentMonth % 12,
            startIndex: monthStart,
            length: index - monthStart
          });
        }
        currentMonth = year * 12 + month;
        monthStart = index;
      }
      
      // 最後の処理
      if (index === dateRange.length - 1) {
        yearBlocks.push({
          year: currentYear,
          startIndex: yearStart,
          length: index - yearStart + 1
        });
        monthBlocks.push({
          year: Math.floor(currentMonth / 12),
          month: currentMonth % 12,
          startIndex: monthStart,
          length: index - monthStart + 1
        });
      }
    });
    
    return { yearBlocks, monthBlocks };
  }, [dateRange]);

  const today = new Date().toDateString();

  // タスク期間のポジション計算
  const getTaskPosition = (task: WBSTask) => {
    if (!task.start_date || !task.end_date) return null;
    
    const taskStart = new Date(task.start_date);
    const taskEnd = new Date(task.end_date);
    
    const startIndex = dateRange.findIndex(date => 
      date.toDateString() === taskStart.toDateString()
    );
    
    const durationDays = Math.ceil((taskEnd.getTime() - taskStart.getTime()) / (1000 * 60 * 60 * 24)) + 1;
    
    if (startIndex === -1) return null;
    
    return {
      left: startIndex * dateCellWidth,
      width: Math.max(durationDays * dateCellWidth, 25)
    };
  };

  // プロジェクト期間外かどうかを判定
  const isOutsideProjectPeriod = (date: Date) => {
    if (!projectStartDate || !projectEndDate) return false;
    
    const projectStart = new Date(projectStartDate);
    const projectEnd = new Date(projectEndDate);
    
    return date < projectStart || date > projectEnd;
  };

  // PDF出力処理
  const handleExportPDF = async () => {
    if (!ganttContainerRef.current) {
      alert('ガントチャートが表示されていません。');
      return;
    }

    if (sortedTasks.length === 0) {
      alert('出力するタスクがありません。');
      return;
    }

    setIsExportingPDF(true);
    
    try {
      await exportWBSToPDF(ganttContainerRef.current, {
        title: project ? `${project.project_name} - WBSガントチャート` : 'WBSガントチャート',
        project: project,
        orientation: 'landscape',
        format: 'a3'
      });
    } catch (error) {
      console.error('PDF出力エラー:', error);
      alert('PDF出力に失敗しました。詳細はコンソールを確認してください。');
    } finally {
      setIsExportingPDF(false);
    }
  };

  // スクロール同期
  const handleLeftScroll = useCallback((e: React.UIEvent<HTMLDivElement>) => {
    if (rightBodyRef.current) {
      rightBodyRef.current.scrollTop = e.currentTarget.scrollTop;
    }
  }, []);

  const handleRightScroll = useCallback((e: React.UIEvent<HTMLDivElement>) => {
    if (leftBodyRef.current) {
      leftBodyRef.current.scrollTop = e.currentTarget.scrollTop;
    }
    
    if (rightHeaderRef.current) {
      rightHeaderRef.current.scrollLeft = e.currentTarget.scrollLeft;
    }
  }, []);

  const handleHeaderScroll = useCallback((e: React.UIEvent<HTMLDivElement>) => {
    if (rightBodyRef.current) {
      rightBodyRef.current.scrollLeft = e.currentTarget.scrollLeft;
    }
  }, []);

  // ステータス更新
  const handleStatusUpdate = async (taskId: number, newStatus: string) => {
    try {
      await taskAPI.update(taskId, { status_code: newStatus });
      onScheduleChange();
      await onUpdateTask();
    } catch (error) {
      console.error('ステータス更新エラー:', error);
    }
  };

  // タスク作成（必須項目バリデーション追加）
  const handleCreateTask = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      // バリデーション（予定工数・担当者必須化）
      if (!newTask.task_name.trim()) {
        alert('タスク名は必須です。');
        return;
      }

      if (!newTask.estimated_duration || newTask.estimated_duration <= 0) {
        alert('予定工数は必須です。0より大きい値を入力してください。');
        return;
      }

      if (!newTask.assignee_id) {
        alert('担当者は必須です。担当者を選択してください。');
        return;
      }

      const projectId = sortedTasks.length > 0 ? sortedTasks[0].project_id : project!.project_id;
      
      // カテゴリを説明の先頭に追加
      const description = newTask.task_category 
        ? `[${newTask.task_category}] ${newTask.description}`
        : newTask.description;
      
      await taskAPI.create({
        ...newTask,
        description,
        project_id: projectId,
        assignee_id: newTask.assignee_id ? Number(newTask.assignee_id) : undefined
      });
      
      onScheduleChange();
      
      setNewTask({
        task_name: '',
        description: '',
        estimated_duration: 1,
        task_category: '',
        assignee_id: '',
        milestone_flag: false
      });
      setShowCreateForm(false);
      
      await onUpdateTask();
    } catch (error) {
      console.error('タスク作成エラー:', error);
      alert('タスクの作成に失敗しました。');
    }
  };

  // タスク詳細更新（必須項目バリデーション追加）
  const handleSaveTask = async () => {
    if (!selectedTask) return;
    
    try {
      // バリデーション（予定工数・担当者必須化）
      if (!editData.task_name.trim()) {
        alert('タスク名は必須です。');
        return;
      }

      if (!editData.estimated_duration || editData.estimated_duration <= 0) {
        alert('予定工数は必須です。0より大きい値を入力してください。');
        return;
      }

      if (!editData.assignee_id) {
        alert('担当者は必須です。担当者を選択してください。');
        return;
      }

      // カテゴリを説明の先頭に追加
      const finalDescription = editData.category.trim() 
        ? `[${editData.category.trim()}] ${editData.description}`
        : editData.description;
      
      await taskAPI.update(selectedTask.task_id, {
        task_name: editData.task_name,
        description: finalDescription,
        estimated_duration: editData.estimated_duration,
        status_code: editData.status_code,
        ...(editData.assignee_id && { assignee_id: Number(editData.assignee_id) })
      });
      
      setIsEditing(false);
      onScheduleChange();
      await onUpdateTask();
    } catch (error) {
      console.error('タスク更新エラー:', error);
      alert('タスクの更新に失敗しました。');
    }
  };

  // チェックリスト追加
  const handleAddChecklistItem = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newChecklistItem.trim() || !selectedTask) return;
    
    try {
      const newItem = await checklistAPI.create({
        task_id: selectedTask.task_id,
        item_name: newChecklistItem,
        is_done: false,
        sort_order: checklistItems.length
      });
      
      setChecklistItems(prev => [...prev, newItem]);
      setNewChecklistItem('');
      
      await onUpdateTask();
    } catch (error) {
      console.error('チェックリスト作成エラー:', error);
      alert('チェックリストアイテムの追加に失敗しました。');
    }
  };

  // チェックリスト状態切り替え
  const handleChecklistToggle = async (checklistId: number, isDone: boolean) => {
    try {
      setChecklistItems(prev => 
        prev.map(item => 
          item.checklist_id === checklistId 
            ? { ...item, is_done: isDone }
            : item
        )
      );
      
      await checklistAPI.update(checklistId, { is_done: isDone });
      await onUpdateTask();
    } catch (error) {
      console.error('チェックリスト更新エラー:', error);
      
      setChecklistItems(prev => 
        prev.map(item => 
          item.checklist_id === checklistId 
            ? { ...item, is_done: !isDone }
            : item
        )
      );
      
      alert('チェックリストの更新に失敗しました。');
    }
  };

  // チェックリスト編集開始
  const handleStartEditChecklist = (item: TaskChecklist) => {
    setEditingChecklist(item.checklist_id);
    setEditingChecklistText(item.item_name);
  };

  // チェックリスト編集保存
  const handleSaveEditChecklist = async (checklistId: number) => {
    try {
      await checklistAPI.update(checklistId, { item_name: editingChecklistText });
      
      setChecklistItems(prev => 
        prev.map(item => 
          item.checklist_id === checklistId 
            ? { ...item, item_name: editingChecklistText }
            : item
        )
      );
      
      setEditingChecklist(null);
      setEditingChecklistText('');
      
      await onUpdateTask();
    } catch (error) {
      console.error('チェックリスト編集エラー:', error);
      alert('チェックリストの編集に失敗しました。');
    }
  };

  // タスク選択処理
  const handleTaskSelect = (task: WBSTask) => {
    setSelectedTask(selectedTask?.task_id === task.task_id ? null : task);
  };

  // パネル外クリック処理
  const handleBackgroundClick = (e: React.MouseEvent) => {
    // パネル内クリックは無視
    if (e.target !== e.currentTarget) return;
    setSelectedTask(null);
  };

  // 曜日を日本語で取得
  const getDayOfWeek = (date: Date) => {
    const days = ['日', '月', '火', '水', '木', '金', '土'];
    return days[date.getDay()];
  };

  // 進捗率に応じた色
  const getProgressColor = (progress: number, status: string) => {
    if (status === 'COMPLETED') return '#4CAF50';
    if (status === 'IN_PROGRESS') return '#FF9800';
    return '#2196F3';
  };

  // 表示設定のプリセット
  const applyPreset = (preset: 'compact' | 'normal' | 'expanded') => {
    switch (preset) {
      case 'compact':
        setDateCellWidth(20);
        setRowHeight(35);
        break;
      case 'normal':
        setDateCellWidth(30);
        setRowHeight(45);
        break;
      case 'expanded':
        setDateCellWidth(50);
        setRowHeight(60);
        break;
    }
  };

  const LEFT_COLUMNS_WIDTH = 570;
  const DETAIL_PANEL_WIDTH = 450;
  const HEADER_HEIGHT = 90; // 3段ヘッダーの高さ

  return (
    <div 
      className="excel-wbs-view"
      onClick={handleBackgroundClick}
      style={{ position: 'relative' }}
    >
      {/* WBS ヘッダー */}
      <div className="wbs-header">
        <div>
          <button 
            className="btn btn-primary"
            onClick={(e) => {
              e.stopPropagation();
              setShowCreateForm(true);
            }}
            disabled={isExportingPDF}
            style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}
          >
            <FaPlus />
            タスク追加
          </button>
        </div>
        <div style={{ display: 'flex', gap: '1rem', alignItems: 'center', flexWrap: 'wrap' }}>
          {/* 表示設定ボタン */}
          <button
            className="btn btn-secondary"
            onClick={() => setShowSettings(!showSettings)}
            style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}
          >
            <FaCog />
            表示設定
          </button>
          
          <div className="wbs-info">
            <span>総タスク数: {sortedTasks.length}</span>
          </div>
        </div>
      </div>

      {/* 表示設定パネル */}
      {showSettings && (
        <div style={{
          backgroundColor: 'white',
          border: '1px solid #e0e0e0',
          borderRadius: '8px',
          padding: '1.5rem',
          marginBottom: '1rem',
          boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
        }}>
          <h4 style={{ margin: '0 0 1rem 0', color: '#1976d2' }}>表示設定</h4>
          
          {/* プリセットボタン */}
          <div style={{ marginBottom: '1.5rem' }}>
            <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: 600 }}>
              プリセット:
            </label>
            <div style={{ display: 'flex', gap: '0.5rem' }}>
              <button
                onClick={() => applyPreset('compact')}
                style={{
                  padding: '0.5rem 1rem',
                  backgroundColor: dateCellWidth === 20 && rowHeight === 35 ? '#1976d2' : '#f5f5f5',
                  color: dateCellWidth === 20 && rowHeight === 35 ? 'white' : '#333',
                  border: '1px solid #ddd',
                  borderRadius: '4px',
                  cursor: 'pointer',
                  fontSize: '0.9rem'
                }}
              >
                <FaCompress style={{ marginRight: '0.5rem' }} />
                コンパクト
              </button>
              <button
                onClick={() => applyPreset('normal')}
                style={{
                  padding: '0.5rem 1rem',
                  backgroundColor: dateCellWidth === 30 && rowHeight === 45 ? '#1976d2' : '#f5f5f5',
                  color: dateCellWidth === 30 && rowHeight === 45 ? 'white' : '#333',
                  border: '1px solid #ddd',
                  borderRadius: '4px',
                  cursor: 'pointer',
                  fontSize: '0.9rem'
                }}
              >
                標準
              </button>
              <button
                onClick={() => applyPreset('expanded')}
                style={{
                  padding: '0.5rem 1rem',
                  backgroundColor: dateCellWidth === 50 && rowHeight === 60 ? '#1976d2' : '#f5f5f5',
                  color: dateCellWidth === 50 && rowHeight === 60 ? 'white' : '#333',
                  border: '1px solid #ddd',
                  borderRadius: '4px',
                  cursor: 'pointer',
                  fontSize: '0.9rem'
                }}
              >
                <FaExpand style={{ marginRight: '0.5rem' }} />
                拡大
              </button>
            </div>
          </div>

          {/* 詳細設定 */}
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '2rem' }}>
            <div>
              <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: 600 }}>
                1日の表示幅: {dateCellWidth}px
              </label>
              <input
                type="range"
                min="10"
                max="100"
                step="5"
                value={dateCellWidth}
                onChange={(e) => setDateCellWidth(Number(e.target.value))}
                style={{ width: '100%' }}
              />
              <div style={{ display: 'flex', justifyContent: 'space-between', fontSize: '0.8rem', color: '#666', marginTop: '0.25rem' }}>
                <span>10px</span>
                <span>100px</span>
              </div>
            </div>
            <div>
              <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: 600 }}>
                行の高さ: {rowHeight}px
              </label>
              <input
                type="range"
                min="30"
                max="80"
                step="5"
                value={rowHeight}
                onChange={(e) => setRowHeight(Number(e.target.value))}
                style={{ width: '100%' }}
              />
              <div style={{ display: 'flex', justifyContent: 'space-between', fontSize: '0.8rem', color: '#666', marginTop: '0.25rem' }}>
                <span>30px</span>
                <span>80px</span>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* PDF出力ステータス表示 */}
      {isExportingPDF && (
        <div style={{
          padding: '0.75rem 1rem',
          backgroundColor: '#e3f2fd',
          border: '1px solid #bbdefb',
          borderRadius: '4px',
          marginBottom: '1rem',
          color: '#1976d2',
          fontSize: '0.9rem',
          display: 'flex',
          alignItems: 'center',
          gap: '0.5rem'
        }}>
          <span style={{ fontSize: '18px' }}>🔄</span>
          <span>PDFを生成中です。画面の操作はお控えください...</span>
        </div>
      )}

      {/* タスク作成フォーム */}
      {showCreateForm && (
        <div className="modal-overlay" onClick={(e) => e.stopPropagation()}>
          <div className="modal">
            <h3>新しいタスクを追加</h3>
            <form onSubmit={handleCreateTask}>
              <div className="form-group">
                <label>タスク名 *</label>
                <input
                  type="text"
                  required
                  value={newTask.task_name}
                  onChange={(e) => setNewTask({...newTask, task_name: e.target.value})}
                  placeholder="例: 要件定義書作成"
                />
              </div>
              <div className="form-row">
                <div className="form-group">
                  <label>予定工数（人日）*</label>
                  <input
                    type="number"
                    min="0.1"
                    step="0.1"
                    required
                    value={newTask.estimated_duration}
                    onChange={(e) => setNewTask({...newTask, estimated_duration: Number(e.target.value)})}
                  />
                </div>
                <div className="form-group">
                  <label>担当者 *</label>
                  <select
                    required
                    value={newTask.assignee_id}
                    onChange={(e) => setNewTask({...newTask, assignee_id: e.target.value})}
                  >
                    <option value="">選択してください</option>
                    {projectMembers.map(member => (
                      <option key={member.employee_id} value={member.employee_id}>
                        {member.employee_name} (稼働率: {(member.allocation_ratio * 100).toFixed(0)}%)
                      </option>
                    ))}
                  </select>
                  {projectMembers.length === 0 && (
                    <small style={{ color: '#ff9800', fontSize: '0.8rem' }}>
                      プロジェクトにメンバーが登録されていません。メンバー管理タブから追加してください。
                    </small>
                  )}
                </div>
              </div>
              <div className="form-group">
                <label>カテゴリ</label>
                <input
                  type="text"
                  list="category-suggestions"
                  value={newTask.task_category}
                  onChange={(e) => setNewTask({...newTask, task_category: e.target.value})}
                  placeholder="例: 要件定義、開発、テスト"
                />
                <datalist id="category-suggestions">
                  {existingCategories.map(category => (
                    <option key={category} value={category} />
                  ))}
                  <option value="要件定義" />
                  <option value="設計" />
                  <option value="開発" />
                  <option value="テスト" />
                  <option value="リリース" />
                </datalist>
              </div>
              <div className="form-group">
                <label>説明</label>
                <textarea
                  value={newTask.description}
                  onChange={(e) => setNewTask({...newTask, description: e.target.value})}
                  placeholder="タスクの詳細説明"
                />
              </div>
              <div className="form-group">
                <label className="checkbox-label">
                  <input
                    type="checkbox"
                    checked={newTask.milestone_flag}
                    onChange={(e) => setNewTask({...newTask, milestone_flag: e.target.checked})}
                  />
                  マイルストーンとして設定
                </label>
              </div>
              <div className="form-actions">
                <button type="submit" className="btn btn-primary">
                  作成
                </button>
                <button 
                  type="button" 
                  className="btn btn-secondary"
                  onClick={() => setShowCreateForm(false)}
                >
                  キャンセル
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      <div style={{ display: 'flex', position: 'relative' }}>
        {/* ガントチャートテーブル */}
        <div 
          ref={ganttContainerRef}
          style={{
            height: 'calc(100vh - 280px)',
            border: '1px solid #e0e0e0',
            borderRadius: '4px',
            overflow: 'hidden',
            background: 'white',
            display: 'flex',
            flexDirection: 'column',
            width: selectedTask ? `calc(100% - ${DETAIL_PANEL_WIDTH}px)` : '100%',
            transition: 'width 0.3s ease'
          }}
          data-pdf-export="gantt-chart"
        >
          {/* 3段階ヘッダー行 */}
          <div style={{
            display: 'flex',
            height: `${HEADER_HEIGHT}px`,
            backgroundColor: '#f8f9fa',
            borderBottom: '2px solid #e0e0e0',
            position: 'sticky',
            top: 0,
            zIndex: 100
          }}>
            {/* 左側固定ヘッダー */}
            <div style={{
              width: `${LEFT_COLUMNS_WIDTH}px`,
              display: 'flex',
              flexDirection: 'column',
              borderRight: '2px solid #e0e0e0',
              backgroundColor: '#f8f9fa',
              position: 'sticky',
              left: 0,
              zIndex: 101
            }}>
              {/* 年の部分（左側は空） */}
              <div style={{ height: '30px', borderBottom: '1px solid #e0e0e0' }}></div>
              {/* 月の部分（左側は空） */}
              <div style={{ height: '30px', borderBottom: '1px solid #e0e0e0' }}></div>
              {/* 列見出し */}
              <div style={{ 
                height: '30px',
                display: 'flex'
              }}>
                <div style={{ 
                  width: '120px',
                  padding: '0.5rem', 
                  borderRight: '1px solid #e0e0e0', 
                  fontSize: '0.8rem', 
                  fontWeight: 600,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center'
                }}>
                  カテゴリ
                </div>
                <div style={{ 
                  width: '170px',
                  padding: '0.5rem', 
                  borderRight: '1px solid #e0e0e0', 
                  fontSize: '0.8rem', 
                  fontWeight: 600,
                  display: 'flex',
                  alignItems: 'center'
                }}>
                  タスク名
                </div>
                <div style={{ 
                  width: '90px', 
                  padding: '0.5rem', 
                  borderRight: '1px solid #e0e0e0', 
                  fontSize: '0.8rem', 
                  fontWeight: 600,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center'
                }}>
                  担当者
                </div>
                <div style={{ 
                  width: '80px', 
                  padding: '0.5rem', 
                  borderRight: '1px solid #e0e0e0', 
                  fontSize: '0.8rem', 
                  fontWeight: 600,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center'
                }}>
                  進捗
                </div>
                <div style={{ 
                  width: '110px', 
                  padding: '0.5rem', 
                  fontSize: '0.8rem', 
                  fontWeight: 600,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center'
                }}>
                  ステータス
                </div>
              </div>
            </div>

            {/* 右側日付ヘッダー */}
            <div 
              ref={rightHeaderRef}
              onScroll={handleHeaderScroll}
              style={{
                flex: 1,
                overflow: 'auto',
                display: 'flex',
                flexDirection: 'column',
                minWidth: 0
              }}
            >
              {/* 年の表示 */}
              <div style={{ 
                height: '30px', 
                display: 'flex', 
                borderBottom: '1px solid #e0e0e0',
                backgroundColor: '#e8f4ff'
              }}>
                {dateHeaderInfo.yearBlocks.map((yearBlock, index) => (
                  <div 
                    key={`year-${index}`} 
                    style={{ 
                      minWidth: `${yearBlock.length * dateCellWidth}px`,
                      width: `${yearBlock.length * dateCellWidth}px`,
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      borderRight: index < dateHeaderInfo.yearBlocks.length - 1 ? '2px solid #1976d2' : '1px solid #e0e0e0',
                      fontSize: '0.9rem',
                      fontWeight: 700,
                      color: '#1976d2',
                      flexShrink: 0,
                      backgroundColor: '#e8f4ff'
                    }}
                  >
                    {yearBlock.year}年
                  </div>
                ))}
              </div>
              
              {/* 月の表示 */}
              <div style={{ 
                height: '30px', 
                display: 'flex', 
                borderBottom: '1px solid #e0e0e0',
                backgroundColor: '#f0f8ff'
              }}>
                {dateHeaderInfo.monthBlocks.map((monthBlock, index) => (
                  <div 
                    key={`month-${index}`} 
                    style={{ 
                      minWidth: `${monthBlock.length * dateCellWidth}px`,
                      width: `${monthBlock.length * dateCellWidth}px`,
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      borderRight: '1px solid #ddd',
                      fontSize: '0.8rem',
                      fontWeight: 600,
                      color: '#1976d2',
                      flexShrink: 0,
                      backgroundColor: '#f0f8ff'
                    }}
                  >
                    {monthBlock.month + 1}月
                  </div>
                ))}
              </div>
              
              {/* 日・曜日の表示 */}
              <div style={{ height: '30px', display: 'flex' }}>
                {dateRange.map((date, index) => {
                  const isWeekend = date.getDay() === 0 || date.getDay() === 6;
                  const outsideProject = isOutsideProjectPeriod(date);
                  
                  return (
                    <div 
                      key={index} 
                      style={{ 
                        minWidth: `${dateCellWidth}px`,
                        width: `${dateCellWidth}px`,
                        padding: '0.25rem',
                        borderRight: index % 7 === 6 ? '2px solid #1976d2' : '1px solid #e0e0e0',
                        textAlign: 'center',
                        fontSize: dateCellWidth >= 30 ? '0.7rem' : '0.6rem',
                        backgroundColor: outsideProject 
                          ? '#f5f5f5'
                          : isWeekend ? '#ffebee' : '#f8f9fa',
                        display: 'flex',
                        flexDirection: 'column',
                        justifyContent: 'center',
                        alignItems: 'center',
                        flexShrink: 0,
                        opacity: outsideProject ? 0.6 : 1
                      }}
                    >
                      <div style={{ fontWeight: 600, color: outsideProject ? '#999' : '#333', lineHeight: '1' }}>
                        {date.getDate()}
                      </div>
                      {dateCellWidth >= 25 && (
                        <div style={{ color: outsideProject ? '#999' : '#666', fontSize: dateCellWidth >= 30 ? '0.6rem' : '0.5rem', lineHeight: '1' }}>
                          {getDayOfWeek(date)}
                        </div>
                      )}
                    </div>
                  );
                })}
              </div>
            </div>
          </div>

          {/* ボディ部分 */}
          <div style={{ flex: 1, display: 'flex', overflow: 'hidden' }}>
            {/* 左側固定列 */}
            <div 
              ref={leftBodyRef}
              onScroll={handleLeftScroll}
              style={{
                width: `${LEFT_COLUMNS_WIDTH}px`,
                overflowY: 'auto',
                overflowX: 'hidden',
                borderRight: '2px solid #e0e0e0',
                backgroundColor: 'white',
                position: 'sticky',
                left: 0,
                zIndex: 10
              }}
            >
              {sortedTasks.map((task, taskIndex) => {
                const progress = task.checklist_progress;
                const isSelected = selectedTask?.task_id === task.task_id;
                const taskCategory = getTaskCategory(task);
                
                return (
                  <div 
                    key={task.task_id} 
                    style={{ 
                      display: 'flex',
                      height: `${rowHeight}px`,
                      minHeight: `${rowHeight}px`,
                      borderBottom: '1px solid #e0e0e0',
                      cursor: 'pointer',
                      backgroundColor: isSelected ? '#e3f2fd' : 'white'
                    }}
                    onClick={(e) => {
                      e.stopPropagation();
                      handleTaskSelect(task);
                    }}
                  >
                    {/* カテゴリ列 */}
                    <div style={{ 
                      width: '120px',
                      borderRight: '1px solid #e0e0e0',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '0.75rem'
                    }}>
                      {taskCategory && (
                        <div style={{
                          backgroundColor: getCategoryColor(taskCategory),
                          color: 'white',
                          padding: '0.2rem 0.4rem',
                          fontSize: rowHeight >= 50 ? '0.7rem' : '0.65rem',
                          whiteSpace: 'nowrap',
                          overflow: 'hidden',
                          textOverflow: 'ellipsis',
                          width: '100%',
                          height: '100%',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          fontWeight: 'bold'
                        }}>
                          {taskCategory}
                        </div>
                      )}
                    </div>
                    
                    {/* タスク名列 */}
                    <div style={{ 
                      width: '170px',
                      padding: '0.5rem', 
                      borderRight: '1px solid #e0e0e0',
                      display: 'flex',
                      alignItems: 'center',
                      fontSize: rowHeight >= 50 ? '0.8rem' : '0.75rem'
                    }}>
                      <span style={{ 
                        color: '#1976d2', 
                        fontWeight: 500,
                        overflow: 'hidden',
                        textOverflow: 'ellipsis',
                        whiteSpace: 'nowrap'
                      }}>
                        {task.task_name}
                        {task.milestone_flag && (
                          <span style={{ marginLeft: '0.25rem' }}>🏁</span>
                        )}
                      </span>
                    </div>
                    
                    {/* 担当者列 */}
                    <div style={{ 
                      width: '90px', 
                      padding: '0.5rem', 
                      borderRight: '1px solid #e0e0e0',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: rowHeight >= 50 ? '0.7rem' : '0.65rem',
                      color: '#666'
                    }}>
                      {task.assignee ? (
                        <div style={{ textAlign: 'center' }}>
                          <div style={{ 
                            overflow: 'hidden', 
                            textOverflow: 'ellipsis', 
                            whiteSpace: 'nowrap',
                            maxWidth: '80px'
                          }}>
                            {task.assignee.employee_name}
                          </div>
                        </div>
                      ) : '未割当'}
                    </div>
                    
                    {/* 進捗列 */}
                    <div style={{ 
                      width: '80px', 
                      padding: '0.5rem', 
                      borderRight: '1px solid #e0e0e0',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      flexDirection: 'column',
                      gap: '0.2rem'
                    }}>
                      <div style={{ 
                        width: '50px', 
                        height: Math.max(4, rowHeight * 0.08), 
                        backgroundColor: '#e0e0e0', 
                        borderRadius: '2px', 
                        overflow: 'hidden' 
                      }}>
                        <div style={{
                          height: '100%',
                          width: `${progress * 100}%`,
                          backgroundColor: getProgressColor(progress, task.status_code || 'NOT_STARTED'),
                          transition: 'width 0.3s ease'
                        }} />
                      </div>
                      {rowHeight >= 45 && (
                        <span style={{ fontSize: '0.6rem', color: '#666' }}>
                          {Math.round(progress * 100)}%
                        </span>
                      )}
                    </div>
                    
                    {/* ステータス列 */}
                    <div style={{ 
                      width: '110px', 
                      padding: '0.5rem',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center'
                    }}>
                      <select
                        value={task.status_code || 'NOT_STARTED'}
                        onChange={(e) => {
                          e.stopPropagation();
                          handleStatusUpdate(task.task_id, e.target.value);
                        }}
                        onClick={(e) => e.stopPropagation()}
                        disabled={isExportingPDF}
                        style={{
                          padding: '0.5rem',
                          fontSize: rowHeight >= 50 ? '0.7rem' : '0.65rem',
                          border: '1px solid #ddd',
                          borderRadius: '3px',
                          backgroundColor: 'white',
                          cursor: isExportingPDF ? 'not-allowed' : 'pointer',
                          width: '90px'
                        }}
                      >
                        <option value="NOT_STARTED">未着手</option>
                        <option value="IN_PROGRESS">進行中</option>
                        <option value="COMPLETED">完了</option>
                      </select>
                    </div>
                  </div>
                );
              })}
            </div>
            
            {/* 右側ガントチャート部分 */}
            <div 
              ref={rightBodyRef}
              onScroll={handleRightScroll}
              style={{
                flex: 1,
                overflow: 'auto',
                position: 'relative'
              }}
            >
              <div style={{
                width: `${dateRange.length * dateCellWidth}px`,
                minHeight: `${sortedTasks.length * rowHeight}px`,
                position: 'relative'
              }}>
                {sortedTasks.map((task, taskIndex) => {
                  const isSelected = selectedTask?.task_id === task.task_id;
                  const position = getTaskPosition(task);
                  const taskCategory = getTaskCategory(task);
                  
                  return (
                    <div 
                      key={task.task_id} 
                      style={{ 
                        position: 'absolute',
                        top: `${taskIndex * rowHeight}px`,
                        left: 0,
                        right: 0,
                        height: `${rowHeight}px`,
                        borderBottom: '1px solid #e0e0e0',
                        cursor: 'pointer',
                        backgroundColor: isSelected ? 'rgba(227, 242, 253, 0.3)' : 'transparent'
                      }}
                      onClick={(e) => {
                        e.stopPropagation();
                        handleTaskSelect(task);
                      }}
                    >
                      {/* タイムライン背景とガントバー */}
                      {dateRange.map((date, index) => {
                        const isToday = date.toDateString() === today;
                        const isWeekend = date.getDay() === 0 || date.getDay() === 6;
                        const outsideProject = isOutsideProjectPeriod(date);
                        
                        // タスク期間内かどうかを判定
                        let isTaskCell = false;
                        if (position) {
                          const cellLeft = index * dateCellWidth;
                          const cellRight = (index + 1) * dateCellWidth;
                          const taskLeft = position.left;
                          const taskRight = position.left + position.width;
                          isTaskCell = cellLeft < taskRight && cellRight > taskLeft;
                        }
                        
                        return (
                          <div 
                            key={index} 
                            style={{ 
                              position: 'absolute',
                              left: `${index * dateCellWidth}px`,
                              width: `${dateCellWidth}px`,
                              height: '100%',
                              borderRight: index % 7 === 6 ? '2px solid #e0e0e0' : '1px solid #f5f5f5',
                              backgroundColor: isTaskCell ? (
                                taskCategory ? getCategoryColor(taskCategory) :
                                task.milestone_flag 
                                  ? 'rgba(255, 87, 34, 0.8)'
                                  : task.status_code === 'COMPLETED' ? 'rgba(76, 175, 80, 0.8)'
                                  : task.status_code === 'IN_PROGRESS' ? 'rgba(255, 152, 0, 0.8)'
                                  : 'rgba(158, 158, 158, 0.8)'
                              ) : (
                                isToday ? 'rgba(25, 118, 210, 0.1)' : 
                                outsideProject ? 'rgba(128, 128, 128, 0.2)' :
                                isWeekend ? 'rgba(255, 235, 238, 0.2)' : 'transparent'
                              ),
                              opacity: outsideProject && !isTaskCell ? 0.3 : 1,
                              cursor: isTaskCell ? 'pointer' : 'default',
                              zIndex: isTaskCell ? 5 : 1,
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              // PDF出力時の色保持
                              WebkitPrintColorAdjust: 'exact',
                              colorAdjust: 'exact',
                              printColorAdjust: 'exact'
                            }}
                            onClick={isTaskCell ? (e) => {
                              e.stopPropagation();
                              handleTaskSelect(task);
                            } : undefined}
                          >
                            {/* 進捗表示 */}
                            {isTaskCell && task.checklist_progress > 0 && (
                              <div style={{
                                position: 'absolute',
                                top: 0,
                                left: 0,
                                height: '100%',
                                width: `${task.checklist_progress * 100}%`,
                                background: 'repeating-linear-gradient(45deg, rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0.4) 3px, rgba(255, 255, 255, 0.2) 3px, rgba(255, 255, 255, 0.2) 6px)',
                                borderRadius: '0px',
                                transition: 'width 0.3s ease',
                                WebkitPrintColorAdjust: 'exact',
                                colorAdjust: 'exact',
                                printColorAdjust: 'exact'
                              }} />
                            )}
                          </div>
                        );
                      })}
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        </div>

        {/* タスク詳細パネル（右側）*/}
        {selectedTask && (
          <div 
            className="task-detail-panel"
            onClick={(e) => e.stopPropagation()}
            style={{
              position: 'fixed',
              right: 0,
              top: 0,
              bottom: 0,
              width: `${DETAIL_PANEL_WIDTH}px`,
              backgroundColor: 'white',
              borderLeft: '1px solid #e0e0e0',
              boxShadow: '-2px 0 8px rgba(0, 0, 0, 0.1)',
              zIndex: 1000,
              overflowY: 'auto',
              transform: selectedTask ? 'translateX(0)' : 'translateX(100%)',
              transition: 'transform 0.3s ease'
            }}
          >
            <div className="panel-header" style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              padding: '1rem',
              borderBottom: '1px solid #e0e0e0',
              backgroundColor: '#f8f9fa',
              position: 'sticky',
              top: 0,
              zIndex: 1001
            }}>
              <h4 style={{ margin: 0, color: '#1976d2' }}>タスク詳細</h4>
              <button 
                className="btn-close"
                onClick={() => setSelectedTask(null)}
                style={{
                  background: 'none',
                  border: 'none',
                  fontSize: '1.5rem',
                  cursor: 'pointer',
                  padding: 0,
                  color: '#666',
                  width: '30px',
                  height: '30px',
                  borderRadius: '5px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  transition: 'all 0.2s ease'
                }}
              >
                <FaTimes />
              </button>
            </div>

            <div className="panel-content" style={{ padding: '1rem' }}>
              {/* タスク詳細表示/編集 */}
              {isEditing ? (
                <div className="edit-form">
                  <div className="form-group">
                    <label>タスク名 *</label>
                    <input
                      type="text"
                      required
                      value={editData.task_name}
                      onChange={(e) => setEditData({...editData, task_name: e.target.value})}
                    />
                  </div>
                  <div className="form-group">
                    <label>予定工数（人日）*</label>
                    <input
                      type="number"
                      step="0.1"
                      min="0.1"
                      required
                      value={editData.estimated_duration}
                      onChange={(e) => setEditData({...editData, estimated_duration: Number(e.target.value)})}
                    />
                  </div>
                  <div className="form-group">
                    <label>担当者 *</label>
                    <select
                      required
                      value={editData.assignee_id}
                      onChange={(e) => setEditData({...editData, assignee_id: e.target.value})}
                    >
                      <option value="">選択してください</option>
                      {projectMembers.map(member => (
                        <option key={member.employee_id} value={member.employee_id}>
                          {member.employee_name}
                        </option>
                      ))}
                    </select>
                  </div>
                  <div className="form-group">
                    <label>カテゴリ</label>
                    <input
                      type="text"
                      list="edit-category-suggestions"
                      value={editData.category}
                      onChange={(e) => setEditData({...editData, category: e.target.value})}
                      placeholder="例: 要件定義、開発、テスト"
                    />
                    <datalist id="edit-category-suggestions">
                      {existingCategories.map(category => (
                        <option key={category} value={category} />
                      ))}
                    </datalist>
                  </div>
                  <div className="form-group">
                    <label>説明</label>
                    <textarea
                      value={editData.description}
                      onChange={(e) => setEditData({...editData, description: e.target.value})}
                    />
                  </div>
                  <div className="form-group">
                    <label>ステータス</label>
                    <select
                      value={editData.status_code}
                      onChange={(e) => setEditData({...editData, status_code: e.target.value})}
                    >
                      <option value="NOT_STARTED">未着手</option>
                      <option value="IN_PROGRESS">進行中</option>
                      <option value="COMPLETED">完了</option>
                    </select>
                  </div>
                  <div className="form-actions">
                    <button className="btn btn-primary" onClick={handleSaveTask}>
                      保存
                    </button>
                    <button 
                      className="btn btn-secondary" 
                      onClick={() => setIsEditing(false)}
                    >
                      キャンセル
                    </button>
                  </div>
                </div>
              ) : (
                <div className="task-details">
                  <div style={{ marginBottom: '1rem' }}>
                    <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '0.5rem' }}>
                      <h5 style={{ margin: 0 }}>{selectedTask.task_name}</h5>
                      {selectedTask.milestone_flag && (
                        <span style={{ fontSize: '1.2rem' }}>🏁</span>
                      )}
                    </div>
                    {getTaskCategory(selectedTask) && (
                      <div style={{
                        backgroundColor: getCategoryColor(getTaskCategory(selectedTask)!),
                        color: 'white',
                        padding: '0.2rem 0.4rem',
                        borderRadius: '4px',
                        fontSize: '0.8rem',
                        display: 'inline-block',
                        marginBottom: '0.5rem'
                      }}>
                        {getTaskCategory(selectedTask)}
                      </div>
                    )}
                  </div>
                  
                  <div style={{ marginBottom: '1rem' }}>
                    <div style={{ marginBottom: '0.5rem' }}><strong>説明:</strong></div>
                    <div style={{ color: '#666', fontSize: '0.9rem' }}>
                      {getDescriptionWithoutCategory(selectedTask.description || '') || '説明なし'}
                    </div>
                  </div>

                  <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '1rem', marginBottom: '1rem' }}>
                    <div>
                      <div style={{ fontSize: '0.8rem', color: '#666', marginBottom: '0.25rem' }}>予定工数</div>
                      <div>{selectedTask.estimated_duration || 0}人日</div>
                    </div>
                    <div>
                      <div style={{ fontSize: '0.8rem', color: '#666', marginBottom: '0.25rem' }}>進捗</div>
                      <div>{Math.round(selectedTask.checklist_progress * 100)}%</div>
                    </div>
                  </div>

                  <div style={{ marginBottom: '1rem' }}>
                    <div style={{ fontSize: '0.8rem', color: '#666', marginBottom: '0.25rem' }}>担当者</div>
                    <div>{selectedTask.assignee?.employee_name || '未割当'}</div>
                  </div>

                  <div style={{ marginBottom: '1rem' }}>
                    <div style={{ fontSize: '0.8rem', color: '#666', marginBottom: '0.25rem' }}>期間</div>
                    <div>{selectedTask.start_date || '未定'} ～ {selectedTask.end_date || '未定'}</div>
                  </div>

                  <div style={{ marginBottom: '1rem' }}>
                    <div style={{ fontSize: '0.8rem', color: '#666', marginBottom: '0.25rem' }}>ステータス</div>
                    <span className={`status ${selectedTask.status_code?.toLowerCase()}`}>
                      {selectedTask.status_code === 'NOT_STARTED' ? '未着手' :
                       selectedTask.status_code === 'IN_PROGRESS' ? '進行中' :
                       selectedTask.status_code === 'COMPLETED' ? '完了' : selectedTask.status_code}
                    </span>
                  </div>
                  
                  <button 
                    className="btn btn-secondary" 
                    onClick={() => setIsEditing(true)}
                    style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}
                  >
                    <FaEdit />
                    編集
                  </button>
                </div>
              )}

              {/* チェックリスト管理 */}
              <div style={{ 
                marginTop: '2rem', 
                paddingTop: '1rem', 
                borderTop: '1px solid #e0e0e0' 
              }}>
                <h5 style={{ 
                  margin: '0 0 1rem 0', 
                  color: '#1976d2',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.5rem'
                }}>
                  <FaTasks />
                  チェックリスト
                </h5>
                
                <form onSubmit={handleAddChecklistItem} style={{ marginBottom: '1rem' }}>
                  <div style={{ display: 'flex', gap: '0.5rem' }}>
                    <input
                      type="text"
                      placeholder="新しいアイテム"
                      value={newChecklistItem}
                      onChange={(e) => setNewChecklistItem(e.target.value)}
                      style={{
                        flex: 1,
                        padding: '0.5rem',
                        border: '1px solid #ddd',
                        borderRadius: '4px',
                        fontSize: '0.9rem'
                      }}
                    />
                    <button 
                      type="submit" 
                      className="btn btn-primary"
                      style={{ 
                        padding: '0.5rem 0.8rem',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '0.25rem',
                        fontSize: '0.8rem'
                      }}
                    >
                      <FaPlus />
                    </button>
                  </div>
                </form>

                <div style={{ maxHeight: '300px', overflowY: 'auto' }}>
                  {checklistItems.map((item) => (
                    <div 
                      key={item.checklist_id}
                      style={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: '0.5rem',
                        padding: '0.5rem',
                        borderBottom: '1px solid #f0f0f0',
                        backgroundColor: 'white',
                        borderRadius: '4px',
                        marginBottom: '0.5rem',
                        border: '1px solid #f0f0f0'
                      }}
                    >
                      <input
                        type="checkbox"
                        checked={item.is_done}
                        onChange={(e) => handleChecklistToggle(item.checklist_id, e.target.checked)}
                        style={{ cursor: 'pointer' }}
                      />
                      
                      {editingChecklist === item.checklist_id ? (
                        <div style={{ display: 'flex', gap: '0.5rem', flex: 1 }}>
                          <input
                            type="text"
                            value={editingChecklistText}
                            onChange={(e) => setEditingChecklistText(e.target.value)}
                            style={{
                              flex: 1,
                              padding: '0.25rem',
                              border: '1px solid #ddd',
                              borderRadius: '3px',
                              fontSize: '0.9rem'
                            }}
                          />
                          <button
                            onClick={() => handleSaveEditChecklist(item.checklist_id)}
                            style={{
                              padding: '0.5rem 0.7rem',
                              backgroundColor: '#4CAF50',
                              color: 'white',
                              border: 'none',
                              borderRadius: '3px',
                              cursor: 'pointer',
                              fontSize: '0.8rem'
                            }}
                          >
                            <FaSave />
                          </button>
                          <button
                            onClick={() => {
                              setEditingChecklist(null);
                              setEditingChecklistText('');
                            }}
                            style={{
                              padding: '0.5rem 0.7rem',
                              backgroundColor: '#757575',
                              color: 'white',
                              border: 'none',
                              borderRadius: '3px',
                              cursor: 'pointer',
                              fontSize: '0.8rem'
                            }}
                          >
                            <FaTimes />
                          </button>
                        </div>
                      ) : (
                        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', flex: 1 }}>
                          <span 
                            style={{
                              flex: 1,
                              textDecoration: item.is_done ? 'line-through' : 'none',
                              color: item.is_done ? '#999' : '#333',
                              fontSize: '0.9rem'
                            }}
                          >
                            {item.item_name}
                          </span>
                          <button
                            onClick={() => handleStartEditChecklist(item)}
                            style={{
                              padding: '0.5rem 0.7rem',
                              backgroundColor: '#2196F3',
                              color: 'white',
                              border: 'none',
                              borderRadius: '3px',
                              cursor: 'pointer',
                              fontSize: '0.8rem'
                            }}
                          >
                            <FaEdit />
                          </button>
                        </div>
                      )}
                    </div>
                  ))}
                </div>

                {checklistItems.length === 0 && (
                  <p style={{ 
                    color: '#999', 
                    fontStyle: 'italic', 
                    textAlign: 'center',
                    padding: '1rem',
                    fontSize: '0.9rem'
                  }}>
                    チェックリストアイテムがありません
                  </p>
                )}
              </div>
            </div>
          </div>
        )}
      </div>

      {sortedTasks.length === 0 && (
        <div style={{ 
          textAlign: 'center', 
          padding: '3rem', 
          color: '#666',
          backgroundColor: 'white',
          borderRadius: '8px',
          marginTop: '1rem'
        }}>
          タスクがありません。タスクを追加してください。
        </div>
      )}
    </div>
  );
};

export default WBSView;

================================================================================

FILE: frontend/src/components/PERTChart.tsx
-------------------------------------------
import React, { useState, useCallback, useEffect, useMemo } from 'react';
import ReactFlow, {
  Node,
  Edge,
  Connection,
  useNodesState,
  useEdgesState,
  Controls,
  MiniMap,
  Background,
  BackgroundVariant,
  addEdge,
  Handle,
  Position,
  MarkerType,
  ConnectionMode, 
  ReactFlowProvider,
} from 'react-flow-renderer';
import { FaPlus, FaTimes, FaEdit, FaSave, FaTasks } from 'react-icons/fa';
import { WBSTask, TaskDependency, Employee, TaskChecklist, ProjectMember } from '../types/index';
import { taskAPI, checklistAPI } from '../utils/api';

interface Props {
  tasks: WBSTask[];
  employees: Employee[];
  members: ProjectMember[];
  onUpdateTask: () => void;
  onCreateTask: (task: any) => void;
  onCreateDependency: (dependency: TaskDependency) => Promise<void>;
  onScheduleChange: () => void;
}

// カスタムタスクノードコンポーネント
const TaskNode: React.FC<{ data: any }> = ({ data }) => {
  const { task } = data;
  
  const statusColors = {
    'NOT_STARTED': '#9E9E9E',
    'IN_PROGRESS': '#FF9800',
    'COMPLETED': '#4CAF50'
  } as const;
  
  type StatusKey = keyof typeof statusColors;
  
  const statusCode = task.status_code as StatusKey;
  const statusColor = statusColors[statusCode] || statusColors['NOT_STARTED'];

  // タスクからカテゴリを抽出
  const getTaskCategory = (task: WBSTask) => {
    if (task.description && task.description.startsWith('[') && task.description.includes(']')) {
      const match = task.description.match(/^\[([^\]]+)\]/);
      return match ? match[1] : null;
    }
    return null;
  };

  // カテゴリ色を生成
  const getCategoryColor = (category: string) => {
    const colors = ['#1976d2', '#388e3c', '#f57c00', '#7b1fa2', '#d32f2f', '#0097a7', '#5d4037'];
    const hash = category.split('').reduce((a, b) => a + b.charCodeAt(0), 0);
    return colors[hash % colors.length];
  };

  const taskCategory = getTaskCategory(task);

  return (
    <div 
      className="task-node"
      style={{ 
        borderColor: statusColor,
        position: 'relative',
        width: '220px',
        height: '160px', // 高さを少し増加
        padding: '8px'
      }}
    >
      <Handle
        type="target"
        position={Position.Left}
        id="input"
        style={{
          background: '#4CAF50',
          width: 16,
          height: 16,
          border: '2px solid white',
          borderRadius: '50%',
          left: -8,
          top: '50%',
          transform: 'translateY(-50%)',
          zIndex: 10
        }}
      />

      <Handle
        type="source"
        position={Position.Right}
        id="output"
        style={{
          background: '#2196F3',
          width: 16,
          height: 16,
          border: '2px solid white',
          borderRadius: '50%',
          right: -8,
          top: '50%',
          transform: 'translateY(-50%)',
          zIndex: 10
        }}
      />
      
      <div className="task-node-header">
        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '0.25rem' }}>
          <strong>{task.task_name}</strong>
          {task.milestone_flag && <span className="milestone">🏁</span>}
        </div>
        {taskCategory && (
          <div style={{
            backgroundColor: getCategoryColor(taskCategory),
            color: 'white',
            padding: '0.1rem 0.3rem',
            borderRadius: '3px',
            fontSize: '0.65rem',
            display: 'inline-block',
            marginBottom: '0.25rem'
          }}>
            {taskCategory}
          </div>
        )}
      </div>
      <div className="task-node-body" style={{ fontSize: '0.8rem', lineHeight: '1.3' }}>
        <div>工数: {task.estimated_duration}人日</div>
        <div>担当: {task.assignee?.employee_name || '未割当'}</div>
        <div>期間: {task.start_date || '未定'} ～ {task.end_date || '未定'}</div>
        <div>進捗: {Math.round(task.checklist_progress * 100)}%</div>
      </div>
    </div>
  );
};

const nodeTypes = {
  taskNode: TaskNode,
};

const PERTChart: React.FC<Props> = ({ 
  tasks, 
  employees, 
  members,
  onUpdateTask, 
  onCreateTask, 
  onCreateDependency,
  onScheduleChange 
}) => {
  const [nodes, setNodes, onNodesChange] = useNodesState([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);
  const [selectedTask, setSelectedTask] = useState<WBSTask | null>(null);
  const [dependencyType, setDependencyType] = useState<'FS' | 'SS' | 'FF' | 'SF'>('FS');
  
  // タスク作成フォーム関連の状態
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [newTask, setNewTask] = useState({
    task_name: '',
    description: '',
    estimated_duration: 1,
    task_category: '', // カテゴリ項目を追加
    assignee_id: '',
    milestone_flag: false
  });

  // 既存タスクからカテゴリを抽出
  const existingCategories = useMemo(() => {
    const categories = new Set<string>();
    tasks.forEach(task => {
      if (task.description && task.description.startsWith('[') && task.description.includes(']')) {
        const match = task.description.match(/^\[([^\]]+)\]/);
        if (match) {
          categories.add(match[1]);
        }
      }
    });
    return Array.from(categories).sort();
  }, [tasks]);

  // プロジェクトメンバーのみをフィルタ
  const projectMembers = useMemo(() => {
    return members.map(member => ({
      ...member.employee!,
      allocation_ratio: member.allocation_ratio || 1.0
    }));
  }, [members]);

  // タスクからノード・エッジ生成
  useEffect(() => {
    const newNodes: Node[] = tasks.map((task, index) => ({
      id: task.task_id.toString(),
      type: 'taskNode',
      position: { 
        x: task.x_position || (index % 4) * 300 + 100,
        y: task.y_position || Math.floor(index / 4) * 220 + 100 // Y間隔を増加
      },
      data: { task, label: task.task_name },
      draggable: true,
      selectable: true,
    }));

    const newEdges: Edge[] = [];
    tasks.forEach(task => {
      task.dependencies.forEach((dep) => {
        const dependencyTypeLabels = {
          'FS': 'FS',
          'SS': 'SS',
          'FF': 'FF',
          'SF': 'SF'
        };
        
        newEdges.push({
          id: `${dep.depends_on_id}-${dep.task_id}`,
          source: dep.depends_on_id.toString(),
          target: dep.task_id.toString(),
          label: dependencyTypeLabels[dep.dependency_type as keyof typeof dependencyTypeLabels] || dep.dependency_type,
          type: 'straight', // 修正：矢印をまっすぐに
          animated: true,
          style: { 
            strokeWidth: 3,
            stroke: dep.dependency_type === 'FS' ? '#1976d2' : '#ff9800'
          },
          markerEnd: {
            type: MarkerType.Arrow,
            width: 20,
            height: 20,
            color: dep.dependency_type === 'FS' ? '#1976d2' : '#ff9800',
          },
        });
      });
    });

    setNodes(newNodes);
    setEdges(newEdges);
  }, [tasks, setNodes, setEdges]);

  // selectedTaskを最新のタスクデータで更新
  useEffect(() => {
    if (selectedTask) {
      const updatedTask = tasks.find(t => t.task_id === selectedTask.task_id);
      if (updatedTask) {
        setSelectedTask(updatedTask);
      }
    }
  }, [tasks, selectedTask]);

  // 依存関係作成（エッジ接続時）
  const onConnect = useCallback(
    async (params: Connection) => {
      console.log('Connection attempt:', params);

      if (!params.source || !params.target) {
        console.log('Invalid connection: missing source or target');
        return;
      }

      if (params.source === params.target) {
        alert('同じタスク同士は依存関係を作成できません。');
        return;
      }

      const existingDependency = tasks
        .find(t => t.task_id.toString() === params.target)
        ?.dependencies.find(d => d.depends_on_id.toString() === params.source);

      if (existingDependency) {
        alert('この依存関係は既に存在します。');
        return;
      }

      const hasCycle = (sourceId: string, targetId: string): boolean => {
        const visited = new Set<string>();
        const stack = [targetId];
        
        while (stack.length > 0) {
          const current = stack.pop()!;
          if (visited.has(current)) continue;
          visited.add(current);
          
          if (current === sourceId) return true;
          
          const currentTask = tasks.find(t => t.task_id.toString() === current);
          if (currentTask) {
            currentTask.dependencies.forEach(dep => {
              stack.push(dep.depends_on_id.toString());
            });
          }
        }
        return false;
      };

      if (hasCycle(params.source, params.target)) {
        alert('循環依存が発生するため、この依存関係は作成できません。');
        return;
      }

      try {
        const dependencyData = {
          task_id: Number(params.target),
          depends_on_id: Number(params.source),
          dependency_type: dependencyType
        };
        
        console.log('Creating dependency:', dependencyData);

        await onCreateDependency(dependencyData);
        
        onScheduleChange();
        
        await onUpdateTask();
        
        const sourceTask = tasks.find(t => t.task_id.toString() === params.source);
        const targetTask = tasks.find(t => t.task_id.toString() === params.target);
        console.log(`依存関係を作成しました: ${sourceTask?.task_name} → ${targetTask?.task_name} (${dependencyType})`);
        
      } catch (error) {
        console.error('依存関係作成エラー:', error);
        alert('依存関係の作成に失敗しました。詳細はコンソールをご確認ください。');
      }
    },
    [onCreateDependency, onUpdateTask, onScheduleChange, dependencyType, tasks]
  );

  // エッジ削除処理
  const onEdgeClick = useCallback(
    async (event: any, edge: Edge) => {
      event.stopPropagation();
      
      const [sourceId, targetId] = edge.id.split('-');
      const sourceTask = tasks.find(t => t.task_id.toString() === sourceId);
      const targetTask = tasks.find(t => t.task_id.toString() === targetId);
      
      if (window.confirm(`依存関係を削除しますか？\n${sourceTask?.task_name} → ${targetTask?.task_name}`)) {
        try {
          await taskAPI.deleteDependency(Number(targetId), Number(sourceId));
          
          onScheduleChange();
          
          await onUpdateTask();
        } catch (error) {
          console.error('依存関係削除エラー:', error);
          alert('依存関係の削除に失敗しました。');
        }
      }
    },
    [tasks, onUpdateTask, onScheduleChange]
  );

  // ノード位置更新
  const onNodeDragStop = useCallback(
    async (event: any, node: Node) => {
      try {
        await taskAPI.update(Number(node.id), {
          x_position: Math.round(node.position.x),
          y_position: Math.round(node.position.y)
        });
      } catch (error) {
        console.error('ノード位置更新エラー:', error);
      }
    },
    []
  );

  // ノードクリック処理
  const onNodeClick = useCallback((event: any, node: Node) => {
    const task = tasks.find(t => t.task_id.toString() === node.id);
    setSelectedTask(task || null);
  }, [tasks]);

  // タスク作成処理（必須項目バリデーション追加）
  const handleCreateTask = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      // バリデーション（予定工数・担当者必須化）
      if (!newTask.task_name.trim()) {
        alert('タスク名は必須です。');
        return;
      }

      if (!newTask.estimated_duration || newTask.estimated_duration <= 0) {
        alert('予定工数は必須です。0より大きい値を入力してください。');
        return;
      }

      if (!newTask.assignee_id) {
        alert('担当者は必須です。担当者を選択してください。');
        return;
      }

      // カテゴリを説明の先頭に追加
      const description = newTask.task_category 
        ? `[${newTask.task_category}] ${newTask.description}`
        : newTask.description;

      await onCreateTask({
        ...newTask,
        description,
        assignee_id: newTask.assignee_id ? Number(newTask.assignee_id) : undefined
      });
      
      onScheduleChange();
      
      setNewTask({
        task_name: '',
        description: '',
        estimated_duration: 1,
        task_category: '',
        assignee_id: '',
        milestone_flag: false
      });
      setShowCreateForm(false);
      
      await onUpdateTask();
      
    } catch (error) {
      console.error('タスク作成エラー:', error);
      alert('タスクの作成に失敗しました。');
    }
  };

  return (
    <ReactFlowProvider>
      <div className="pert-chart">
        <div className="pert-header">
          <div className="pert-actions">
            <button 
              className="btn btn-primary"
              onClick={() => setShowCreateForm(true)}
              style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}
            >
              <FaPlus />
              タスク追加
            </button>
          </div>

          <div className="pert-controls">
            <div className="dependency-type-selector">
              <label>依存関係の種類:</label>
              <select 
                value={dependencyType} 
                onChange={(e) => setDependencyType(e.target.value as any)}
              >
                <option value="FS">FS (終了→開始)</option>
                <option value="SS">SS (開始→開始)</option>
                <option value="FF">FF (終了→終了)</option>
                <option value="SF">SF (開始→終了)</option>
              </select>
            </div>
          </div>

          <div className="pert-legend">
            <span className="legend-item">
              <span className="legend-color" style={{backgroundColor: '#9E9E9E'}}></span>
              未着手
            </span>
            <span className="legend-item">
              <span className="legend-color" style={{backgroundColor: '#FF9800'}}></span>
              進行中
            </span>
            <span className="legend-item">
              <span className="legend-color" style={{backgroundColor: '#4CAF50'}}></span>
              完了
            </span>
          </div>
        </div>

        {/* タスク作成フォーム（必須項目バリデーション追加） */}
        {showCreateForm && (
          <div className="modal-overlay">
            <div className="modal">
              <h3>新しいタスクを追加</h3>
              <form onSubmit={handleCreateTask}>
                <div className="form-group">
                  <label>タスク名 *</label>
                  <input
                    type="text"
                    required
                    value={newTask.task_name}
                    onChange={(e) => setNewTask({...newTask, task_name: e.target.value})}
                    placeholder="例: 要件定義書作成"
                  />
                </div>
                <div className="form-row">
                  <div className="form-group">
                    <label>予定工数（人日）*</label>
                    <input
                      type="number"
                      min="0.1"
                      step="0.1"
                      required
                      value={newTask.estimated_duration}
                      onChange={(e) => {
                        setNewTask({...newTask, estimated_duration: Number(e.target.value)});
                      }}
                    />
                  </div>
                  <div className="form-group">
                    <label>担当者 *</label>
                    <select
                      required
                      value={newTask.assignee_id}
                      onChange={(e) => setNewTask({...newTask, assignee_id: e.target.value})}
                    >
                      <option value="">選択してください</option>
                      {projectMembers.map(member => (
                        <option key={member.employee_id} value={member.employee_id}>
                          {member.employee_name} (稼働率: {(member.allocation_ratio * 100).toFixed(0)}%)
                        </option>
                      ))}
                    </select>
                    {projectMembers.length === 0 && (
                      <small style={{ color: '#ff9800', fontSize: '0.8rem' }}>
                        プロジェクトにメンバーが登録されていません。メンバー管理タブから追加してください。
                      </small>
                    )}
                  </div>
                </div>
                <div className="form-group">
                  <label>カテゴリ</label>
                  <input
                    type="text"
                    list="pert-category-suggestions"
                    value={newTask.task_category}
                    onChange={(e) => setNewTask({...newTask, task_category: e.target.value})}
                    placeholder="例: 要件定義、開発、テスト"
                  />
                  <datalist id="pert-category-suggestions">
                    {existingCategories.map(category => (
                      <option key={category} value={category} />
                    ))}
                    <option value="要件定義" />
                    <option value="設計" />
                    <option value="開発" />
                    <option value="テスト" />
                    <option value="リリース" />
                  </datalist>
                </div>
                <div className="form-group">
                  <label>説明</label>
                  <textarea
                    value={newTask.description}
                    onChange={(e) => setNewTask({...newTask, description: e.target.value})}
                    placeholder="タスクの詳細説明"
                  />
                </div>
                <div className="form-group">
                  <label className="checkbox-label">
                    <input
                      type="checkbox"
                      checked={newTask.milestone_flag}
                      onChange={(e) => setNewTask({...newTask, milestone_flag: e.target.checked})}
                    />
                    マイルストーンとして設定
                  </label>
                </div>
                <div className="form-actions">
                  <button type="submit" className="btn btn-primary">
                    作成
                  </button>
                  <button 
                    type="button" 
                    className="btn btn-secondary"
                    onClick={() => setShowCreateForm(false)}
                  >
                    キャンセル
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        <div className="pert-container" style={{ height: '600px', position: 'relative' }}>
          <ReactFlow
            nodes={nodes}
            edges={edges}
            onNodesChange={onNodesChange}
            onEdgesChange={onEdgesChange}
            onConnect={onConnect}
            onNodeDragStop={onNodeDragStop}
            onNodeClick={onNodeClick}
            onEdgeClick={onEdgeClick}
            nodeTypes={nodeTypes}
            fitView
            fitViewOptions={{
              padding: 0.2,
              maxZoom: 1.5,
              minZoom: 0.1
            }}
            snapToGrid={true}
            snapGrid={[20, 20]}
            deleteKeyCode={null}
            defaultEdgeOptions={{
              type: 'straight', // 修正：矢印をまっすぐに
              animated: false,
              style: { strokeWidth: 2 },
              markerEnd: {
                type: MarkerType.Arrow,
                width: 20,
                height: 20,
              }
            }}
            connectionMode={ConnectionMode.Loose}
            connectOnClick={false}
            nodesDraggable={true}
            nodesConnectable={true}
            elementsSelectable={true}
          >
            <MiniMap 
              style={{ 
                backgroundColor: '#f8f9fa',
                border: '1px solid #ddd'
              }}
              nodeStrokeColor="#1976d2"
              nodeColor="#ffffff"
              maskColor="#f0f0f0"
            />
            <Controls 
              style={{
                bottom: 20,
                left: 20
              }}
            />
            <Background 
              variant={BackgroundVariant.Dots} 
              gap={20}
              size={1}
              color="#e0e0e0"
            />
          </ReactFlow>
        </div>

        {/* タスク詳細サイドパネル */}
        {selectedTask && (
          <TaskDetailPanel 
            task={selectedTask} 
            members={members}
            existingCategories={existingCategories}
            onClose={() => setSelectedTask(null)}
            onUpdate={async () => {
              onScheduleChange();
              await onUpdateTask();
            }}
          />
        )}
      </div>
    </ReactFlowProvider>
  );
};

// タスク詳細サイドパネル（必須項目バリデーション追加）
const TaskDetailPanel: React.FC<{
  task: WBSTask;
  members: ProjectMember[];
  existingCategories: string[];
  onClose: () => void;
  onUpdate: () => void;
}> = ({ task, members, existingCategories, onClose, onUpdate }) => {
  const [isEditing, setIsEditing] = useState(false);
  
  // タスクからカテゴリを抽出
  const getTaskCategory = (task: WBSTask) => {
    if (task.description && task.description.startsWith('[') && task.description.includes(']')) {
      const match = task.description.match(/^\[([^\]]+)\]/);
      return match ? match[1] : null;
    }
    return null;
  };

  // 説明からカテゴリ部分を除去
  const getDescriptionWithoutCategory = (description: string) => {
    if (description && description.startsWith('[') && description.includes(']')) {
      const match = description.match(/^\[([^\]]+)\]\s*(.*)/);
      return match ? match[2] : description;
    }
    return description;
  };

  const taskCategory = getTaskCategory(task);
  const descriptionWithoutCategory = getDescriptionWithoutCategory(task.description || '');

  const [editData, setEditData] = useState({
    task_name: task.task_name,
    category: taskCategory || '',
    description: descriptionWithoutCategory,
    estimated_duration: task.estimated_duration || 1,
    status_code: task.status_code || 'NOT_STARTED',
    assignee_id: task.assignee?.employee_id || ''
  });

  const [checklistItems, setChecklistItems] = useState<TaskChecklist[]>([]);
  const [newChecklistItem, setNewChecklistItem] = useState('');
  const [draggedIndex, setDraggedIndex] = useState<number | null>(null);
  const [isInitialized, setIsInitialized] = useState(false);

  // カテゴリ色を生成
  const getCategoryColor = (category: string) => {
    const colors = ['#1976d2', '#388e3c', '#f57c00', '#7b1fa2', '#d32f2f', '#0097a7', '#5d4037'];
    const hash = category.split('').reduce((a, b) => a + b.charCodeAt(0), 0);
    return colors[hash % colors.length];
  };

  // プロジェクトメンバーのみをフィルタ
  const projectMembers = useMemo(() => {
    return members.map(member => ({
      ...member.employee!,
      allocation_ratio: member.allocation_ratio || 1.0
    }));
  }, [members]);

  useEffect(() => {
    if (!isInitialized || task.task_id !== (checklistItems[0]?.task_id)) {
      setChecklistItems([...task.checklist_items].sort((a, b) => a.sort_order - b.sort_order));
      setIsInitialized(true);
    }
    
    const currentCategory = getTaskCategory(task);
    const currentDescWithoutCategory = getDescriptionWithoutCategory(task.description || '');
    
    setEditData({
      task_name: task.task_name,
      category: currentCategory || '',
      description: currentDescWithoutCategory,
      estimated_duration: task.estimated_duration || 1,
      status_code: task.status_code || 'NOT_STARTED',
      assignee_id: task.assignee?.employee_id || ''
    });
  }, [task.task_id, task.checklist_items, task.task_name, task.description, task.estimated_duration, task.status_code, task.assignee, isInitialized]);

  const handleSave = async () => {
    try {
      // バリデーション（予定工数・担当者必須化）
      if (!editData.task_name.trim()) {
        alert('タスク名は必須です。');
        return;
      }

      if (!editData.estimated_duration || editData.estimated_duration <= 0) {
        alert('予定工数は必須です。0より大きい値を入力してください。');
        return;
      }

      if (!editData.assignee_id) {
        alert('担当者は必須です。担当者を選択してください。');
        return;
      }

      console.log('Saving task data:', editData);
      
      // カテゴリを説明の先頭に追加
      const finalDescription = editData.category.trim() 
        ? `[${editData.category.trim()}] ${editData.description}`
        : editData.description;
      
      const updatePayload = {
        task_name: editData.task_name,
        description: finalDescription,
        estimated_duration: editData.estimated_duration,
        status_code: editData.status_code,
        assignee_id: editData.assignee_id ? Number(editData.assignee_id) : undefined
      };
      
      console.log('Update payload:', updatePayload);
      
      await taskAPI.update(task.task_id, updatePayload);
      setIsEditing(false);
      
      await onUpdate();
      
      console.log('Task updated successfully');
    } catch (error) {
      console.error('タスク更新エラー詳細:', error);
      if (error instanceof Error) {
        console.error('エラーメッセージ:', error.message);
      }
      alert(`タスクの更新に失敗しました。詳細: ${error instanceof Error ? error.message : String(error)}`);
    }
  };

  const handleAddChecklistItem = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newChecklistItem.trim()) return;
    
    try {
      const newItem = await checklistAPI.create({
        task_id: task.task_id,
        item_name: newChecklistItem,
        is_done: false,
        sort_order: checklistItems.length
      });
      
      setChecklistItems(prev => [...prev, newItem]);
      setNewChecklistItem('');
      
      await onUpdate();
    } catch (error) {
      console.error('チェックリスト作成エラー:', error);
      alert('チェックリストアイテムの追加に失敗しました。');
    }
  };

  const handleChecklistToggle = async (checklistId: number, isDone: boolean) => {
    try {
      console.log(`Updating checklist ${checklistId} to ${isDone}`);
      
      setChecklistItems(prev => 
        prev.map(item => 
          item.checklist_id === checklistId 
            ? { ...item, is_done: isDone }
            : item
        )
      );
      
      await checklistAPI.update(checklistId, { is_done: isDone });
      await onUpdate();
      
      console.log(`Checklist ${checklistId} updated successfully`);
    } catch (error) {
      console.error('チェックリスト更新エラー:', error);
      
      setChecklistItems(prev => 
        prev.map(item => 
          item.checklist_id === checklistId 
            ? { ...item, is_done: !isDone }
            : item
        )
      );
      
      alert('チェックリストの更新に失敗しました。');
    }
  };

  const handleDragStart = (e: React.DragEvent, index: number) => {
    setDraggedIndex(index);
    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/plain', index.toString());
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
  };

  const handleDrop = async (e: React.DragEvent, dropIndex: number) => {
    e.preventDefault();
    
    if (draggedIndex === null || draggedIndex === dropIndex) {
      setDraggedIndex(null);
      return;
    }

    const newItems = [...checklistItems];
    const draggedItem = newItems[draggedIndex];
    newItems.splice(draggedIndex, 1);
    newItems.splice(dropIndex, 0, draggedItem);

    setChecklistItems(newItems);

    try {
      const updatePromises = newItems.map((item, index) => 
        checklistAPI.update(item.checklist_id, { sort_order: index })
      );
      
      await Promise.all(updatePromises);
      await onUpdate();
    } catch (error) {
      console.error('チェックリスト順序更新エラー:', error);
      setChecklistItems([...task.checklist_items].sort((a, b) => a.sort_order - b.sort_order));
      alert('順序の変更に失敗しました。');
    }

    setDraggedIndex(null);
  };

  return (
    <div className="task-detail-panel">
      <div className="panel-header">
        <h4>タスク詳細</h4>
        <button className="btn-close" onClick={onClose}>
          <FaTimes />
        </button>
      </div>

      <div className="panel-content">
        {isEditing ? (
          <div className="edit-form">
            <div className="form-group">
              <label>タスク名 *</label>
              <input
                type="text"
                required
                value={editData.task_name}
                onChange={(e) => setEditData({...editData, task_name: e.target.value})}
              />
            </div>
            <div className="form-group">
              <label>予定工数（人日）*</label>
              <input
                type="number"
                step="0.1"
                min="0.1"
                required
                value={editData.estimated_duration}
                onChange={(e) => setEditData({...editData, estimated_duration: Number(e.target.value)})}
              />
            </div>
            <div className="form-group">
              <label>担当者 *</label>
              <select
                required
                value={editData.assignee_id}
                onChange={(e) => setEditData({...editData, assignee_id: e.target.value})}
              >
                <option value="">選択してください</option>
                {projectMembers.map(member => (
                  <option key={member.employee_id} value={member.employee_id}>
                    {member.employee_name} (稼働率: {(member.allocation_ratio * 100).toFixed(0)}%)
                  </option>
                ))}
              </select>
            </div>
            <div className="form-group">
              <label>カテゴリ</label>
              <input
                type="text"
                list="edit-category-suggestions"
                value={editData.category}
                onChange={(e) => setEditData({...editData, category: e.target.value})}
                placeholder="例: 要件定義、開発、テスト"
              />
              <datalist id="edit-category-suggestions">
                {existingCategories.map(category => (
                  <option key={category} value={category} />
                ))}
                <option value="要件定義" />
                <option value="設計" />
                <option value="開発" />
                <option value="テスト" />
                <option value="リリース" />
              </datalist>
            </div>
            <div className="form-group">
              <label>説明</label>
              <textarea
                value={editData.description}
                onChange={(e) => setEditData({...editData, description: e.target.value})}
                placeholder="タスクの詳細説明"
              />
            </div>
            <div className="form-group">
              <label>ステータス</label>
              <select
                value={editData.status_code}
                onChange={(e) => setEditData({...editData, status_code: e.target.value})}
              >
                <option value="NOT_STARTED">未着手</option>
                <option value="IN_PROGRESS">進行中</option>
                <option value="COMPLETED">完了</option>
              </select>
            </div>
            <div className="form-actions">
              <button className="btn btn-primary" onClick={handleSave}>
                保存
              </button>
              <button className="btn btn-secondary" onClick={() => setIsEditing(false)}>
                キャンセル
              </button>
            </div>
          </div>
        ) : (
          <div className="task-details">
            <div className="detail-item">
              <label>タスク名:</label>
              <span>{task.task_name}</span>
            </div>
            <div className="detail-item">
              <label>カテゴリ:</label>
              <span>
                {taskCategory ? (
                  <div style={{
                    backgroundColor: getCategoryColor(taskCategory),
                    color: 'white',
                    padding: '0.2rem 0.4rem',
                    borderRadius: '4px',
                    fontSize: '0.8rem',
                    display: 'inline-block'
                  }}>
                    {taskCategory}
                  </div>
                ) : '-'}
              </span>
            </div>
            <div className="detail-item">
              <label>説明:</label>
              <span>{descriptionWithoutCategory || '-'}</span>
            </div>
            <div className="detail-item">
              <label>予定工数:</label>
              <span>{task.estimated_duration}人日</span>
            </div>
            <div className="detail-item">
              <label>担当者:</label>
              <span>
                {task.assignee ? (
                  <>
                    {task.assignee.employee_name}
                    <br />
                    <small style={{ color: '#999' }}>
                      稼働率: {((members.find(m => m.employee_id === task.assignee?.employee_id)?.allocation_ratio || 1.0) * 100).toFixed(0)}%
                    </small>
                  </>
                ) : '未割当'}
              </span>
            </div>
            <div className="detail-item">
              <label>期間:</label>
              <span>{task.start_date || '未定'} ～ {task.end_date || '未定'}</span>
            </div>
            <div className="detail-item">
              <label>ステータス:</label>
              <span className={`status ${task.status_code?.toLowerCase()}`}>
                {task.status_code === 'NOT_STARTED' ? '未着手' :
                 task.status_code === 'IN_PROGRESS' ? '進行中' :
                 task.status_code === 'COMPLETED' ? '完了' : task.status_code}
              </span>
            </div>
            <div className="detail-item">
              <label>チェックリスト進捗:</label>
              <span>{Math.round(task.checklist_progress * 100)}%</span>
            </div>
            
            <button className="btn btn-secondary" onClick={() => setIsEditing(true)}>
              <FaEdit style={{ marginRight: '0.5rem' }} />
              編集
            </button>
          </div>
        )}

        <div className="checklist-section" style={{ marginTop: '2rem', paddingTop: '1rem', borderTop: '1px solid #e0e0e0' }}>
          <h5>
            <FaTasks style={{ marginRight: '0.5rem' }} />
            チェックリスト管理
          </h5>
          
          <form onSubmit={handleAddChecklistItem} style={{ marginBottom: '1rem' }}>
            <div className="add-checklist-form">
              <input
                type="text"
                placeholder="新しいチェックリストアイテム"
                value={newChecklistItem}
                onChange={(e) => setNewChecklistItem(e.target.value)}
              />
              <button type="submit" className="btn btn-small btn-primary">
                <FaPlus style={{ marginRight: '0.25rem' }} />
                追加
              </button>
            </div>
          </form>

          <div className="draggable-checklist">
            {checklistItems.map((item, index) => (
              <DraggableChecklistItem
                key={item.checklist_id}
                item={item}
                index={index}
                onToggle={handleChecklistToggle}
                onDragStart={handleDragStart}
                onDragOver={handleDragOver}
                onDrop={handleDrop}
              />
            ))}
          </div>

          {checklistItems.length === 0 && (
            <p style={{ color: '#666', fontStyle: 'italic', marginTop: '0.5rem' }}>
              チェックリストアイテムがありません
            </p>
          )}
        </div>
      </div>
    </div>
  );
};

// ドラッグ&ドロップ対応チェックリストコンポーネント
const DraggableChecklistItem: React.FC<{
  item: TaskChecklist;
  index: number;
  onToggle: (id: number, isDone: boolean) => Promise<void>;
  onDragStart: (e: React.DragEvent, index: number) => void;
  onDragOver: (e: React.DragEvent) => void;
  onDrop: (e: React.DragEvent, dropIndex: number) => void;
}> = ({ item, index, onToggle, onDragStart, onDragOver, onDrop }) => {
  const [isUpdating, setIsUpdating] = useState(false);
  const [isDragging, setIsDragging] = useState(false);

  const handleToggle = async (e: React.ChangeEvent<HTMLInputElement>) => {
    e.stopPropagation();
    setIsUpdating(true);
    try {
      await onToggle(item.checklist_id, e.target.checked);
    } finally {
      setIsUpdating(false);
    }
  };

  const handleDragStart = (e: React.DragEvent) => {
    setIsDragging(true);
    onDragStart(e, index);
  };

  const handleDragEnd = () => {
    setIsDragging(false);
  };

  return (
    <div
      className={`checklist-item draggable-item ${isDragging ? 'being-dragged' : ''}`}
      draggable
      onDragStart={handleDragStart}
      onDragEnd={handleDragEnd}
      onDragOver={onDragOver}
      onDrop={(e) => onDrop(e, index)}
      style={{
        padding: '0.75rem',
        border: '1px solid #e0e0e0',
        borderRadius: '6px',
        marginBottom: '0.5rem',
        backgroundColor: '#fff',
        cursor: isDragging ? 'grabbing' : 'grab',
        opacity: isUpdating ? 0.6 : isDragging ? 0.8 : 1,
        transform: isDragging ? 'scale(1.02)' : 'scale(1)',
        boxShadow: isDragging ? '0 4px 12px rgba(0,0,0,0.15)' : '0 1px 3px rgba(0,0,0,0.1)',
        transition: isDragging ? 'none' : 'all 0.2s ease',
        display: 'flex',
        alignItems: 'center',
        gap: '0.75rem'
      }}
    >
      <div 
        style={{ 
          fontSize: '1.2rem', 
          color: '#999', 
          cursor: 'grab',
          padding: '0.25rem',
          borderRadius: '3px',
          background: isDragging ? '#e0e0e0' : 'transparent',
          minWidth: '24px',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center'
        }}
        onMouseDown={(e) => e.preventDefault()}
      >
        ⋮⋮
      </div>

      <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', flex: 1 }}>
        <input
          type="checkbox"
          checked={item.is_done}
          onChange={handleToggle}
          disabled={isUpdating}
          style={{ 
            cursor: 'pointer',
            transform: 'scale(1.1)',
            accentColor: '#1976d2'
          }}
          onClick={(e) => e.stopPropagation()}
        />
        <label 
          style={{ 
            cursor: 'pointer', 
            flex: 1,
            fontSize: '0.9rem',
            lineHeight: '1.4'
          }}
          onClick={(e) => {
            e.preventDefault();
            if (!isUpdating && !isDragging) {
              const checkbox = e.currentTarget.previousElementSibling as HTMLInputElement;
              if (checkbox) {
                checkbox.checked = !checkbox.checked;
                checkbox.dispatchEvent(new Event('change', { bubbles: true }));
              }
            }
          }}
        >
          <span className={item.is_done ? 'completed' : ''}>
            {item.item_name}
          </span>
        </label>
      </div>
    </div>
  );
};

export default PERTChart;

================================================================================

FILE: docker-compose.yml
------------------------
version: '3.8'
services:
  postgres:
    image: postgres:14
    environment:
      POSTGRES_DB: project_management
      POSTGRES_USER: pm_user
      POSTGRES_PASSWORD: pm_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:

================================================================================

FILE: README.md
---------------
## アプリ概要

このアプリは、プロジェクト管理に必要な機能を統合したWebアプリケーションです。
ウォーターフォール型開発にもアジャイル開発にも、さらにはシステム開発以外の様々なプロジェクトにも利用できます。
このアプリを使用することで以下のようなことが可能になります。

1. PERT図で視覚的にプロジェクト全体像を把握
![PERT図で視覚的にプロジェクト全体像を把握](docs/screenshots/screenshot1.png)
2. 依存関係と工数から自動でスケジュールを算出
![依存関係と工数から自動でスケジュールを算出](docs/screenshots/screenshot2.png)
3. WBS形式でのプロジェクト進捗管理
![WBS形式でのプロジェクト進捗管理](docs/screenshots/screenshot3.png)
4. 進捗のずれを反映した最適なスケジュールを即座に再計算
![進捗のずれを反映した最適なスケジュールを即座に再計算1](docs/screenshots/screenshot4.png)
![進捗のずれを反映した最適なスケジュールを即座に再計算2](docs/screenshots/screenshot5.png)
5. 社員の工数配分と社内リソース管理の効率化
![社員の工数配分と社内リソース管理の効率化1](docs/screenshots/screenshot6.png)
![社員の工数配分と社内リソース管理の効率化2](docs/screenshots/screenshot7.png)

### 主要機能
- **プロジェクト管理**: プロジェクトの作成・編集・一覧表示
- **WBS（作業分解構造）**: ガントチャート風のタスク管理画面
- **PERT図**: タスク間の依存関係をビジュアルに表示・編集
- **スケジュール自動算出**: 依存関係と工数から最適スケジュールを計算
- **社員管理**: 社員登録・工数配分・プロジェクト参加管理
- **チェックリスト機能**: タスクごとの詳細チェックリスト管理

## 技術スタック

- **フロントエンド**: React 18 + TypeScript + React Router
- **バックエンド**: FastAPI + SQLAlchemy + Pydantic
- **データベース**: PostgreSQL 14
- **UI**: React Flow（PERT図）+ カスタムCSS
- **開発環境**: Docker Compose

## セットアップ手順

### 前提条件

以下のソフトウェアがインストールされている必要があります：

- [Docker](https://www.docker.com/get-started/) および Docker Compose
- [Python 3.11](https://www.python.org/downloads/) （重要: 3.13は非対応）
- [Node.js 16+](https://nodejs.org/)
- [Git](https://git-scm.com/)

### 1. リポジトリのクローン

```bash
git clone https://github.com/your-username/project-management-app.git
cd project-management-app
```

### 2. Pythonバージョンの設定（重要）

Python 3.13では依存関係でエラーが発生するため、Python 3.11を使用してください。

```bash
# pyenvを使用している場合
pyenv install 3.11.10
pyenv local 3.11.10

# 環境変数をクリア
unset PYENV_VERSION

# バージョン確認
python --version  # Python 3.11.10 と表示されることを確認
```

### 3. データベースの起動

```bash
# PostgreSQLコンテナ起動
docker-compose up -d

# 起動確認
docker ps
```

### 4. バックエンドの起動

```bash
cd backend

# 仮想環境作成
python -m venv venv

# 仮想環境有効化
# Linux/Mac:
source venv/bin/activate
# Windows:
# venv\Scripts\activate

# 依存関係インストール
pip install -r requirements.txt
pip install email-validator

# 環境変数ファイル作成
echo "DATABASE_URL=postgresql://pm_user:pm_password@localhost:5432/project_management" > .env

# アプリケーション起動
python main.py
```

成功すると以下のメッセージが表示されます：
```
INFO:     Uvicorn running on http://0.0.0.0:8000
INFO:     Application startup complete.
```

### 5. フロントエンドの起動

**新しいターミナルウィンドウ**で以下を実行：

```bash
cd frontend

# 依存関係インストール
npm install

# 開発サーバー起動
npm start
```

ブラウザが自動的に http://localhost:3000 を開きます。

## 使用方法

### 基本的な操作の流れ

#### 1. 社員登録
1. サイドバーの「社員一覧」をクリック
2. 「新規社員登録」ボタンを押す
3. 社員名、メールアドレス、1日の稼働時間を入力
4. 「登録」ボタンで完了

#### 2. プロジェクト作成
1. トップページ（プロジェクト一覧）で「新規プロジェクト作成」をクリック
2. 基本情報を入力：
   - プロジェクト名（必須）
   - 開始日・終了日（必須）
   - プロジェクトマネージャー
   - クライアント名
   - 予算
3. プロジェクトメンバーを選択：
   - 社員にチェックを入れる
   - 役割と稼働率を設定
4. 「作成」ボタンで完了

#### 3. タスク管理（WBS画面）
1. プロジェクト一覧からプロジェクトをクリック
2. 「WBS」タブを選択
3. 「タスク追加」でタスクを作成：
   - タスク名（必須）
   - 予定工数（必須）
   - 担当者（必須）
   - カテゴリ（任意）
   - 説明
   - マイルストーン設定
4. タスクをクリックして詳細編集・チェックリスト管理

#### 4. 依存関係設定（PERT図）
1. 「PERT図」タブを選択
2. 依存関係の種類を選択（FS：終了→開始など）
3. タスクノードの右端から線を引いて別のタスクの左端に接続
4. 依存関係を削除する場合は線をクリック

#### 5. スケジュール計算
1. タスクや依存関係を変更後、「スケジュール要更新」が表示される
2. 「スケジュール再計算」ボタンをクリック
3. 自動的に最適なスケジュールが算出される

## 主要なユースケース

### 1. システム開発プロジェクト

**シナリオ**: ECサイト構築プロジェクト（3ヶ月、5名体制）

**手順**:
1. プロジェクト作成（期間：2025-09-01 〜 2025-11-30）
2. メンバー登録：PM（1.0）、SE（0.8）、PG（0.8）、デザイナー（0.4）、テスター（0.6）
3. タスク作成例：
   - `[要件定義] 業務要件整理` → PM担当、5人日
   - `[設計] システム設計書作成` → SE担当、8人日  
   - `[開発] フロントエンド実装` → PG担当、15人日
   - `[テスト] 単体テスト` → PG担当、5人日
   - `[テスト] 結合テスト` → テスター担当、10人日
4. 依存関係設定：要件定義 → 設計 → 開発 → 単体テスト → 結合テスト
5. スケジュール自動計算で最適な開始・終了日を算出

### 2. イベント企画プロジェクト

**シナリオ**: 社内イベント企画（2ヶ月、3名体制）

**手順**:
1. プロジェクト作成（期間：2025-09-01 〜 2025-10-31）
2. メンバー登録：企画責任者（1.0）、デザイナー（0.3）、総務（0.2）
3. タスク作成例：
   - `[企画] イベント企画書作成` → 企画責任者、3人日
   - `[デザイン] ポスター作成` → デザイナー、2人日
   - `[準備] 会場予約` → 総務、1人日
   - `[準備] ケータリング手配` → 総務、1人日
   - `[実施] イベント当日運営` → 全員、1人日
4. マイルストーン設定：企画書完成、ポスター完成、イベント実施

### 3. 製品開発プロジェクト

**シナリオ**: 新製品開発（6ヶ月、8名体制）

**手順**:
1. フェーズ分割：企画フェーズ、設計フェーズ、開発フェーズ、テストフェーズ
2. 各フェーズでタスクを詳細化
3. クリティカルパスを意識した依存関係設定
4. 定期的なスケジュール見直しと工数調整

## システムの詳細仕様

### 機能詳細

#### WBS（作業分解構造）画面
- **Excel風ガントチャート**: 左側にタスク情報、右側に期間バーを表示
- **リアルタイム進捗表示**: チェックリスト完了率に基づく進捗可視化
- **カテゴリ管理**: タスクをカテゴリ別に色分け表示
- **タスク詳細パネル**: 右側パネルでタスクの詳細情報・チェックリスト管理

#### PERT図画面
- **ドラッグ&ドロップ**: タスクノードを自由に配置
- **依存関係作成**: ノード間を線で接続して依存関係を設定
- **4種類の依存関係**: FS（終了→開始）、SS（開始→開始）、FF（終了→終了）、SF（開始→終了）
- **循環依存検出**: 無効な依存関係を自動検出・阻止

#### スケジュール計算エンジン
- **CPM（クリティカルパス法）**: Forward Passによる最早開始・終了日計算
- **営業日計算**: 土日を除外した営業日ベースでの計算
- **稼働率考慮**: メンバーの稼働率を考慮した実際の所要日数計算
- **制約条件対応**: 最早開始日、デッドラインなどの制約を考慮

### データ構造

#### 主要エンティティ
- **Employee**: 社員マスタ（名前、メール、稼働時間）
- **Project**: プロジェクト（名前、期間、予算、マネージャー）
- **ProjectMember**: プロジェクト参加者（役割、稼働率、参加期間）
- **Task**: タスク（名前、工数、期間、座標、マイルストーン）
- **TaskDependency**: タスク依存関係
- **TaskChecklist**: チェックリスト項目

## トラブルシューティング

### よくある問題と解決法

#### Python関連エラー

**Python 3.13でのエラー**
```bash
# 症状: psycopg2-binary, pydantic-core のビルドエラー
# 解決方法:
pyenv install 3.11.10
pyenv local 3.11.10
unset PYENV_VERSION
```

**依存関係エラー**
```bash
# email-validator不足の場合
pip install email-validator

# 仮想環境の再作成
rm -rf venv
python -m venv venv
source venv/bin/activate
pip install -r requirements.txt
```

#### データベース接続エラー

```bash
# Docker コンテナの確認
docker ps
docker logs project-management-app-postgres-1

# コンテナの再起動
docker-compose down
docker-compose up -d

# データベースの初期化
docker exec -it project-management-app-postgres-1 psql -U pm_user -d project_management -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
```

#### フロントエンドエラー

```bash
# node_modules の再インストール
rm -rf node_modules package-lock.json
npm install

# 開発サーバーの再起動
npm start
```

### 動作確認

#### サービス確認
- **フロントエンド**: http://localhost:3000
- **バックエンドAPI**: http://localhost:8000
- **API仕様（Swagger）**: http://localhost:8000/docs

#### データベース直接接続
```bash
docker exec -it project-management-app-postgres-1 psql -U pm_user -d project_management

# テーブル一覧確認
\dt

# サンプルデータ確認
SELECT * FROM employee;
SELECT * FROM project;
```

### テストデータの投入
アプリケーション起動時に以下のサンプルデータが自動投入されます：
- **社員**: 田中太郎、佐藤花子、鈴木一郎
- **コードマスタ**: ステータス（未着手/進行中/完了）、優先度（高/中/低）

本格的な運用前に、これらのサンプルデータを削除し、実際のデータに置き換えてください。

================================================================================

